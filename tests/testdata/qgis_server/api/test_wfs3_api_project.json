Content-Type: application/vnd.oai.openapi+json;version=3.0

{
  "components": {
    "parameters": {
      "bbox": {
        "description": "Only features that have a geometry that intersects the bounding box are selected. The bounding box is provided as four or six numbers, depending on whether the coordinate reference system includes a vertical axis (elevation or depth):\n \n* Lower left corner, coordinate axis 1\n* Lower left corner, coordinate axis 2\n* Lower left corner, coordinate axis 3 (optional)\n* Upper right corner, coordinate axis 1\n* Upper right corner, coordinate axis 2\n* Upper right corner, coordinate axis 3 (optional)\n\nThe coordinate reference system of the values is WGS84 longitude/latitude (http://www.opengis.net/def/crs/OGC/1.3/CRS84) unless a different coordinate reference system is specified in the parameter `bbox-crs`.\n\nFor WGS84 longitude/latitude the values are in most cases the sequence of minimum longitude, minimum latitude, maximum longitude and maximum latitude. However, in cases where the box spans the antimeridian the first value (west-most box edge) is larger than the third value (east-most box edge).\n\nIf a feature has multiple spatial geometry properties, it is the decision of the server whether only a single spatial geometry property is used to determine the extent or all relevant geometries.",
        "explode": false,
        "in": "query",
        "name": "bbox",
        "required": false,
        "schema": {
          "items": {
            "type": "number"
          },
          "maxItems": 6,
          "minItems": 4,
          "type": "array"
        },
        "style": "form"
      },
      "bbox-crs": {
        "description": "The coordinate reference system of the bbox parameter. Default is WGS84 longitude/latitude (http://www.opengis.net/def/crs/OGC/1.3/CRS84).",
        "explode": false,
        "in": "query",
        "name": "bbox-crs",
        "required": false,
        "schema": {
          "default": "http://www.opengis.net/def/crs/OGC/1.3/CRS84",
          "enum": [
            "http://www.opengis.net/def/crs/OGC/1.3/CRS84",
            "http://www.opengis.net/def/crs/EPSG/0/4326",
            "http://www.opengis.net/def/crs/EPSG/0/3857"
          ],
          "type": "string"
        },
        "style": "form"
      },
      "crs": {
        "description": "The coordinate reference system of the response geometries. Default is WGS84 longitude/latitude (http://www.opengis.net/def/crs/OGC/1.3/CRS84).",
        "explode": false,
        "in": "query",
        "name": "crs",
        "required": false,
        "schema": {
          "default": "http://www.opengis.net/def/crs/OGC/1.3/CRS84",
          "enum": [
            "http://www.opengis.net/def/crs/OGC/1.3/CRS84",
            "http://www.opengis.net/def/crs/EPSG/0/4326",
            "http://www.opengis.net/def/crs/EPSG/0/3857"
          ],
          "type": "string"
        },
        "style": "form"
      },
      "datetime": {
        "description": "Either a date-time or an interval, open or closed. Date and time expressions\nadhere to RFC 3339. Open intervals are expressed using double-dots.\n\nExamples:\n   * A date-time: \"2018-02-12T23:20:50Z\"\n   * A closed interval: \"2018-02-12T00:00:00Z/2018-03-18T12:31:12Z\"\n    * Open intervals: \"2018-02-12T00:00:00Z/..\" or \"../2018-03-18T12:31:12Z\"\nOnly features that have a temporal property that intersects the value of\n`datetime` are selected.\nIf a feature has multiple temporal properties, it is the decision of the\nserver whether only a single temporal property is used to determine\nthe extent or all relevant temporal properties.",
        "explode": false,
        "in": "query",
        "name": "datetime",
        "required": false,
        "schema": {
          "type": "string"
        },
        "style": "form"
      },
      "featureId": {
        "description": "Local identifier of a specific feature",
        "in": "path",
        "name": "featureId",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "limit": {
        "description": "The optional limit parameter limits the number of items that are presented in the response document.\nOnly items are counted that are on the first level of the collection in the response document.  Nested objects contained within the explicitly requested items shall not be counted.\nMinimum = 1.\nMaximum = 10000.\nDefault = 10.",
        "example": 10,
        "explode": false,
        "in": "query",
        "name": "limit",
        "required": false,
        "schema": {
          "default": 10,
          "maximum": 10000,
          "minimum": 1,
          "type": "integer"
        },
        "style": "form"
      },
      "offset": {
        "description": "The optional offset parameter indicates the index within the result set from which the server shall begin presenting results in the response document. The first element has an index of 0.\nMinimum = 0.\nDefault = 0.",
        "example": 0,
        "explode": false,
        "in": "query",
        "name": "offset",
        "required": false,
        "schema": {
          "default": 0,
          "minimum": 0,
          "type": "integer"
        },
        "style": "form"
      },
      "relations": {
        "description": "Comma-separated list of related collections that should be shown for this feature",
        "explode": false,
        "in": "query",
        "name": "relations",
        "required": false,
        "schema": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "style": "form"
      },
      "resultType": {
        "description": "This service will respond to a query in one of two ways (excluding an exception response). It may either generate a complete response document containing resources that satisfy the operation or it may simply generate an empty response container that indicates the count of the total number of resources that the operation would return. Which of these two responses is generated is determined by the value of the optional resultType parameter.\nThe allowed values for this parameter are \"results\" and \"hits\".\nIf the value of the resultType parameter is set to \"results\", the server will generate a complete response document containing resources that satisfy the operation.\nIf the value of the resultType attribute is set to \"hits\", the server will generate an empty response document containing no resource instances.\nDefault = \"results\".",
        "example": "results",
        "explode": false,
        "in": "query",
        "name": "resultType",
        "required": false,
        "schema": {
          "default": "results",
          "enum": [
            "hits",
            "results"
          ],
          "type": "string"
        },
        "style": "form"
      },
      "sortby": {
        "description": "Sort results by the specified field name",
        "in": "query",
        "name": "sortby",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "sortdesc": {
        "description": "Sort results in descending order, field name must be specified with 'sortby' parameter",
        "in": "query",
        "name": "sortdesc",
        "required": false,
        "schema": {
          "type": "boolean"
        }
      }
    },
    "schemas": {
      "collectionInfo": {
        "properties": {
          "crs": {
            "default": [
              "http://www.opengis.net/def/crs/OGC/1.3/CRS84"
            ],
            "description": "The coordinate reference systems in which geometries may be retrieved. Coordinate reference systems are identified by a URI. The first coordinate reference system is the coordinate reference system that is used by default. This is always \"http://www.opengis.net/def/crs/OGC/1.3/CRS84\", i.e. WGS84 longitude/latitude.",
            "example": [
              "http://www.opengis.net/def/crs/OGC/1.3/CRS84",
              "http://www.opengis.net/def/crs/EPSG/0/4326"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "description": {
            "description": "a description of the features in the collection",
            "example": "Buildings in the city of Bonn.",
            "type": "string"
          },
          "extent": {
            "$ref": "#/components/schemas/extent"
          },
          "links": {
            "example": [
              {
                "href": "http://data.example.org/collections/buildings/items",
                "rel": "item",
                "title": "Buildings",
                "type": "application/geo+json"
              },
              {
                "href": "http://example.com/concepts/buildings.html",
                "rel": "describedBy",
                "title": "Feature catalog for buildings",
                "type": "text/html"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/link"
            },
            "type": "array"
          },
          "name": {
            "description": "identifier of the collection used, for example, in URIs",
            "example": "buildings",
            "type": "string"
          },
          "relations": {
            "description": "Related collections that may be retrieved for this collection",
            "example": "{\"id\": \"label\"}",
            "type": "object"
          },
          "title": {
            "description": "human readable title of the collection",
            "example": "Buildings",
            "type": "string"
          }
        },
        "required": [
          "links",
          "name"
        ],
        "type": "object"
      },
      "content": {
        "properties": {
          "collections": {
            "items": {
              "$ref": "#/components/schemas/collectionInfo"
            },
            "type": "array"
          },
          "links": {
            "example": [
              {
                "href": "http://data.example.org/collections.json",
                "rel": "self",
                "title": "this document",
                "type": "application/json"
              },
              {
                "href": "http://data.example.org/collections.html",
                "rel": "alternate",
                "title": "this document as HTML",
                "type": "text/html"
              },
              {
                "href": "http://schemas.example.org/1.0/foobar.xsd",
                "rel": "describedBy",
                "title": "XML schema for Acme Corporation data",
                "type": "application/xml"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/link"
            },
            "type": "array"
          }
        },
        "required": [
          "collections",
          "links"
        ],
        "type": "object"
      },
      "exception": {
        "properties": {
          "code": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        },
        "required": [
          "code"
        ],
        "type": "object"
      },
      "extent": {
        "properties": {
          "crs": {
            "default": "http://www.opengis.net/def/crs/OGC/1.3/CRS84",
            "description": "Coordinate reference system of the coordinates in the spatial extent (property `spatial`). In the Core, only WGS84 longitude/latitude is supported. Extensions may support additional coordinate reference systems.",
            "enum": [
              "http://www.opengis.net/def/crs/OGC/1.3/CRS84"
            ],
            "type": "string"
          },
          "spatial": {
            "description": "West, north, east, south edges of the spatial extent. The minimum and maximum values apply to the coordinate reference system WGS84 longitude/latitude that is supported in the Core. If, for example, a projected coordinate reference system is used, the minimum and maximum values need to be adjusted.",
            "example": [
              -180,
              -90,
              180,
              90
            ],
            "items": {
              "type": "number"
            },
            "maxItems": 6,
            "minItems": 4,
            "type": "array"
          },
          "temporal": {
            "description": "The temporal extent of the features in the collection.",
            "properties": {
              "interval": {
                "description": "One or more time intervals that describe the temporal extent of the dataset.\nThe value `null` is supported and indicates an open time interval.\nIn the Core only a single time interval is supported. Extensions may support multiple intervals. If multiple intervals are provided, the union of the intervals describes the temporal extent.",
                "items": {
                  "description": "Begin and end times of the time interval. The timestamps\nare in the coordinate reference system specified in `trs`. By default\nthis is the Gregorian calendar.",
                  "items": {
                    "example": [
                      "2011-11-11T12:22:11Z",
                      null
                    ],
                    "format": "date-time",
                    "nullable": true,
                    "trs": {
                      "default": "http://www.opengis.net/def/uom/ISO-8601/0/Gregorian",
                      "description": "Coordinate reference system of the coordinates in the temporal extent\n(property `interval`). The default reference system is the Gregorian calendar.\nIn the Core this is the only supported temporal reference system.\nExtensions may support additional temporal reference systems and add\nadditional enum values.",
                      "enum": [
                        "http://www.opengis.net/def/uom/ISO-8601/0/Gregorian"
                      ],
                      "type": "string"
                    },
                    "type": "string"
                  },
                  "maxItems": 2,
                  "minItems": 2,
                  "type": "array"
                },
                "minItems": 1,
                "type": "array"
              }
            },
            "type": "object"
          }
        },
        "required": [
          "spatial"
        ],
        "type": "object"
      },
      "featureCollectionGeoJSON": {
        "properties": {
          "features": {
            "items": {
              "$ref": "#/components/schemas/featureGeoJSON"
            },
            "type": "array"
          },
          "links": {
            "items": {
              "$ref": "#/components/schemas/link"
            },
            "type": "array"
          },
          "numberMatched": {
            "minimum": 0,
            "type": "integer"
          },
          "numberReturned": {
            "minimum": 0,
            "type": "integer"
          },
          "timeStamp": {
            "format": "dateTime",
            "type": "string"
          },
          "type": {
            "enum": [
              "FeatureCollection"
            ],
            "type": "string"
          }
        },
        "required": [
          "features",
          "type"
        ],
        "type": "object"
      },
      "featureGeoJSON": {
        "properties": {
          "geometry": {
            "$ref": "#/components/schemas/geometryGeoJSON"
          },
          "id": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "integer"
              }
            ]
          },
          "properties": {
            "nullable": true,
            "type": "object"
          },
          "type": {
            "enum": [
              "Feature"
            ],
            "type": "string"
          }
        },
        "required": [
          "geometry",
          "properties",
          "type"
        ],
        "type": "object"
      },
      "geometryGeoJSON": {
        "properties": {
          "type": {
            "enum": [
              "Point",
              "MultiPoint",
              "LineString",
              "MultiLineString",
              "Polygon",
              "MultiPolygon",
              "GeometryCollection"
            ],
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "link": {
        "properties": {
          "href": {
            "example": "http://data.example.com/buildings/123",
            "type": "string"
          },
          "hreflang": {
            "example": "en",
            "type": "string"
          },
          "rel": {
            "example": "prev",
            "type": "string"
          },
          "type": {
            "example": "application/geo+json",
            "type": "string"
          }
        },
        "required": [
          "href"
        ],
        "type": "object"
      },
      "req-classes": {
        "properties": {
          "conformsTo": {
            "example": [
              "http://www.opengis.net/spec/wfs-1/3.0/req/core",
              "http://www.opengis.net/spec/wfs-1/3.0/req/oas30",
              "http://www.opengis.net/spec/wfs-1/3.0/req/html",
              "http://www.opengis.net/spec/wfs-1/3.0/req/geojson"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "conformsTo"
        ],
        "type": "object"
      },
      "root": {
        "properties": {
          "links": {
            "example": [
              {
                "href": "http://data.example.org/",
                "rel": "self",
                "title": "this document",
                "type": "application/json"
              },
              {
                "href": "http://data.example.org/api",
                "rel": "service",
                "title": "the API definition",
                "type": "application/openapi+json;version=3.0"
              },
              {
                "href": "http://data.example.org/conformance",
                "rel": "conformance",
                "title": "WFS 3.0 conformance classes implemented by this server",
                "type": "application/json"
              },
              {
                "href": "http://data.example.org/collections",
                "rel": "data",
                "title": "Metadata about the feature collections",
                "type": "application/json"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/link"
            },
            "type": "array"
          }
        },
        "required": [
          "links"
        ],
        "type": "object"
      }
    }
  },
  "info": {
    "contact": {
      "email": "elpaso@itopen.it",
      "name": "Alessandro Pasotti",
      "url": ""
    },
    "description": "Some UTF8 text èòù",
    "license": {
      "name": ""
    },
    "title": "QGIS TestProject",
    "version": ""
  },
  "openapi": "3.0.1",
  "paths": {
    "/wfs3": {
      "get": {
        "description": "The landing page provides links to the API definition, the Conformance statements and the metadata about the feature data in this dataset.",
        "operationId": "getLandingPage",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/root"
                }
              },
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "The landing page provides links to the API definition, the Conformance statements and the metadata about the feature data in this dataset."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/exception"
                }
              },
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "An error occurred."
          }
        },
        "summary": "WFS 3.0 Landing Page",
        "tags": [
          "Capabilities"
        ]
      }
    },
    "/wfs3/api": {
      "get": {
        "description": "The formal documentation of this API according to the OpenAPI specification, version 3.0. I.e., this document.",
        "operationId": "getApiDescription",
        "responses": {
          "200": {
            "content": {
              "application/vnd.oai.openapi+json;version=3.0": {
                "schema": {
                  "type": "object"
                }
              },
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "The formal documentation of this API according to the OpenAPI specification, version 3.0. I.e., this document."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/exception"
                }
              },
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "An error occurred."
          }
        },
        "summary": "The API description",
        "tags": [
          "Capabilities"
        ]
      }
    },
    "/wfs3/collections": {
      "get": {
        "description": "Describe the feature collections in the dataset statements and the metadata about the feature data in this dataset.",
        "operationId": "describeCollections",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/content"
                }
              },
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Describe the feature collections in the dataset statements and the metadata about the feature data in this dataset."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/exception"
                }
              },
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "An error occurred."
          }
        },
        "summary": "Metadata about the feature collections shared by this API.",
        "tags": [
          "Capabilities"
        ]
      }
    },
    "/wfs3/collections/exclude_attribute": {
      "get": {
        "description": "Metadata about a feature collection.",
        "operationId": "describeCollection_testlayer_èé_2_a5f61891_b949_43e3_ad30_84013fc922de",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/collectionInfo"
                }
              },
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Metadata about the collection 'A test vector layer exclude attrs' shared by this API."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/exception"
                }
              },
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "An error occurred."
          }
        },
        "summary": "Describe the 'A test vector layer exclude attrs' feature collection",
        "tags": [
          "Capabilities"
        ]
      }
    },
    "/wfs3/collections/exclude_attribute/items": {
      "get": {
        "description": "Every feature in a dataset belongs to a collection. A dataset may consist of multiple feature collections. A feature collection is often a collection of features of a similar type, based on a common schema. Use content negotiation or specify a file extension to request HTML (.html) or GeoJSON (.json).",
        "operationId": "getFeatures_testlayer_èé_2_a5f61891_b949_43e3_ad30_84013fc922de",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/resultType"
          },
          {
            "$ref": "#/components/parameters/bbox"
          },
          {
            "$ref": "#/components/parameters/bbox-crs"
          },
          {
            "$ref": "#/components/parameters/crs"
          },
          {
            "$ref": "#/components/parameters/datetime"
          },
          {
            "$ref": "#/components/parameters/sortby"
          },
          {
            "$ref": "#/components/parameters/sortdesc"
          },
          {
            "description": "Retrieve features filtered by: id (Integer)",
            "explode": false,
            "in": "query",
            "name": "id",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "Retrieve features filtered by: utf8nameè (String)",
            "explode": false,
            "in": "query",
            "name": "utf8nameè",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Comma separated list of feature property names to be added to the result. Valid values: 'id', 'utf8nameè'",
            "explode": false,
            "in": "query",
            "name": "properties",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/geo+json": {
                "schema": {
                  "$ref": "#/components/schemas/featureCollectionGeoJSON"
                }
              },
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Metadata about the collection 'A test vector layer exclude attrs' shared by this API."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/exception"
                }
              },
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "An error occurred."
          }
        },
        "summary": "Retrieve features of 'A test vector layer exclude attrs' feature collection",
        "tags": [
          "Features"
        ]
      },
      "post": {
        "description": "Adds a new feature to the collection {collectionId}",
        "operationId": "getFeatures_testlayer_èé_2_a5f61891_b949_43e3_ad30_84013fc922de_POST",
        "responses": {
          "201": {
            "description": "A new feature was successfully added to the collection"
          },
          "403": {
            "description": "Forbidden: the operation requested was not authorized"
          },
          "500": {
            "description": "Posted data could not be parsed correctly or another error occurred"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/exception"
                }
              },
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "An error occurred."
          }
        },
        "summary": "Adds a new feature to the collection {collectionId}",
        "tags": [
          "edit",
          "insert"
        ]
      }
    },
    "/wfs3/collections/exclude_attribute/items/{featureId}": {
      "delete": {
        "description": "Deletes the feature with ID {featureId} in the collection {collectionId}",
        "operationId": "getFeatureDELETE",
        "responses": {
          "201": {
            "description": "The feature was successfully deleted from the collection"
          },
          "403": {
            "description": "Forbidden: the operation requested was not authorized"
          },
          "500": {
            "description": "Posted data could not be parsed correctly or another error occurred"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/exception"
                }
              },
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "An error occurred."
          }
        },
        "summary": "Deletes the feature with ID {featureId} in the collection {collectionId}",
        "tags": [
          "edit",
          "delete"
        ]
      },
      "get": {
        "description": "Retrieve a feature with ID {featureId} from the collection with ID {collectionId}; use content negotiation or specify a file extension to request HTML (.html or GeoJSON (.json).",
        "operationId": "getFeature_testlayer_èé_2_a5f61891_b949_43e3_ad30_84013fc922de_GET",
        "parameters": [
          {
            "$ref": "#/components/parameters/featureId"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/geo+json": {
                "schema": {
                  "$ref": "#/components/schemas/featureGeoJSON"
                }
              },
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Retrieve a 'A test vector layer exclude attrs' feature by 'featureId'."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/exception"
                }
              },
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "An error occurred."
          }
        },
        "summary": "Retrieve a single feature from the 'A test vector layer exclude attrs' feature collection",
        "tags": [
          "Features"
        ]
      },
      "patch": {
        "description": "Changes attributes of feature with ID {featureId} in the collection {collectionId}",
        "operationId": "getFeaturePUT",
        "responses": {
          "200": {
            "description": "The feature was successfully updated"
          },
          "403": {
            "description": "Forbidden: the operation requested was not authorized"
          },
          "500": {
            "description": "Posted data could not be parsed correctly or another error occurred"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/exception"
                }
              },
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "An error occurred."
          }
        },
        "summary": "Changes attributes of feature with ID {featureId} in the collection {collectionId}",
        "tags": [
          "edit"
        ]
      },
      "put": {
        "description": "Replaces the feature with ID {featureId} in the collection {collectionId}",
        "operationId": "getFeaturePUT",
        "responses": {
          "200": {
            "description": "The feature was successfully updated"
          },
          "403": {
            "description": "Forbidden: the operation requested was not authorized"
          },
          "500": {
            "description": "Posted data could not be parsed correctly or another error occurred"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/exception"
                }
              },
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "An error occurred."
          }
        },
        "summary": "Replaces the feature with ID {featureId} in the collection {collectionId}",
        "tags": [
          "edit",
          "replace"
        ]
      }
    },
    "/wfs3/collections/fields_alias": {
      "get": {
        "description": "Metadata about a feature collection.",
        "operationId": "describeCollection_testlayer_èé_cf86cf11_222f_4b62_929c_12cfc82b9774",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/collectionInfo"
                }
              },
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Metadata about the collection 'A test vector layer with aliases' shared by this API."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/exception"
                }
              },
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "An error occurred."
          }
        },
        "summary": "Describe the 'A test vector layer with aliases' feature collection",
        "tags": [
          "Capabilities"
        ]
      }
    },
    "/wfs3/collections/fields_alias/items": {
      "get": {
        "description": "Every feature in a dataset belongs to a collection. A dataset may consist of multiple feature collections. A feature collection is often a collection of features of a similar type, based on a common schema. Use content negotiation or specify a file extension to request HTML (.html) or GeoJSON (.json).",
        "operationId": "getFeatures_testlayer_èé_cf86cf11_222f_4b62_929c_12cfc82b9774",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/resultType"
          },
          {
            "$ref": "#/components/parameters/bbox"
          },
          {
            "$ref": "#/components/parameters/bbox-crs"
          },
          {
            "$ref": "#/components/parameters/crs"
          },
          {
            "$ref": "#/components/parameters/datetime"
          },
          {
            "$ref": "#/components/parameters/sortby"
          },
          {
            "$ref": "#/components/parameters/sortdesc"
          },
          {
            "description": "Retrieve features filtered by: alias_id (Integer)",
            "explode": false,
            "in": "query",
            "name": "alias_id",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "Retrieve features filtered by: alias_name (String)",
            "explode": false,
            "in": "query",
            "name": "alias_name",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Retrieve features filtered by: utf8nameè (String)",
            "explode": false,
            "in": "query",
            "name": "utf8nameè",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Comma separated list of feature property names to be added to the result. Valid values: 'alias_id', 'alias_name', 'utf8nameè'",
            "explode": false,
            "in": "query",
            "name": "properties",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/geo+json": {
                "schema": {
                  "$ref": "#/components/schemas/featureCollectionGeoJSON"
                }
              },
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Metadata about the collection 'A test vector layer with aliases' shared by this API."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/exception"
                }
              },
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "An error occurred."
          }
        },
        "summary": "Retrieve features of 'A test vector layer with aliases' feature collection",
        "tags": [
          "Features"
        ]
      },
      "post": {
        "description": "Adds a new feature to the collection {collectionId}",
        "operationId": "getFeatures_testlayer_èé_cf86cf11_222f_4b62_929c_12cfc82b9774_POST",
        "responses": {
          "201": {
            "description": "A new feature was successfully added to the collection"
          },
          "403": {
            "description": "Forbidden: the operation requested was not authorized"
          },
          "500": {
            "description": "Posted data could not be parsed correctly or another error occurred"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/exception"
                }
              },
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "An error occurred."
          }
        },
        "summary": "Adds a new feature to the collection {collectionId}",
        "tags": [
          "edit",
          "insert"
        ]
      }
    },
    "/wfs3/collections/fields_alias/items/{featureId}": {
      "delete": {
        "description": "Deletes the feature with ID {featureId} in the collection {collectionId}",
        "operationId": "getFeatureDELETE",
        "responses": {
          "201": {
            "description": "The feature was successfully deleted from the collection"
          },
          "403": {
            "description": "Forbidden: the operation requested was not authorized"
          },
          "500": {
            "description": "Posted data could not be parsed correctly or another error occurred"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/exception"
                }
              },
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "An error occurred."
          }
        },
        "summary": "Deletes the feature with ID {featureId} in the collection {collectionId}",
        "tags": [
          "edit",
          "delete"
        ]
      },
      "get": {
        "description": "Retrieve a feature with ID {featureId} from the collection with ID {collectionId}; use content negotiation or specify a file extension to request HTML (.html or GeoJSON (.json).",
        "operationId": "getFeature_testlayer_èé_cf86cf11_222f_4b62_929c_12cfc82b9774_GET",
        "parameters": [
          {
            "$ref": "#/components/parameters/featureId"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/geo+json": {
                "schema": {
                  "$ref": "#/components/schemas/featureGeoJSON"
                }
              },
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Retrieve a 'A test vector layer with aliases' feature by 'featureId'."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/exception"
                }
              },
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "An error occurred."
          }
        },
        "summary": "Retrieve a single feature from the 'A test vector layer with aliases' feature collection",
        "tags": [
          "Features"
        ]
      },
      "patch": {
        "description": "Changes attributes of feature with ID {featureId} in the collection {collectionId}",
        "operationId": "getFeaturePUT",
        "responses": {
          "200": {
            "description": "The feature was successfully updated"
          },
          "403": {
            "description": "Forbidden: the operation requested was not authorized"
          },
          "500": {
            "description": "Posted data could not be parsed correctly or another error occurred"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/exception"
                }
              },
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "An error occurred."
          }
        },
        "summary": "Changes attributes of feature with ID {featureId} in the collection {collectionId}",
        "tags": [
          "edit"
        ]
      },
      "put": {
        "description": "Replaces the feature with ID {featureId} in the collection {collectionId}",
        "operationId": "getFeaturePUT",
        "responses": {
          "200": {
            "description": "The feature was successfully updated"
          },
          "403": {
            "description": "Forbidden: the operation requested was not authorized"
          },
          "500": {
            "description": "Posted data could not be parsed correctly or another error occurred"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/exception"
                }
              },
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "An error occurred."
          }
        },
        "summary": "Replaces the feature with ID {featureId} in the collection {collectionId}",
        "tags": [
          "edit",
          "replace"
        ]
      }
    },
    "/wfs3/collections/layer1_with_short_name": {
      "get": {
        "description": "Metadata about a feature collection.",
        "operationId": "describeCollection_testlayer_c0988fd7_97ca_451d_adbc_37ad6d10583a",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/collectionInfo"
                }
              },
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Metadata about the collection 'A Layer1 with a short name' shared by this API."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/exception"
                }
              },
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "An error occurred."
          }
        },
        "summary": "Describe the 'A Layer1 with a short name' feature collection",
        "tags": [
          "Capabilities"
        ]
      }
    },
    "/wfs3/collections/layer1_with_short_name/items": {
      "get": {
        "description": "Every feature in a dataset belongs to a collection. A dataset may consist of multiple feature collections. A feature collection is often a collection of features of a similar type, based on a common schema. Use content negotiation or specify a file extension to request HTML (.html) or GeoJSON (.json).",
        "operationId": "getFeatures_testlayer_c0988fd7_97ca_451d_adbc_37ad6d10583a",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/resultType"
          },
          {
            "$ref": "#/components/parameters/bbox"
          },
          {
            "$ref": "#/components/parameters/bbox-crs"
          },
          {
            "$ref": "#/components/parameters/crs"
          },
          {
            "$ref": "#/components/parameters/datetime"
          },
          {
            "$ref": "#/components/parameters/sortby"
          },
          {
            "$ref": "#/components/parameters/sortdesc"
          },
          {
            "description": "Retrieve features filtered by: id (Integer)",
            "explode": false,
            "in": "query",
            "name": "id",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "Retrieve features filtered by: name (String)",
            "explode": false,
            "in": "query",
            "name": "name",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Retrieve features filtered by: utf8nameè (String)",
            "explode": false,
            "in": "query",
            "name": "utf8nameè",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Comma separated list of feature property names to be added to the result. Valid values: 'id', 'name', 'utf8nameè'",
            "explode": false,
            "in": "query",
            "name": "properties",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/geo+json": {
                "schema": {
                  "$ref": "#/components/schemas/featureCollectionGeoJSON"
                }
              },
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Metadata about the collection 'A Layer1 with a short name' shared by this API."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/exception"
                }
              },
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "An error occurred."
          }
        },
        "summary": "Retrieve features of 'A Layer1 with a short name' feature collection",
        "tags": [
          "Features"
        ]
      },
      "post": {
        "description": "Adds a new feature to the collection {collectionId}",
        "operationId": "getFeatures_testlayer_c0988fd7_97ca_451d_adbc_37ad6d10583a_POST",
        "responses": {
          "201": {
            "description": "A new feature was successfully added to the collection"
          },
          "403": {
            "description": "Forbidden: the operation requested was not authorized"
          },
          "500": {
            "description": "Posted data could not be parsed correctly or another error occurred"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/exception"
                }
              },
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "An error occurred."
          }
        },
        "summary": "Adds a new feature to the collection {collectionId}",
        "tags": [
          "edit",
          "insert"
        ]
      }
    },
    "/wfs3/collections/layer1_with_short_name/items/{featureId}": {
      "delete": {
        "description": "Deletes the feature with ID {featureId} in the collection {collectionId}",
        "operationId": "getFeatureDELETE",
        "responses": {
          "201": {
            "description": "The feature was successfully deleted from the collection"
          },
          "403": {
            "description": "Forbidden: the operation requested was not authorized"
          },
          "500": {
            "description": "Posted data could not be parsed correctly or another error occurred"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/exception"
                }
              },
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "An error occurred."
          }
        },
        "summary": "Deletes the feature with ID {featureId} in the collection {collectionId}",
        "tags": [
          "edit",
          "delete"
        ]
      },
      "get": {
        "description": "Retrieve a feature with ID {featureId} from the collection with ID {collectionId}; use content negotiation or specify a file extension to request HTML (.html or GeoJSON (.json).",
        "operationId": "getFeature_testlayer_c0988fd7_97ca_451d_adbc_37ad6d10583a_GET",
        "parameters": [
          {
            "$ref": "#/components/parameters/featureId"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/geo+json": {
                "schema": {
                  "$ref": "#/components/schemas/featureGeoJSON"
                }
              },
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Retrieve a 'A Layer1 with a short name' feature by 'featureId'."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/exception"
                }
              },
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "An error occurred."
          }
        },
        "summary": "Retrieve a single feature from the 'A Layer1 with a short name' feature collection",
        "tags": [
          "Features"
        ]
      },
      "patch": {
        "description": "Changes attributes of feature with ID {featureId} in the collection {collectionId}",
        "operationId": "getFeaturePUT",
        "responses": {
          "200": {
            "description": "The feature was successfully updated"
          },
          "403": {
            "description": "Forbidden: the operation requested was not authorized"
          },
          "500": {
            "description": "Posted data could not be parsed correctly or another error occurred"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/exception"
                }
              },
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "An error occurred."
          }
        },
        "summary": "Changes attributes of feature with ID {featureId} in the collection {collectionId}",
        "tags": [
          "edit"
        ]
      },
      "put": {
        "description": "Replaces the feature with ID {featureId} in the collection {collectionId}",
        "operationId": "getFeaturePUT",
        "responses": {
          "200": {
            "description": "The feature was successfully updated"
          },
          "403": {
            "description": "Forbidden: the operation requested was not authorized"
          },
          "500": {
            "description": "Posted data could not be parsed correctly or another error occurred"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/exception"
                }
              },
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "An error occurred."
          }
        },
        "summary": "Replaces the feature with ID {featureId} in the collection {collectionId}",
        "tags": [
          "edit",
          "replace"
        ]
      }
    },
    "/wfs3/collections/testlayer èé": {
      "get": {
        "description": "Metadata about a feature collection.",
        "operationId": "describeCollection_testlayer20150528120452665",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/collectionInfo"
                }
              },
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Metadata about the collection 'A test wfs vector layer èé' shared by this API."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/exception"
                }
              },
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "An error occurred."
          }
        },
        "summary": "Describe the 'A test wfs vector layer èé' feature collection",
        "tags": [
          "Capabilities"
        ]
      }
    },
    "/wfs3/collections/testlayer èé/items": {
      "get": {
        "description": "Every feature in a dataset belongs to a collection. A dataset may consist of multiple feature collections. A feature collection is often a collection of features of a similar type, based on a common schema. Use content negotiation or specify a file extension to request HTML (.html) or GeoJSON (.json).",
        "operationId": "getFeatures_testlayer20150528120452665",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/resultType"
          },
          {
            "$ref": "#/components/parameters/bbox"
          },
          {
            "$ref": "#/components/parameters/bbox-crs"
          },
          {
            "$ref": "#/components/parameters/crs"
          },
          {
            "$ref": "#/components/parameters/datetime"
          },
          {
            "$ref": "#/components/parameters/sortby"
          },
          {
            "$ref": "#/components/parameters/sortdesc"
          },
          {
            "description": "Retrieve features filtered by: id (Integer)",
            "explode": false,
            "in": "query",
            "name": "id",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "Retrieve features filtered by: name (String)",
            "explode": false,
            "in": "query",
            "name": "name",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Retrieve features filtered by: utf8nameè (String)",
            "explode": false,
            "in": "query",
            "name": "utf8nameè",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Comma separated list of feature property names to be added to the result. Valid values: 'id', 'name', 'utf8nameè'",
            "explode": false,
            "in": "query",
            "name": "properties",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/geo+json": {
                "schema": {
                  "$ref": "#/components/schemas/featureCollectionGeoJSON"
                }
              },
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Metadata about the collection 'A test wfs vector layer èé' shared by this API."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/exception"
                }
              },
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "An error occurred."
          }
        },
        "summary": "Retrieve features of 'A test wfs vector layer èé' feature collection",
        "tags": [
          "Features"
        ]
      },
      "post": {
        "description": "Adds a new feature to the collection {collectionId}",
        "operationId": "getFeatures_testlayer20150528120452665_POST",
        "responses": {
          "201": {
            "description": "A new feature was successfully added to the collection"
          },
          "403": {
            "description": "Forbidden: the operation requested was not authorized"
          },
          "500": {
            "description": "Posted data could not be parsed correctly or another error occurred"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/exception"
                }
              },
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "An error occurred."
          }
        },
        "summary": "Adds a new feature to the collection {collectionId}",
        "tags": [
          "edit",
          "insert"
        ]
      }
    },
    "/wfs3/collections/testlayer èé/items/{featureId}": {
      "delete": {
        "description": "Deletes the feature with ID {featureId} in the collection {collectionId}",
        "operationId": "getFeatureDELETE",
        "responses": {
          "201": {
            "description": "The feature was successfully deleted from the collection"
          },
          "403": {
            "description": "Forbidden: the operation requested was not authorized"
          },
          "500": {
            "description": "Posted data could not be parsed correctly or another error occurred"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/exception"
                }
              },
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "An error occurred."
          }
        },
        "summary": "Deletes the feature with ID {featureId} in the collection {collectionId}",
        "tags": [
          "edit",
          "delete"
        ]
      },
      "get": {
        "description": "Retrieve a feature with ID {featureId} from the collection with ID {collectionId}; use content negotiation or specify a file extension to request HTML (.html or GeoJSON (.json).",
        "operationId": "getFeature_testlayer20150528120452665_GET",
        "parameters": [
          {
            "$ref": "#/components/parameters/featureId"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/geo+json": {
                "schema": {
                  "$ref": "#/components/schemas/featureGeoJSON"
                }
              },
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Retrieve a 'A test wfs vector layer èé' feature by 'featureId'."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/exception"
                }
              },
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "An error occurred."
          }
        },
        "summary": "Retrieve a single feature from the 'A test wfs vector layer èé' feature collection",
        "tags": [
          "Features"
        ]
      },
      "patch": {
        "description": "Changes attributes of feature with ID {featureId} in the collection {collectionId}",
        "operationId": "getFeaturePUT",
        "responses": {
          "200": {
            "description": "The feature was successfully updated"
          },
          "403": {
            "description": "Forbidden: the operation requested was not authorized"
          },
          "500": {
            "description": "Posted data could not be parsed correctly or another error occurred"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/exception"
                }
              },
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "An error occurred."
          }
        },
        "summary": "Changes attributes of feature with ID {featureId} in the collection {collectionId}",
        "tags": [
          "edit"
        ]
      },
      "put": {
        "description": "Replaces the feature with ID {featureId} in the collection {collectionId}",
        "operationId": "getFeaturePUT",
        "responses": {
          "200": {
            "description": "The feature was successfully updated"
          },
          "403": {
            "description": "Forbidden: the operation requested was not authorized"
          },
          "500": {
            "description": "Posted data could not be parsed correctly or another error occurred"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/exception"
                }
              },
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "An error occurred."
          }
        },
        "summary": "Replaces the feature with ID {featureId} in the collection {collectionId}",
        "tags": [
          "edit",
          "replace"
        ]
      }
    },
    "/wfs3/conformance": {
      "get": {
        "description": "List all requirements classes specified in a standard (e.g., WFS 3.0 Part 1: Core) that the server conforms to.",
        "operationId": "getRequirementClasses",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/root"
                }
              },
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "List all requirements classes specified in a standard (e.g., WFS 3.0 Part 1: Core) that the server conforms to."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/exception"
                }
              },
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "An error occurred."
          }
        },
        "summary": "Information about standards that this API conforms to.",
        "tags": [
          "Capabilities"
        ]
      }
    }
  },
  "servers": [
    {
      "url": "http://server.qgis.org/wfs3/"
    }
  ],
  "tags": [
    {
      "description": "Essential characteristics of this API including information about the data.",
      "name": "Capabilities"
    },
    {
      "description": "Access to data (features).",
      "name": "Features"
    }
  ]
}
