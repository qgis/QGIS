/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/3d/qgs3dmapsettings.h                                            *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.pl again   *
 ************************************************************************/







class Qgs3DMapSettings : QObject, QgsTemporalRangeObject
{
%Docstring(signature="appended")
Definition of the world.
%End

%TypeHeaderCode
#include "qgs3dmapsettings.h"
%End
  public:
    Qgs3DMapSettings();
%Docstring
Constructor for Qgs3DMapSettings
%End
    Qgs3DMapSettings( const Qgs3DMapSettings &other );
%Docstring
Copy constructor
%End
    ~Qgs3DMapSettings();


    void readXml( const QDomElement &elem, const QgsReadWriteContext &context );
%Docstring
Reads configuration from a DOM element previously written by :py:func:`~Qgs3DMapSettings.writeXml`
%End
    QDomElement writeXml( QDomDocument &doc, const QgsReadWriteContext &context ) const;
%Docstring
Writes configuration to a DOM element, to be used later with :py:func:`~Qgs3DMapSettings.readXml`
%End
    void resolveReferences( const QgsProject &project );
%Docstring
Resolves references to other objects (map layers) after the call to :py:func:`~Qgs3DMapSettings.readXml`
%End

    QgsRectangle extent() const;
%Docstring
Returns the 3D scene's 2D extent in the 3D scene's CRS

.. seealso:: :py:func:`crs`

.. versionadded:: 3.30
%End

    void setExtent( const QgsRectangle &extent );
%Docstring
Sets the 3D scene's 2D ``extent`` in the 3D scene's CRS, while also setting the scene's origin to the extent's center
This needs to be called during initialization, as terrain will only be generated
within this extent and layer 3D data will only be loaded within this extent too.

.. seealso:: :py:func:`setOrigin`

.. seealso:: :py:func:`setCrs`

.. versionadded:: 3.30
%End

    void setOrigin( const QgsVector3D &origin );
%Docstring
Sets coordinates in map CRS at which our 3D world has origin (0,0,0)

We move the 3D world origin to the center of the extent of our terrain: this is done
to minimize the impact of numerical errors when operating with 32-bit floats.
Unfortunately this is not enough when working with a large area (still results in jitter
with scenes spanning hundreds of kilometers and zooming in a lot).

Need to look into more advanced techniques like "relative to center" or "relative to eye"
to improve the precision.
%End
    QgsVector3D origin() const;
%Docstring
Returns coordinates in map CRS at which 3D scene has origin (0,0,0)
%End

    QgsVector3D mapToWorldCoordinates( const QgsVector3D &mapCoords ) const;
%Docstring
Converts map coordinates to 3D world coordinates (applies offset and turns (x,y,z) into (x,-z,y))
%End
    QgsVector3D worldToMapCoordinates( const QgsVector3D &worldCoords ) const;
%Docstring
Converts 3D world coordinates to map coordinates (applies offset and turns (x,y,z) into (x,-z,y))
%End

    void setCrs( const QgsCoordinateReferenceSystem &crs );
%Docstring
Sets coordinate reference system used in the 3D scene
%End
    QgsCoordinateReferenceSystem crs() const;
%Docstring
Returns coordinate reference system used in the 3D scene
%End

    QgsCoordinateTransformContext transformContext() const;
%Docstring
Returns the coordinate transform context, which stores various
information regarding which datum transforms should be used when transforming points
from a source to destination coordinate reference system.

.. seealso:: :py:func:`setTransformContext`
%End

    void setTransformContext( const QgsCoordinateTransformContext &context );
%Docstring
Sets the coordinate transform ``context``, which stores various
information regarding which datum transforms should be used when transforming points
from a source to destination coordinate reference system.

.. seealso:: :py:func:`transformContext`
%End

    const QgsPathResolver &pathResolver() const;
%Docstring
Returns the path resolver for conversion between relative and absolute paths
during rendering operations, e.g. for resolving relative symbol paths.

.. seealso:: :py:func:`setPathResolver`
%End

    void setPathResolver( const QgsPathResolver &resolver );
%Docstring
Sets the path ``resolver`` for conversion between relative and absolute paths
during rendering operations, e.g. for resolving relative symbol paths.

.. seealso:: :py:func:`pathResolver`
%End

    QgsMapThemeCollection *mapThemeCollection() const;
%Docstring
Returns pointer to the collection of map themes. Normally this would be :py:func:`QgsProject.mapThemeCollection()`
of the currently used project. Without a valid map theme collection object it is not possible
to resolve map themes from their names.

.. versionadded:: 3.6
%End

    void setMapThemeCollection( QgsMapThemeCollection *mapThemes );
%Docstring
Sets pointer to the collection of map themes.

.. seealso:: :py:func:`mapThemeCollection`

.. versionadded:: 3.6
%End

    void setBackgroundColor( const QColor &color );
%Docstring
Sets background color of the 3D map view
%End
    QColor backgroundColor() const;
%Docstring
Returns background color of the 3D map view
%End

    void setSelectionColor( const QColor &color );
%Docstring
Sets color used for selected features
%End
    QColor selectionColor() const;
%Docstring
Returns color used for selected features
%End

    void setLayers( const QList<QgsMapLayer *> &layers );
%Docstring
Sets the list of 3D map ``layers`` to be rendered in the scene.

This setting dictates which layers are to be rendered using their 3D rendering configuration, if available.

.. seealso:: :py:func:`layers`

.. seealso:: :py:func:`layersChanged`
%End

    QList<QgsMapLayer *> layers() const;
%Docstring
Returns the list of 3D map layers to be rendered in the scene.

This setting dictates which layers are to be rendered using their 3D rendering configuration, if available.

.. seealso:: :py:func:`setLayers`

.. seealso:: :py:func:`layersChanged`
%End



    void setTerrainVerticalScale( double zScale );
%Docstring
Sets vertical scale (exaggeration) of terrain
(1 = true scale, > 1 = hills get more pronounced)
%End
    double terrainVerticalScale() const;
%Docstring
Returns vertical scale (exaggeration) of terrain
%End

    void setMapTileResolution( int res );
%Docstring
Sets resolution (in pixels) of the texture of a terrain tile

.. seealso:: :py:func:`mapTileResolution`
%End

    int mapTileResolution() const;
%Docstring
Returns resolution (in pixels) of the texture of a terrain tile. This parameter influences
how many zoom levels for terrain tiles there will be (together with :py:func:`~Qgs3DMapSettings.maxTerrainGroundError`)
%End

    void setMaxTerrainScreenError( float error );
%Docstring
Sets maximum allowed screen error of terrain tiles in pixels.

.. seealso:: :py:func:`maxTerrainScreenError`
%End

    float maxTerrainScreenError() const;
%Docstring
Returns maximum allowed screen error of terrain tiles in pixels. This parameter decides
how aggressively less detailed terrain tiles are swapped to more detailed ones as camera gets closer.
Each tile has its error defined in world units - this error gets projected to screen pixels
according to camera view and if the tile's error is greater than the allowed error, it will
be swapped by more detailed tiles with lower error.
%End

    void setMaxTerrainGroundError( float error );
%Docstring
Returns maximum ground error of terrain tiles in world units.

.. seealso:: :py:func:`maxTerrainGroundError`
%End

    float maxTerrainGroundError() const;
%Docstring
Returns maximum ground error of terrain tiles in world units. This parameter influences
how many zoom levels there will be (together with :py:func:`~Qgs3DMapSettings.mapTileResolution`).
This value tells that when the given ground error is reached (e.g. 10 meters), it makes no sense
to further split terrain tiles into finer ones because they will not add extra details anymore.
%End

    void setTerrainElevationOffset( float offset );
%Docstring
Sets the terrain elevation offset (used to move the terrain up or down)

.. seealso:: :py:func:`terrainElevationOffset`

.. versionadded:: 3.18
%End

    float terrainElevationOffset() const;
%Docstring
Returns the elevation offset of the terrain (used to move the terrain up or down)
%End



    void setTerrainShadingEnabled( bool enabled );
%Docstring
Sets whether terrain shading is enabled.

.. seealso:: :py:func:`isTerrainShadingEnabled`

.. versionadded:: 3.6
%End

    bool isTerrainShadingEnabled() const;
%Docstring
Returns whether terrain shading is enabled. When enabled, in addition to the terrain texture
generated from the map, the terrain rendering will take into account position of the lights,
terrain normals and terrain shading material (ambient and specular colors, shininess).

.. versionadded:: 3.6
%End

    void setTerrainShadingMaterial( const QgsPhongMaterialSettings &material );
%Docstring
Sets terrain shading material.

.. seealso:: :py:func:`terrainShadingMaterial`

.. versionadded:: 3.6
%End

    QgsPhongMaterialSettings terrainShadingMaterial() const;
%Docstring
Returns terrain shading material. Diffuse color component is ignored since the diffuse component
is provided by 2D rendered map texture. Only used when :py:func:`~Qgs3DMapSettings.isTerrainShadingEnabled` is ``True``.

.. versionadded:: 3.6
%End

    void setTerrainMapTheme( const QString &theme );
%Docstring
Sets name of the map theme.

.. seealso:: :py:func:`terrainMapTheme`

.. versionadded:: 3.6
%End

    QString terrainMapTheme() const;
%Docstring
Returns name of the map theme (from the active project) that will be used for terrain's texture.
Empty map theme name means that the map theme is not overridden and the current map theme will be used.

.. note::

   Support for map themes only works if :py:func:`~Qgs3DMapSettings.mapThemeCollection` is a valid object (otherwise it is not possible to resolve map themes from names)

.. versionadded:: 3.6
%End


    void setShowTerrainBoundingBoxes( bool enabled );
%Docstring
Sets whether to display bounding boxes of terrain tiles (for debugging)
%End
    bool showTerrainBoundingBoxes() const;
%Docstring
Returns whether to display bounding boxes of terrain tiles (for debugging)
%End
    void setShowTerrainTilesInfo( bool enabled );
%Docstring
Sets whether to display extra tile info on top of terrain tiles (for debugging)
%End
    bool showTerrainTilesInfo() const;
%Docstring
Returns whether to display extra tile info on top of terrain tiles (for debugging)
%End

    void setShowCameraViewCenter( bool enabled );
%Docstring
Sets whether to show camera's view center as a sphere (for debugging)

.. versionadded:: 3.4
%End

    bool showCameraViewCenter() const;
%Docstring
Returns whether to show camera's view center as a sphere (for debugging)

.. versionadded:: 3.4
%End

    void setShowCameraRotationCenter( bool enabled );
%Docstring
Sets whether to show camera's rotation center as a sphere (for debugging)

.. versionadded:: 3.24
%End

    bool showCameraRotationCenter() const;
%Docstring
Returns whether to show camera's rotation center as a sphere (for debugging)

.. versionadded:: 3.24
%End

    void setShowLightSourceOrigins( bool enabled );
%Docstring
Sets whether to show light source origins as a sphere (for debugging)

.. versionadded:: 3.16
%End

    bool showLightSourceOrigins() const;
%Docstring
Returns whether to show light source origins as a sphere (for debugging)

.. versionadded:: 3.16
%End

    void setShowLabels( bool enabled );
%Docstring
Sets whether to display labels on terrain tiles
%End
    bool showLabels() const;
%Docstring
Returns whether to display labels on terrain tiles
%End

    void setEyeDomeLightingEnabled( bool enabled );
%Docstring
Sets whether eye dome lighting will be used

.. seealso:: :py:func:`eyeDomeLightingEnabled`

.. versionadded:: 3.18
%End
    bool eyeDomeLightingEnabled() const;
%Docstring
Returns whether eye dome lighting is used
%End

    void setEyeDomeLightingStrength( double strength );
%Docstring
Sets the eye dome lighting strength value

.. seealso:: :py:func:`eyeDomeLightingStrength`

.. versionadded:: 3.18
%End
    double eyeDomeLightingStrength() const;
%Docstring
Returns the eye dome lighting strength value
%End

    void setEyeDomeLightingDistance( int distance );
%Docstring
Sets the eye dome lighting distance value (contributes to the contrast of the image

.. seealso:: :py:func:`eyeDomeLightingDistance`

.. versionadded:: 3.18
%End
    int eyeDomeLightingDistance() const;
%Docstring
Returns the eye dome lighting distance value (contributes to the contrast of the image)
%End

    void setDebugShadowMapSettings( bool enabled, Qt::Corner corner, double size );
%Docstring
Sets the debugging settings of the shadow map

.. seealso:: :py:func:`debugShadowMapEnabled`

.. versionadded:: 3.18
%End
    bool debugShadowMapEnabled() const;
%Docstring
Returns whether the shadow map debugging is enabled
%End
    Qt::Corner debugShadowMapCorner() const;
%Docstring
Returns the corner where the shadow map preview is displayed
%End
    double debugShadowMapSize() const;
%Docstring
Returns the size of the shadow map preview
%End

    void setDebugDepthMapSettings( bool enabled, Qt::Corner corner, double size );
%Docstring
Sets the debugging settings of the depth map

.. seealso:: :py:func:`debugDepthMapEnabled`

.. versionadded:: 3.18
%End
    bool debugDepthMapEnabled() const;
%Docstring
Returns whether the shadow map debugging is enabled
%End
    Qt::Corner debugDepthMapCorner() const;
%Docstring
Returns the corner where the shadow map preview is displayed
%End
    double debugDepthMapSize() const;
%Docstring
Returns the size of the shadow map preview
%End

    QList<QgsLightSource *> lightSources() const;
%Docstring
Returns list of directional light sources defined in the scene.

.. seealso:: :py:func:`setLightSources`

.. versionadded:: 3.26
%End

    void setLightSources( const QList<QgsLightSource *> &lights /Transfer/ );
%Docstring
Sets the list of ``light`` sources defined in the scene.

Ownership of the lights is transferred to the settings.

.. seealso:: :py:func:`lightSources`

.. versionadded:: 3.26
%End

    float fieldOfView() const;
%Docstring
Returns the camera lens' field of view

.. versionadded:: 3.8
%End

    void setFieldOfView( const float fieldOfView );
%Docstring
Sets the camera lens' field of view

.. versionadded:: 3.8
%End




    double cameraMovementSpeed() const;
%Docstring
Returns the camera movement speed

.. versionadded:: 3.18
%End

    void setCameraMovementSpeed( double movementSpeed );
%Docstring
Sets the camera movement speed

.. versionadded:: 3.18
%End

    void setOutputDpi( const double dpi );
%Docstring
Sets DPI used for conversion between real world units (e.g. mm) and pixels

:param dpi: the number of dot per inch

.. versionadded:: 3.10
%End


    double outputDpi() const;
%Docstring
Returns DPI used for conversion between real world units (e.g. mm) and pixels
Default value is 96

.. versionadded:: 3.10
%End







    bool isSkyboxEnabled() const;
%Docstring
Returns whether the skybox is enabled.

.. seealso:: :py:func:`setIsSkyboxEnabled`

.. versionadded:: 3.16
%End

    void setIsSkyboxEnabled( bool enabled );
%Docstring
Sets whether the skybox is enabled.

.. seealso:: :py:func:`isSkyboxEnabled`

.. versionadded:: 3.16
%End

    bool isFpsCounterEnabled() const;
%Docstring
Returns whether FPS counter label is enabled

.. seealso:: :py:func:`setIsFpsCounterEnabled`

.. versionadded:: 3.18
%End

    void setIsFpsCounterEnabled( bool fpsCounterEnabled );
%Docstring
Sets whether FPS counter label is enabled

.. seealso:: :py:func:`isFpsCounterEnabled`

.. versionadded:: 3.18
%End

    bool terrainRenderingEnabled() const;
%Docstring
Returns whether the 2D terrain surface will be rendered.

.. seealso:: :py:func:`setTerrainRenderingEnabled`

.. versionadded:: 3.22
%End

    void setTerrainRenderingEnabled( bool terrainRenderingEnabled );
%Docstring
Sets whether the 2D terrain surface will be rendered in.

.. seealso:: :py:func:`terrainRenderingEnabled`

.. versionadded:: 3.22
%End

    Qgis::RendererUsage rendererUsage() const;
%Docstring
Returns the renderer usage

.. seealso:: :py:func:`rendererUsage`

.. versionadded:: 3.24
%End

    void setRendererUsage( Qgis::RendererUsage rendererUsage );
%Docstring
Sets the renderer usage

.. seealso:: :py:func:`rendererUsage`

.. versionadded:: 3.24
%End

    Qgis::ViewSyncModeFlags viewSyncMode() const;
%Docstring
Returns the view sync mode (used to synchronize the 2D main map canvas and the 3D camera navigation)

.. versionadded:: 3.26
%End

    void setViewSyncMode( Qgis::ViewSyncModeFlags mode );
%Docstring
Sets the view sync mode (used to synchronize the 2D main map canvas and the 3D camera navigation)

.. versionadded:: 3.26
%End

    bool viewFrustumVisualizationEnabled() const;
%Docstring
Returns whether the camera's view frustum is visualized on the 2D map canvas

.. versionadded:: 3.26
%End

    void setViewFrustumVisualizationEnabled( bool enabled );
%Docstring
Sets whether the camera's view frustum is visualized on the 2D map canvas

.. versionadded:: 3.26
%End



    bool isDebugOverlayEnabled() const;
%Docstring
Returns whether debug overlay is enabled

.. seealso:: :py:func:`setIsDebugOverlayEnabled`

.. versionadded:: 3.26
%End

    void setIsDebugOverlayEnabled( bool debugOverlayEnabled );
%Docstring
Sets whether debug overlay is enabled
The debug overlay displays some debugging and profiling information.
It has been introduced in Qt version 5.15.
This parameter is transient. It is not saved in the project parameters.

.. seealso:: :py:func:`isDebugOverlayEnabled`

.. versionadded:: 3.26
%End

    bool showExtentIn2DView() const;
%Docstring
Returns whether the extent is displayed on the main 2D map canvas

.. seealso:: :py:func:`setShowExtentIn2DView`

.. versionadded:: 3.32
%End

    void setShowExtentIn2DView( bool show );
%Docstring
Sets whether the extent is displayed on the main 2D map canvas

.. versionadded:: 3.32
%End

  signals:

    void settingsChanged();
%Docstring
Emitted when one of the configuration settings has changed

.. versionadded:: 3.24
%End

    void backgroundColorChanged();
%Docstring
Emitted when the background color has changed
%End
    void selectionColorChanged();
%Docstring
Emitted when the selection color has changed
%End

    void layersChanged();
%Docstring
Emitted when the list of map layers for 3d rendering has changed.

.. seealso:: :py:func:`setLayers`

.. seealso:: :py:func:`layers`
%End

    void terrainGeneratorChanged();
%Docstring
Emitted when the terrain generator has changed
%End
    void terrainVerticalScaleChanged();
%Docstring
Emitted when the vertical scale of the terrain has changed
%End
    void mapTileResolutionChanged();
%Docstring
Emitted when the map tile resoulution has changed
%End
    void maxTerrainScreenErrorChanged();
%Docstring
Emitted when the maximum terrain screen error has changed
%End
    void maxTerrainGroundErrorChanged();
%Docstring
Emitted when the maximum terrain ground error has changed
%End

    void terrainElevationOffsetChanged( float newElevation );
%Docstring
Emitted when the terrain elevation offset is changed

.. versionadded:: 3.16
%End

    void terrainShadingChanged();
%Docstring
Emitted when terrain shading enabled flag or terrain shading material has changed

.. versionadded:: 3.6
%End

    void terrainMapThemeChanged();
%Docstring
Emitted when terrain's map theme has changed

.. versionadded:: 3.6
%End

    void renderersChanged();
%Docstring
Emitted when the list of map's extra renderers have been modified

.. versionadded:: 3.10
%End

    void showTerrainBoundingBoxesChanged();
%Docstring
Emitted when the flag whether terrain's bounding boxes are shown has changed
%End
    void showTerrainTilesInfoChanged();
%Docstring
Emitted when the flag whether terrain's tile info is shown has changed
%End

    void showCameraViewCenterChanged();
%Docstring
Emitted when the flag whether camera's view center is shown has changed

.. versionadded:: 3.4
%End

    void showCameraRotationCenterChanged();
%Docstring
Emitted when the flag whether camera's rotation center is shown has changed

.. versionadded:: 3.24
%End

    void showLightSourceOriginsChanged();
%Docstring
Emitted when the flag whether light source origins are shown has changed.

.. versionadded:: 3.15
%End

    void showLabelsChanged();
%Docstring
Emitted when the flag whether labels are displayed on terrain tiles has changed
%End

    void eyeDomeLightingEnabledChanged();
%Docstring
Emitted when the flag whether eye dome lighting is used has changed

.. versionadded:: 3.18
%End

    void eyeDomeLightingStrengthChanged();
%Docstring
Emitted when the eye dome lighting strength has changed

.. versionadded:: 3.18
%End

    void eyeDomeLightingDistanceChanged();
%Docstring
Emitted when the eye dome lighting distance has changed

.. versionadded:: 3.18
%End

    void debugShadowMapSettingsChanged();
%Docstring
Emitted when shadow map debugging has changed

.. versionadded:: 3.18
%End

    void debugDepthMapSettingsChanged();
%Docstring
Emitted when depth map debugging has changed

.. versionadded:: 3.18
%End

    void pointLightsChanged();
%Docstring
Emitted when the list of point lights changes

.. versionadded:: 3.6
%End

    void lightSourcesChanged();
%Docstring
Emitted when any of the light source settings in the map changes.

.. versionadded:: 3.26
%End

    void directionalLightsChanged();
%Docstring
Emitted when the list of directional lights changes

.. versionadded:: 3.16
%End

    void fieldOfViewChanged();
%Docstring
Emitted when the camera lens field of view changes

.. versionadded:: 3.8
%End

    void projectionTypeChanged();
%Docstring
Emitted when the camera lens projection type changes

.. versionadded:: 3.18
%End

    void cameraNavigationModeChanged();
%Docstring
Emitted when the camera navigation mode was changed

.. versionadded:: 3.18
%End

    void cameraMovementSpeedChanged();
%Docstring
Emitted when the camera movement speed was changed

.. versionadded:: 3.18
%End

    void skyboxSettingsChanged();
%Docstring
Emitted when skybox settings are changed

.. versionadded:: 3.16
%End

    void shadowSettingsChanged();
%Docstring
Emitted when shadow rendering settings are changed

.. versionadded:: 3.16
%End


    void ambientOcclusionSettingsChanged();
%Docstring
Emitted when ambient occlusion rendering settings are changed

.. versionadded:: 3.28
%End

    void fpsCounterEnabledChanged( bool fpsCounterEnabled );
%Docstring
Emitted when the FPS counter is enabled or disabled

.. versionadded:: 3.18
%End

    void viewFrustumVisualizationEnabledChanged();
%Docstring
Emitted when the camera's view frustum visualization on the main 2D map canvas is enabled or disabled

.. versionadded:: 3.26
%End

    void axisSettingsChanged();
%Docstring
Emitted when 3d axis rendering settings are changed

.. versionadded:: 3.26
%End

    void debugOverlayEnabledChanged( bool debugOverlayEnabled );
%Docstring
Emitted when the debug overaly is enabled or disabled

.. versionadded:: 3.26
%End

    void extentChanged();
%Docstring
Emitted when the 3d view's 2d extent has changed

.. seealso:: :py:func:`setExtent`

.. versionadded:: 3.30
%End

    void showExtentIn2DViewChanged();
%Docstring
Emitted when the parameter to display 3d view's extent in the 2D canvas has changed

.. seealso:: :py:func:`setShowExtentIn2DView`

.. versionadded:: 3.32
%End

  private:
    Qgs3DMapSettings &operator=( const Qgs3DMapSettings & );
};


/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/3d/qgs3dmapsettings.h                                            *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.pl again   *
 ************************************************************************/
