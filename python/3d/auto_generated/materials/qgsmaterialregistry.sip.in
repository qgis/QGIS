/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/3d/materials/qgsmaterialregistry.h                               *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.py again   *
 ************************************************************************/




class QgsMaterialSettingsWidget /External/;

class QgsMaterialSettingsAbstractMetadata
{
%Docstring(signature="appended")
Stores metadata about one 3D material settings class.

.. note::

   It's necessary to implement :py:func:`~createMaterialSettings` function.
   In C++ you can use :py:class:`QgsMaterialSettingsMetadata` convenience class.

.. versionadded:: 3.16
%End

%TypeHeaderCode
#include "qgsmaterialregistry.h"
%End
  public:

    QgsMaterialSettingsAbstractMetadata( const QString &type, const QString &visibleName, const QIcon &icon = QIcon() );
%Docstring
Constructor for QgsMaterialSettingsAbstractMetadata, with the specified ``type`` and ``visibleName``.

An optional ``icon`` can be specified to represent the material type.
%End

    virtual ~QgsMaterialSettingsAbstractMetadata();

    QString type() const;
%Docstring
Returns the unique material type string.
%End

    QString visibleName() const;
%Docstring
Returns the material's visible (translated) name.
%End

    QIcon icon() const;
%Docstring
Returns an icon representing the material type, if available.
%End

    virtual QgsAbstractMaterialSettings *create() = 0 /Factory/;
%Docstring
Creates a new instance of this material settings type.

Caller takes ownership of the returned object.
%End

    virtual bool supportsTechnique( QgsMaterialSettingsRenderingTechnique technique ) const = 0;
%Docstring
Returns ``True`` if the material type supports the specified rendering ``technique``.
%End


};






class QgsMaterialRegistry
{
%Docstring(signature="appended")
Registry of available 3d material settings classes.

:py:class:`QgsMaterialRegistry` is not usually directly created, but rather accessed through
Qgs3D.materialRegistry().

.. versionadded:: 3.16
%End

%TypeHeaderCode
#include "qgsmaterialregistry.h"
%End
  public:

    QgsMaterialRegistry();
    ~QgsMaterialRegistry();


    QgsMaterialSettingsAbstractMetadata *materialSettingsMetadata( const QString &type ) const;
%Docstring
Returns metadata for specified material settings ``type``. Returns ``None`` if not found
%End

    QStringList materialSettingsTypes() const;
%Docstring
Returns a list of all available material settings types.
%End

    bool addMaterialSettingsType( QgsMaterialSettingsAbstractMetadata *metadata /Transfer/ );
%Docstring
Registers a new material settings type. Takes ownership of the ``metadata`` instance.
%End

    QgsAbstractMaterialSettings *createMaterialSettings( const QString &type ) const /Factory/;
%Docstring
Creates a new instance of the material settings of the specified ``type``.

The caller takes ownership of the returned object.

Returns ``None`` if the specified type is not found in the registry.
%End

  private:
    QgsMaterialRegistry( const QgsMaterialRegistry &rh );
};


/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/3d/materials/qgsmaterialregistry.h                               *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.py again   *
 ************************************************************************/
