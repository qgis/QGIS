/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/3d/qgs3dmapcanvas.h                                              *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.py again   *
 ************************************************************************/








class Qgs3DMapCanvas : QWindow
{
%Docstring(signature="appended")
Convenience wrapper to simplify the creation of a 3D window ready to be
used with QGIS.

.. note::

   This is a port of qtwindow3d which does not set the default surface when initialized.

.. note::

   The default surface must be set before the construction of the QApplication when using shared OpenGL context.

.. note::

   This is required in order to use QT3d and QtWebEngine at the same time.

.. versionadded:: 3.36
%End

%TypeHeaderCode
#include "qgs3dmapcanvas.h"
%End
  public:
    Qgs3DMapCanvas();
    ~Qgs3DMapCanvas();

    Qgs3DMapSettings *mapSettings();
%Docstring
Returns access to the 3D scene configuration
%End

    Qgs3DMapScene *scene();
%Docstring
Returns access to the 3D scene (root 3D entity)
%End

    QgsCameraController *cameraController();
%Docstring
Returns access to the view's camera controller. Returns ``None`` if the
scene has not been initialized yet with
:py:func:`~Qgs3DMapCanvas.setMapSettings`
%End

    void setMapTool( Qgs3DMapTool *tool );
%Docstring
Sets the active map ``tool`` that will receive events from the 3D
canvas. Does not transfer ownership. If the tool is ``None``, events
will be used for camera manipulation.

.. versionadded:: 4.0
%End

    Qgs3DMapTool *mapTool() const;
%Docstring
Returns the active map tool that will receive events from the 3D canvas.
If the tool is ``None``, events will be used for camera manipulation.

.. versionadded:: 4.0
%End

    QgsRayCastResult castRay( const QPoint &screenPoint, QgsRayCastContext context );
%Docstring
Casts a ray towards the 3d scene and returns information about the
intersected 3d entities.

:param screenPoint: The ray starts from the current camera center and
                    goes through this point (in pixel coordinates,
                    originating at top left corner).
:param context: A context object defining parameters for the ray
                casting.

.. versionadded:: 4.0
%End

    void enableCrossSection( const QgsPointXY &startPoint, const QgsPointXY &endPoint, double tolerance, bool setSideView = true );
%Docstring
Enables cross section mode for the 3D map canvas. The 3D scene will be
clipped by four clipping planes, defined by a cross section line segment
from ``startPoint`` to ``endPoint`` and two parallel segments at
distance ``tolerance`` to each side.

:param startPoint: The start point of the cross section line in 3D map
                   coordinates.
:param endPoint: The end point of the cross section line in 3D map
                 coordinates.
:param tolerance: The distance in meters between the cross section line
                  and the left and right clipping planes.
:param setSideView: When ``True``, the camera will be moved to look at
                    the scene from the right side of the cross section
                    line.

.. seealso:: :py:func:`disableCrossSection`

.. versionadded:: 4.0
%End

    void disableCrossSection();
%Docstring
disableCrossSection Disables the cross section mode and removes the
scene's clipping planes

.. seealso:: :py:func:`enableCrossSection`

.. versionadded:: 4.0
%End

    bool crossSectionEnabled() const;
%Docstring
Returns ``True`` if the cross section mode is enabled or the 3d scene
has other clipping planes applied

.. seealso:: :py:func:`enableCrossSection`

.. versionadded:: 4.0
%End

    void crossSectionEnabledChanged( bool enabled );
%Docstring
Emitted when the cross section mode is enabled or disabled

.. seealso:: :py:func:`enableCrossSection`

.. versionadded:: 4.0
%End

  protected:
    virtual void showEvent( QShowEvent *e );

%Docstring
Manages the display events specified in e.
%End

    virtual void resizeEvent( QResizeEvent * );

%Docstring
Resets the aspect ratio of the 3D window.
%End

    virtual bool eventFilter( QObject *watched, QEvent *event );


};

/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/3d/qgs3dmapcanvas.h                                              *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.py again   *
 ************************************************************************/
