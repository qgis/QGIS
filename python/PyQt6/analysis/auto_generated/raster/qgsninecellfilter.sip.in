/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/analysis/raster/qgsninecellfilter.h                              *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.py again   *
 ************************************************************************/





class QgsNineCellFilter
{
%Docstring(signature="appended")
Base class for raster analysis methods that work with a 3x3 cell filter
and calculate the value of each cell based on the cell value and the
eight neighbour cells.

Common examples are slope and aspect calculation in DEMs. Subclasses
only implement the method that calculates the new value from the nine
values. Everything else (reading file, writing file) is done by this
subclass
%End

%TypeHeaderCode
#include "qgsninecellfilter.h"
%End
  public:
    enum class Result /BaseType=IntEnum/
    {
      Success,
      InputLayerError,
      DriverError,
      CreateOutputError,
      InputBandError,
      OutputBandError,
      RasterSizeError,
      Canceled,
    };

    QgsNineCellFilter( const QString &inputFile, const QString &outputFile, const QString &outputFormat );
%Docstring
Constructor that takes input file, output file and output format (GDAL
string)
%End
    virtual ~QgsNineCellFilter();

    Result processRaster( QgsFeedback *feedback = 0 );
%Docstring
Starts the calculation, reads from mInputFile and stores the result in
mOutputFile

:param feedback: feedback object that receives update and that is
                 checked for cancellation.

:return: QgsNineCellFilter.Result.Success in case of success or error
         value on failure.
%End

    double cellSizeX() const;
    void setCellSizeX( double size );
    double cellSizeY() const;
    void setCellSizeY( double size );

    double zFactor() const;
    void setZFactor( double factor );

    double inputNodataValue() const;
    void setInputNodataValue( double value );
    double outputNodataValue() const;
    void setOutputNodataValue( double value );

    void setCreationOptions( const QStringList &options );
%Docstring
Sets a list of data source creation options to use when creating the
output raster file.

.. seealso:: :py:func:`creationOptions`

.. versionadded:: 3.44
%End

    QStringList creationOptions() const;
%Docstring
Returns the list of data source creation options which will be used when
creating the output raster file.

.. seealso:: :py:func:`setCreationOptions`

.. versionadded:: 3.44
%End

    virtual float processNineCellWindow( float *x11, float *x21, float *x31, float *x12, float *x22, float *x32, float *x13, float *x23, float *x33 ) = 0;
%Docstring
Calculates output value from nine input values. The input values and the
output value can be equal to the nodata value if not present or outside
of the border. Must be implemented by subclasses.

First index of the input cell is the row, second index is the column

:param x11: surrounding cell top left
:param x21: surrounding cell central left
:param x31: surrounding cell bottom left
:param x12: surrounding cell top central
:param x22: the central cell for which the value will be calculated
:param x32: surrounding cell bottom central
:param x13: surrounding cell top right
:param x23: surrounding cell central right
:param x33: surrounding cell bottom right

:return: the calculated cell value for the central cell x22
%End

  protected:

};

/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/analysis/raster/qgsninecellfilter.h                              *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.py again   *
 ************************************************************************/
