/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/analysis/vector/geometry_checker/qgsgeometrycheckerror.h         *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.py again   *
 ************************************************************************/






class QgsGeometryCheckError
{
%Docstring(signature="appended")
This represents an error reported by a geometry check.

.. note::

   This class is a technology preview and unstable API.

.. versionadded:: 3.4
%End

%TypeHeaderCode
#include "qgsgeometrycheckerror.h"
%End
  public:

    enum Status /BaseType=IntEnum/
    {
      StatusPending,
      StatusFixFailed,
      StatusFixed,
      StatusObsolete
    };

    enum ValueType /BaseType=IntEnum/
    {
      ValueLength,
      ValueArea,
      ValueOther
    };

    QgsGeometryCheckError( const QgsGeometryCheck *check,
                           const QgsGeometryCheckerUtils::LayerFeature &layerFeature,
                           const QgsPointXY &errorLocation,
                           QgsVertexId vidx = QgsVertexId(),
                           const QVariant &value = QVariant(),
                           ValueType valueType = ValueOther );
%Docstring
Create a new geometry check error with the parent ``check`` and for the
``layerFeature`` pair at the ``errorLocation``. Optionally the vertex can be
specified via ``vixd`` and a ``value`` with its ``value`` Type for
additional information.
%End

    virtual ~QgsGeometryCheckError();


    const QgsGeometryCheck *check() const;
%Docstring
The geometry check that created this error.
%End

    const QString &layerId() const;
%Docstring
The id of the layer on which this error has been detected.
%End

    QgsFeatureId featureId() const;
%Docstring
The id of the feature on which this error has been detected.
%End

    QgsGeometry geometry() const;
%Docstring
The geometry of the error in map units.
%End

    virtual QgsRectangle contextBoundingBox() const;
%Docstring
The context of the error.
For topology checks like gap checks this returns the context of an error
and the involved features.
May be a NULL rectangle.

.. versionadded:: 3.10
%End

    virtual QgsRectangle affectedAreaBBox() const;
%Docstring
The bounding box of the affected area of the error.
%End

    virtual QString description() const;
%Docstring
The error description. By default the description of the parent check
will be returned.
%End

    const QgsPointXY &location() const;
%Docstring
The location of the error in map units.
%End

    QVariant value() const;
%Docstring
An additional value for the error.
Lengths and areas are provided in map units.

.. seealso:: :py:func:`valueType`
%End

    ValueType valueType() const;
%Docstring
The type of the value.

.. seealso:: :py:func:`value`
%End

    const QgsVertexId &vidx() const;
%Docstring
The id of the affected vertex. May be valid or not, depending on the
check.
%End

    Status status() const;
%Docstring
The status of the error.
%End

    QString resolutionMessage() const;
%Docstring
A message with details, how the error has been resolved.
%End

    void setFixed( int method );
%Docstring
Set the status to fixed and specify the ``method`` that has been used to
fix the error.
%End

    void setFixFailed( const QString &reason );
%Docstring
Set the error status to failed and specify the ``reason`` for failure.
%End

    void setObsolete();
%Docstring
Set the error status to obsolete.
%End

    virtual bool isEqual( QgsGeometryCheckError *other ) const;
%Docstring
Check if this error is equal to ``other``.
Is reimplemented by subclasses with additional information, comparison
of base information is done in parent class.
%End

    virtual bool closeMatch( QgsGeometryCheckError * /*other*/ ) const;
%Docstring
Check if this error is almost equal to ``other``.
If this returns ``True``, it can be used to update existing errors after re-checking.
%End

    virtual void update( const QgsGeometryCheckError *other );
%Docstring
Update this error with the information from ``other``.
Will be used to update existing errors whenever they are re-checked.
%End



    virtual QIcon icon() const;
%Docstring
Returns an icon that should be shown for this kind of error.

.. versionadded:: 3.8
%End
  protected:

    QgsGeometryCheckError( const QgsGeometryCheck *check,
                           const QString &layerId,
                           QgsFeatureId featureId,
                           const QgsGeometry &geometry,
                           const QgsPointXY &errorLocation,
                           QgsVertexId vidx = QgsVertexId(),
                           const QVariant &value = QVariant(),
                           ValueType valueType = ValueOther );
%Docstring
Create a new geometry check error with the parent ``check`` and for the
layer with ``layerId`` and ``featureId``.
The ``geometry`` of the error and the ``errorLocation`` need to be
specified in map coordinates.
Optionally the vertex can be specified via ``vixd`` and a ``value`` with
its ``value`` Type for additional information.
%End


  private:
    const QgsGeometryCheckError &operator=( const QgsGeometryCheckError & );
};


/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/analysis/vector/geometry_checker/qgsgeometrycheckerror.h         *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.py again   *
 ************************************************************************/
