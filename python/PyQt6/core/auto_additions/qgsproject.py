# The following has been generated automatically from src/core/project/qgsproject.h
# monkey patching scoped based enum
QgsProject.NoProperty = QgsProject.DataDefinedServerProperty.NoProperty
QgsProject.NoProperty.is_monkey_patched = True
QgsProject.NoProperty.__doc__ = "No property"
QgsProject.AllProperties = QgsProject.DataDefinedServerProperty.AllProperties
QgsProject.AllProperties.is_monkey_patched = True
QgsProject.AllProperties.__doc__ = "All properties for item"
QgsProject.WMSOnlineResource = QgsProject.DataDefinedServerProperty.WMSOnlineResource
QgsProject.WMSOnlineResource.is_monkey_patched = True
QgsProject.WMSOnlineResource.__doc__ = "Alias"
QgsProject.DataDefinedServerProperty.__doc__ = """Data defined properties.
Overrides of user defined server parameters are stored in a
property collection and they can be retrieved using the
indexes specified in this enum.

.. versionadded:: 3.14

* ``NoProperty``: No property
* ``AllProperties``: All properties for item
* ``WMSOnlineResource``: Alias

"""
# --
try:
    QgsProject.__attribute_docs__ = {'cleared': 'Emitted when the project is cleared (and additionally when an open project is cleared\njust before a new project is read).\n\n.. seealso:: :py:func:`clear`\n\n.. versionadded:: 3.2\n', 'aboutToBeCleared': 'Emitted when the project is about to be cleared.\n\n.. seealso:: :py:func:`clear`\n\n.. versionadded:: 3.34\n', 'readProject': 'Emitted when a project is being read.\n', 'readProjectWithContext': 'Emitted when a project is being read. And passing the /a context\n', 'writeProject': 'Emitted when the project is being written.\n', 'readMapLayer': 'Emitted after the basic initialization of a layer from the project\nfile is done. You can use this signal to read additional information\nfrom the project file.\n\n:param mapLayer: The map layer which is being initialized\n:param layerNode: The layer node from the project file\n', 'writeMapLayer': 'Emitted when a layer is being saved. You can use this method to save\nadditional information to the layer.\n\n:param mapLayer: The map layer which is being initialized\n:param layerElem: The layer element from the project file\n:param doc: The document\n', 'projectSaved': 'Emitted when the project file has been written and closed.\n', 'oldProjectVersionWarning': 'Emitted when an old project file is read.\n\n.. deprecated:: 3.40\n\n   Use :py:func:`~QgsProject.readVersionMismatchOccurred` instead.\n', 'readVersionMismatchOccurred': 'Emitted when a project is read and the version of QGIS used to save\nthe project differs from the current QGIS version.\n\nThe ``fileVersion`` argument indicates the version of QGIS used to save\nthe project.\n\n.. note::\n\n   Not available in Python bindings\n\n.. versionadded:: 3.26\n', 'layerLoaded': 'Emitted when a layer from a projects was read.\n\n:param i: current layer\n:param n: number of layers\n', 'loadingLayer': 'Emitted when a layer is loaded\n', 'loadingLayerMessageReceived': 'Emitted when loading layers has produced some messages\n\n:param layerName: the layer name\n:param messages: a list of pairs of :py:class:`Qgis`.MessageLevel and messages\n\n.. versionadded:: 3.2\n', 'nonIdentifiableLayersChanged': 'Emitted when the list of layer which are excluded from map identification changes\n\n.. deprecated:: 3.4\n', 'fileNameChanged': 'Emitted when the file name of the project changes\n', 'homePathChanged': 'Emitted when the home path of the project changes.\n\n.. seealso:: :py:func:`setPresetHomePath`\n\n.. seealso:: :py:func:`homePath`\n\n.. seealso:: :py:func:`presetHomePath`\n', 'snappingConfigChanged': 'Emitted whenever the configuration for snapping has changed.\n', 'avoidIntersectionsModeChanged': 'Emitted whenever the avoid intersections mode has changed.\n\n.. versionadded:: 3.14\n', 'customVariablesChanged': 'Emitted whenever the expression variables stored in the project have been changed.\n', 'crsChanged': 'Emitted when the :py:func:`~QgsProject.crs` of the project has changed.\n\n.. seealso:: :py:func:`crs`\n\n.. seealso:: :py:func:`setCrs`\n\n.. seealso:: :py:func:`verticalCrsChanged`\n\n.. seealso:: :py:func:`ellipsoidChanged`\n', 'crs3DChanged': 'Emitted when the :py:func:`~QgsProject.crs3D` of the project has changed.\n\n.. seealso:: :py:func:`crs3D`\n\n.. seealso:: :py:func:`crsChanged`\n\n.. seealso:: :py:func:`verticalCrsChanged`\n\n.. seealso:: :py:func:`ellipsoidChanged`\n\n.. versionadded:: 3.38\n', 'verticalCrsChanged': 'Emitted when the :py:func:`~QgsProject.verticalCrs` of the project has changed.\n\nThis signal will be emitted whenever the vertical CRS of the project is changed, either\nas a direct result of a call to :py:func:`~QgsProject.setVerticalCrs` or when :py:func:`~QgsProject.setCrs` is called with a compound\nCRS.\n\n.. seealso:: :py:func:`crsChanged`\n\n.. seealso:: :py:func:`crs3DChanged`\n\n.. seealso:: :py:func:`setCrs`\n\n.. seealso:: :py:func:`setVerticalCrs`\n\n.. seealso:: :py:func:`verticalCrs`\n\n.. versionadded:: 3.38\n', 'ellipsoidChanged': 'Emitted when the project ``ellipsoid`` is changed.\n\n.. seealso:: :py:func:`setEllipsoid`\n\n.. seealso:: :py:func:`ellipsoid`\n', 'distanceUnitsChanged': 'Emitted when the default distance units changes.\n\n.. seealso:: :py:func:`setDistanceUnits`\n\n.. versionadded:: 3.28\n', 'areaUnitsChanged': 'Emitted when the default area units changes.\n\n.. seealso:: :py:func:`setAreaUnits`\n\n.. versionadded:: 3.28\n', 'transformContextChanged': 'Emitted when the project :py:func:`~QgsProject.transformContext` is changed.\n\n.. seealso:: :py:func:`transformContext`\n', 'missingDatumTransforms': 'Emitted when datum transforms stored in the project are not available locally.\n', 'transactionModeChanged': 'Emitted when the transaction mode has changed.\n\n.. versionadded:: 3.38\n', 'transactionGroupsChanged': 'Emitted whenever a new transaction group has been created or a\ntransaction group has been removed.\n', 'topologicalEditingChanged': 'Emitted when the topological editing flag has changed.\n', 'avoidIntersectionsLayersChanged': 'Emitted whenever avoidIntersectionsLayers has changed.\n', 'mapThemeCollectionChanged': 'Emitted when the map theme collection changes.\nThis only happens when the map theme collection is reset.\nAny pointer previously received from :py:func:`~QgsProject.mapThemeCollection`\nmust no longer be used after this signal is emitted.\nYou must still connect to signals from the map theme collection\nif you want to be notified about new map themes being added and\nmap themes being removed.\n', 'labelingEngineSettingsChanged': 'Emitted when global configuration of the labeling engine changes.\n', 'metadataChanged': "Emitted when the project's metadata is changed.\n\n.. seealso:: :py:func:`setMetadata`\n\n.. seealso:: :py:func:`metadata`\n\n.. versionadded:: 3.2\n", 'projectColorsChanged': "Emitted whenever the project's color scheme has been changed.\n\n.. seealso:: :py:func:`setProjectColors`\n\n.. versionadded:: 3.6\n", 'backgroundColorChanged': "Emitted whenever the project's canvas background color has been changed.\n\n.. seealso:: :py:func:`setBackgroundColor`\n\n.. versionadded:: 3.10\n", 'selectionColorChanged': "Emitted whenever the project's selection color has been changed.\n\n.. seealso:: :py:func:`setSelectionColor`\n\n.. versionadded:: 3.10\n", 'layersWillBeRemoved': 'Emitted when one or more layers are about to be removed from the registry.\n\n:param layers: A list of layers which are to be removed.\n\n.. seealso:: :py:func:`layerWillBeRemoved`\n\n.. seealso:: :py:func:`layersRemoved`\n', 'layerWillBeRemoved': 'Emitted when a layer is about to be removed from the registry.\n\n:param layer: The layer to be removed.\n\n.. note::\n\n   Consider using :py:func:`~QgsProject.layersWillBeRemoved` instead\n\n.. seealso:: :py:func:`layersWillBeRemoved`\n\n.. seealso:: :py:func:`layerRemoved`\n', 'layersRemoved': 'Emitted after one or more layers were removed from the registry.\n\n:param layerIds: A list of IDs of the layers which were removed.\n\n.. seealso:: :py:func:`layersWillBeRemoved`\n', 'layerRemoved': 'Emitted after a layer was removed from the registry.\n\n:param layerId: The ID of the layer removed.\n\n.. note::\n\n   Consider using :py:func:`~QgsProject.layersRemoved` instead\n\n.. seealso:: :py:func:`layerWillBeRemoved`\n', 'removeAll': 'Emitted when all layers are removed, before :py:func:`~QgsProject.layersWillBeRemoved` and\n:py:func:`~QgsProject.layerWillBeRemoved` signals are emitted. The :py:func:`~QgsProject.layersWillBeRemoved` and\n:py:func:`~QgsProject.layerWillBeRemoved` signals will still be emitted following this signal.\nYou can use this signal to do easy (and fast) cleanup.\n', 'layersAdded': 'Emitted when one or more layers were added to the registry.\nThis signal is also emitted for layers added to the registry,\nbut not to the legend.\n\n:param layers: List of layers which have been added.\n\n.. seealso:: :py:func:`legendLayersAdded`\n\n.. seealso:: :py:func:`layerWasAdded`\n', 'layerWasAdded': 'Emitted when a layer was added to the registry.\n\n.. note::\n\n   Consider using :py:func:`~QgsProject.layersAdded` instead\n\n.. seealso:: :py:func:`layersAdded`\n', 'legendLayersAdded': 'Emitted, when a layer was added to the registry and the legend.\nLayers can also be private layers, which are signalled by\n:py:func:`~QgsProject.layersAdded` and :py:func:`~QgsProject.layerWasAdded` but will not be\nadvertised by this signal.\n\n:param layers: List of :py:class:`QgsMapLayer` which were added to the legend.\n', 'isDirtyChanged': 'Emitted when the project dirty status changes.\n\n:param dirty: ``True`` if the project is in a dirty state and has pending unsaved changes.\n\n.. versionadded:: 3.2\n', 'dirtySet': 'Emitted when setDirty(true) is called.\n\n.. note::\n\n   As opposed to :py:func:`~QgsProject.isDirtyChanged`, this signal is invoked every time setDirty(true)\n   is called, regardless of whether the project was already dirty.\n\n.. versionadded:: 3.20\n', 'mapScalesChanged': 'Emitted when the list of custom project map scales changes.\n\n.. seealso:: :py:func:`mapScales`\n\n.. seealso:: :py:func:`setMapScales`\n\n.. deprecated:: 3.40\n\n   Use :py:func:`~QgsProject.viewSettings` instead.\n', 'elevationShadingRendererChanged': 'Emitted when the map shading renderer changes\n\n.. versionadded:: 3.30\n'}
    QgsProject.instance = staticmethod(QgsProject.instance)
    QgsProject.setInstance = staticmethod(QgsProject.setInstance)
    QgsProject.__signal_arguments__ = {'readProject': ['document: QDomDocument'], 'readProjectWithContext': ['document: QDomDocument', 'context: QgsReadWriteContext'], 'writeProject': ['document: QDomDocument'], 'readMapLayer': ['mapLayer: QgsMapLayer', 'layerNode: QDomElement'], 'writeMapLayer': ['mapLayer: QgsMapLayer', 'layerElem: QDomElement', 'doc: QDomDocument'], 'readVersionMismatchOccurred': ['fileVersion: str'], 'layerLoaded': ['i: int', 'n: int'], 'loadingLayer': ['layerName: str'], 'loadingLayerMessageReceived': ['layerName: str', 'messages: List[QgsReadWriteContext.ReadWriteMessage]'], 'nonIdentifiableLayersChanged': ['nonIdentifiableLayers: List[str]'], 'snappingConfigChanged': ['config: QgsSnappingConfig'], 'ellipsoidChanged': ['ellipsoid: str'], 'missingDatumTransforms': ['missingTransforms: List[str]'], 'layersWillBeRemoved': ['layers: List[QgsMapLayer]'], 'layerWillBeRemoved': ['layer: QgsMapLayer'], 'layersRemoved': ['layerIds: List[str]'], 'layerRemoved': ['layerId: str'], 'layersAdded': ['layers: List[QgsMapLayer]'], 'layerWasAdded': ['layer: QgsMapLayer'], 'legendLayersAdded': ['layers: List[QgsMapLayer]'], 'isDirtyChanged': ['dirty: bool']}
    QgsProject.__group__ = ['project']
except NameError:
    pass
try:
    QgsProjectDirtyBlocker.__group__ = ['project']
except NameError:
    pass
