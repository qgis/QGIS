/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/raster/qgsrasteriterator.h                                  *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.py again   *
 ************************************************************************/



class QgsRasterIterator
{
%Docstring(signature="appended")
Iterator for sequentially processing raster cells.
%End

%TypeHeaderCode
#include "qgsrasteriterator.h"
%End
  public:

    QgsRasterIterator( QgsRasterInterface *input, int tileOverlapPixels = 0 );
%Docstring
Constructor for QgsRasterIterator, iterating over the specified ``input`` raster source.

Since QGIS 3.34 the tileOverlapPixels can be used to specify a margin in pixels for retrieving pixels overlapping into neighbor cells.
%End

    static QgsRectangle subRegion( const QgsRectangle &rasterExtent, int rasterWidth, int rasterHeight, const QgsRectangle &subRegion, int &subRegionWidth /Out/, int &subRegionHeight /Out/, int &subRegionLeft /Out/, int &subRegionTop /Out/ );
%Docstring
Given an overall raster extent and width and height in pixels, calculates the sub region
of the raster covering the specified ``subRegion``.

:param rasterExtent: overall raster extent
:param rasterWidth: overall raster width
:param rasterHeight: overall raster height
:param subRegion: desired sub region extent

:return: - sub region geographic extent, snapped to exact pixel boundaries
         - subRegionWidth: width in pixels of sub region
         - subRegionHeight: height in pixels of sub region
         - subRegionLeft: starting column of left side of sub region
         - subRegionTop: starting row of top side of sub region

.. versionadded:: 3.26
%End

    void startRasterRead( int bandNumber, qgssize nCols, qgssize nRows, const QgsRectangle &extent, QgsRasterBlockFeedback *feedback = 0 );
%Docstring
Start reading of raster band. Raster data can then be retrieved by calling readNextRasterPart until it returns ``False``.

:param bandNumber: number of raster band to read
:param nCols: number of columns
:param nRows: number of rows
:param extent: area to read
:param feedback: optional raster feedback object for cancellation/preview. Added in QGIS 3.0.
%End

    bool next( int bandNumber, int &columns /Out/, int &rows /Out/, int &topLeftColumn /Out/, int &topLeftRow /Out/, QgsRectangle &blockExtent /Out/ );
%Docstring
Fetches details of the next part of the raster data. This method does NOT actually fetch the raster
data itself, rather it calculates and iterates over the details of the raster alone.

It's useful for iterating over several layers using a target "reference" layer. E.g. summing
the pixels in n rasters whilst aligning the result to a reference layer which is not being summed.

Note that calling this method also advances the iterator, just like calling :py:func:`~QgsRasterIterator.readNextRasterPart`.

:param bandNumber: band to read

:return: - ``False`` if the last part was already returned
         - columns: number of columns on output device
         - rows: number of rows on output device
         - topLeftColumn: top left column
         - topLeftRow: top left row
         - blockExtent: exact extent of returned raster block

.. versionadded:: 3.6
%End

    bool readNextRasterPart( int bandNumber,
                             int &nCols, int &nRows,
                             QgsRasterBlock **block /TransferBack/,
                             int &topLeftCol, int &topLeftRow );
%Docstring
Fetches next part of raster data, caller takes ownership of the block and
caller should delete the block.

:param bandNumber: band to read
:param nCols: number of columns on output device
:param nRows: number of rows on output device
:param block: address of block pointer
:param topLeftCol: top left column
:param topLeftRow: top left row

:return: ``False`` if the last part was already returned
%End


    void stopRasterRead( int bandNumber );
%Docstring
Cancels the raster iteration and resets the iterator.
%End

    const QgsRasterInterface *input() const;
%Docstring
Returns the input raster interface which is being iterated over.
%End

    void setMaximumTileWidth( int w );
%Docstring
Sets the maximum tile width returned during iteration.

.. seealso:: :py:func:`maximumTileWidth`

.. seealso:: :py:func:`setMaximumTileHeight`
%End

    int maximumTileWidth() const;
%Docstring
Returns the maximum tile width returned during iteration.

.. seealso:: :py:func:`setMaximumTileWidth`

.. seealso:: :py:func:`maximumTileHeight`
%End

    void setMaximumTileHeight( int h );
%Docstring
Sets the minimum tile height returned during iteration.

.. seealso:: :py:func:`maximumTileHeight`

.. seealso:: :py:func:`setMaximumTileWidth`
%End

    int maximumTileHeight() const;
%Docstring
Returns the minimum tile width returned during iteration.

.. seealso:: :py:func:`setMaximumTileHeight`

.. seealso:: :py:func:`maximumTileWidth`
%End

    static const int DEFAULT_MAXIMUM_TILE_WIDTH;

    static const int DEFAULT_MAXIMUM_TILE_HEIGHT;

};

/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/raster/qgsrasteriterator.h                                  *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.py again   *
 ************************************************************************/
