/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/geocoding/qgsabstractgeocoderlocatorfilter.h                *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.py again   *
 ************************************************************************/




class QgsAbstractGeocoderLocatorFilter : QgsLocatorFilter /Abstract/
{
%Docstring(signature="appended")
An abstract base class which implements a locator filter populated from a :py:class:`QgsGeocoderInterface`.

This base class implements the required logic to bridge a class which implements the
:py:class:`QgsGeocoderInterface` interface to a :py:class:`QgsLocatorFilter`. It allows easy creation of a locator
filter from a geocoder.

.. note::

   This is a low-level API, designed for use by client applications which do not
   utilize the QGIS gui library. Usually the concrete class :py:class:`QgsGeocoderLocatorFilter` from
   the gui library should be used instead.

.. versionadded:: 3.18
%End

%TypeHeaderCode
#include "qgsabstractgeocoderlocatorfilter.h"
%End
  public:

    QgsAbstractGeocoderLocatorFilter( const QString &name, const QString &displayName,
                                      const QString &prefix,
                                      QgsGeocoderInterface *geocoder,
                                      const QgsRectangle &boundingBox = QgsRectangle() );
%Docstring
Constructor for QgsAbstractGeocoderLocatorFilter.

The ``name`` argument specifies a unique name for the filter. This should be
an untranslated string identifying the filter.

The ``displayName`` argument must specify a translated, user-friendly name for the filter.

The ``prefix`` argument specifies the prefix character(s) for this filter. Prefixing a search
with these characters will restrict the locator search to only include results from this filter.
The ``prefix`` must consist of at least three characters.

The ``geocoder`` must specify an instance of a class which implements the :py:class:`QgsGeocoderInterface`
interface. Ownership of ``geocoder`` is not transferred, and the caller must ensure that ``geocoder``
exists for the lifetime of this filter.

The ``boundingBox`` argument specifies the geographic bounding box, in WGS84, covered by the
filter.
%End

    virtual QString name() const;

    virtual QString displayName() const;

    virtual QString prefix() const;

    virtual void fetchResults( const QString &string, const QgsLocatorContext &context, QgsFeedback *feedback );

    virtual void triggerResult( const QgsLocatorResult &result );


    QgsGeocoderInterface *geocoder() const;
%Docstring
Returns the geocoder attached to the filter.
%End

    const QgsRectangle boundingBox();
%Docstring
Returns the WGS84 bounding box attached to the filter.
%End

    QgsGeocoderResult locatorResultToGeocoderResult( const QgsLocatorResult &result ) const;
%Docstring
Converts a locator ``result`` to a geocoder result.

.. seealso:: :py:func:`geocoderResultToLocatorResult`
%End

    QgsLocatorResult geocoderResultToLocatorResult( const QgsGeocoderResult &result );
%Docstring
Converts a geocoder ``result`` to a locator result.

.. seealso:: :py:func:`locatorResultToGeocoderResult`
%End

};

/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/geocoding/qgsabstractgeocoderlocatorfilter.h                *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.py again   *
 ************************************************************************/
