/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/elevation/qgsabstractprofilegenerator.h                     *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.py again   *
 ************************************************************************/






class QgsProfileRenderContext
{
%Docstring(signature="appended")
Abstract base class for storage of elevation profiles.

.. versionadded:: 3.26
%End

%TypeHeaderCode
#include "qgsabstractprofilegenerator.h"
%End
  public:

    QgsProfileRenderContext( QgsRenderContext &context );
%Docstring
Constructor for QgsProfileRenderContext, with the specified embedded render ``context``.
%End

    QgsRenderContext &renderContext();
%Docstring
Returns a reference to the component :py:class:`QgsRenderContext`.
%End

    const QTransform &worldTransform() const;
%Docstring
Returns the transform from world coordinates to painter coordinates.

This transform maps points in (distance, elevation) to (x, y) in painter coordinates.

.. seealso:: :py:func:`setWorldTransform`
%End

    void setWorldTransform( const QTransform &transform );
%Docstring
Sets the ``transform`` from world coordinates to painter coordinates.

This transform maps points in (distance, elevation) to (x, y) in painter coordinates.

.. seealso:: :py:func:`worldTransform`
%End

    QgsDoubleRange distanceRange() const;
%Docstring
Returns the range of distances to include in the render.

Distances outside this range should be excluded from the render.

.. seealso:: :py:func:`setDistanceRange`
%End

    void setDistanceRange( const QgsDoubleRange &range );
%Docstring
Sets the ``range`` of distances to include in the render.

Distances outside this range will be excluded from the render.

.. seealso:: :py:func:`distanceRange`
%End

    QgsDoubleRange elevationRange() const;
%Docstring
Returns the range of elevations to include in the render.

Elevations outside this range should be excluded from the render.

.. seealso:: :py:func:`setElevationRange`
%End

    void setElevationRange( const QgsDoubleRange &range );
%Docstring
Sets the ``range`` of elevations to include in the render.

Elevations outside this range will be excluded from the render.

.. seealso:: :py:func:`elevationRange`
%End

};


class QgsProfileIdentifyContext
{
%Docstring(signature="appended")
Encapsulates the context of identifying profile results.

.. versionadded:: 3.26
%End

%TypeHeaderCode
#include "qgsabstractprofilegenerator.h"
%End
  public:

    double maximumSurfaceDistanceDelta;

    double maximumSurfaceElevationDelta;

    double maximumPointDistanceDelta;

    double maximumPointElevationDelta;

    double displayRatioElevationVsDistance;

    QgsProject *project;

};



class QgsProfileIdentifyResults
{
%Docstring(signature="appended")
Stores identify results generated by a :py:class:`QgsAbstractProfileResults` object.

.. versionadded:: 3.26
%End

%TypeHeaderCode
#include "qgsabstractprofilegenerator.h"
%End
  public:

    QgsProfileIdentifyResults( QgsMapLayer *layer = 0, const QVector< QMap<QString, QVariant>> &results = QVector< QMap<QString, QVariant>>() );
%Docstring
Constructor for :py:class:`QgsProfileIdentifyResult`, with the associated map ``layer``.
%End

    QgsMapLayer *layer() const;
%Docstring
Returns the associated map layer.
%End

    QVector<QMap<QString, QVariant>> results() const;
%Docstring
Returns a list of custom attributes representing the identify results.

The interpretation of these is dependent on the :py:class:`QgsAbstractProfileResults` subclass which generated the results.
%End

};

class QgsAbstractProfileResults
{
%Docstring(signature="appended")
Abstract base class for storage of elevation profiles.

.. versionadded:: 3.26
%End

%TypeHeaderCode
#include "qgsabstractprofilegenerator.h"
%End
  public:

    struct Feature
    {
      QString layerIdentifier;
      QgsGeometry geometry;
      QVariantMap attributes;
    };

    virtual ~QgsAbstractProfileResults();

    virtual QString type() const = 0;
%Docstring
Returns the unique string identifier for the results type.
%End

    virtual QMap< double, double > distanceToHeightMap() const = 0;
%Docstring
Returns the map of distance (chainage) to height.
%End

    virtual QgsPointSequence sampledPoints() const = 0;
%Docstring
Returns a list of sampled points, with their calculated elevation
as the point z value.
%End

    virtual QVector< QgsGeometry > asGeometries() const = 0;
%Docstring
Returns a list of geometries representing the calculated elevation results.
%End

    virtual QVector< QgsAbstractProfileResults::Feature > asFeatures( Qgis::ProfileExportType type, QgsFeedback *feedback = 0 ) const;
%Docstring
Returns a list of features representing the calculated elevation results.

The default implementation returns an empty list.

.. versionadded:: 3.32
%End

    virtual void renderResults( QgsProfileRenderContext &context ) = 0;
%Docstring
Renders the results to the specified ``context``.
%End

    virtual QgsDoubleRange zRange() const = 0;
%Docstring
Returns the range of the retrieved elevation values
%End

    virtual QgsProfileSnapResult snapPoint( const QgsProfilePoint &point, const QgsProfileSnapContext &context );
%Docstring
Snaps a ``point`` to the generated elevation profile.
%End

    virtual QVector<QgsProfileIdentifyResults> identify( const QgsProfilePoint &point, const QgsProfileIdentifyContext &context );
%Docstring
Identify results visible at the specified profile ``point``.
%End

    virtual QVector<QgsProfileIdentifyResults> identify( const QgsDoubleRange &distanceRange, const QgsDoubleRange &elevationRange, const QgsProfileIdentifyContext &context );
%Docstring
Identify results visible within the specified ranges.
%End

    virtual void copyPropertiesFromGenerator( const QgsAbstractProfileGenerator *generator );
%Docstring
Copies properties from specified ``generator`` to the results object.

For instance, this method can be used to copy any properties relating to rendering
the gathered results to reflect the ``generator``'s current properties.

The base class method does nothing.
%End
};

class QgsProfileGenerationContext
{
%Docstring(signature="appended")
Encapsulates the context in which an elevation profile is to be generated.

.. versionadded:: 3.26
%End

%TypeHeaderCode
#include "qgsabstractprofilegenerator.h"
%End
  public:

    double maximumErrorMapUnits() const;
%Docstring
Returns the maximum allowed error in the generated result, in profile curve map units.

By default this is NaN, which indicates that the profile should be generated in the highest precision possible.
Larger values will result in a faster profile to generate.

.. seealso:: :py:func:`setMaximumErrorMapUnits`
%End

    void setMaximumErrorMapUnits( double error );
%Docstring
Sets the maximum allowed ``error`` in the generated result, in profile curve map units.

By default this is NaN, which indicates that the profile should be generated in the highest precision possible.
Larger values will result in a faster profile to generate.

.. seealso:: :py:func:`maximumErrorMapUnits`
%End

    double mapUnitsPerDistancePixel() const;
%Docstring
Returns the number of map units per pixel in the distance dimension.

.. seealso:: :py:func:`setMapUnitsPerDistancePixel`
%End

    void setMapUnitsPerDistancePixel( double units );
%Docstring
Sets the number of map ``units`` per pixel in the distance dimension.

.. seealso:: :py:func:`mapUnitsPerDistancePixel`
%End

    QgsDoubleRange distanceRange() const;
%Docstring
Returns the range of distances to include in the generation.

Distances outside this range may be excluded from the generation (if it results in faster profile generation).

.. seealso:: :py:func:`setDistanceRange`
%End

    void setDistanceRange( const QgsDoubleRange &range );
%Docstring
Sets the ``range`` of distances to include in the generation.

Distances outside this range may be excluded from the generation (if it results in faster profile generation).

.. seealso:: :py:func:`distanceRange`
%End

    QgsDoubleRange elevationRange() const;
%Docstring
Returns the range of elevations to include in the generation.

Elevations outside this range may be excluded from the generation (if it results in faster profile generation).

.. seealso:: :py:func:`setElevationRange`
%End

    void setElevationRange( const QgsDoubleRange &range );
%Docstring
Sets the ``range`` of elevations to include in the generation.

Elevations outside this range may be excluded from the generation (if it results in faster profile generation).

.. seealso:: :py:func:`elevationRange`
%End

    void setDpi( double dpi );
%Docstring
Sets the ``dpi`` (dots per inch) for the profie, to be used in size conversions.

.. seealso:: :py:func:`dpi`
%End

    double dpi() const;
%Docstring
Returns the DPI (dots per inch) for the profie, to be used in size conversions.

.. seealso:: :py:func:`setDpi`
%End

    double convertDistanceToPixels( double size, Qgis::RenderUnit unit ) const;
%Docstring
Converts a distance size from the specified units to pixels.
%End

    bool operator==( const QgsProfileGenerationContext &other ) const;
    bool operator!=( const QgsProfileGenerationContext &other ) const;

};

class QgsAbstractProfileGenerator
{
%Docstring(signature="appended")
Abstract base class for objects which generate elevation profiles.

The generation is typically done in a background
thread, so it is necessary to keep all structures required for generating the
profile away from the original profile source because it may change at any time.

Because the data needs to be copied (to avoid the need for locking),
it is highly desirable to use copy-on-write where possible. This way,
the overhead of copying (both memory and CPU) will be kept low.
Qt containers and various Qt classes use implicit sharing.

The scenario will be:

- elevation profile job (doing preparation in the GUI thread) calls
  :py:func:`QgsAbstractProfileSource.createProfileGenerator()` and gets an instance of this class.
  The instance is initialized at that point and should not need
  additional calls to the source.
- profile job (still in GUI thread) stores the generator for later use.
- profile job (in worker thread) calls :py:func:`QgsAbstractProfileGenerator.generateProfile()`
- profile job (again in GUI thread) will check :py:func:`~errors` and report them

.. versionadded:: 3.26
%End

%TypeHeaderCode
#include "qgsabstractprofilegenerator.h"
%End
  public:

    virtual ~QgsAbstractProfileGenerator();

    virtual QString sourceId() const = 0;
%Docstring
Returns a unique identifier representing the source of the profile.

For generators associated with a map layer the source ID will match the layer's :py:func:`QgsMapLayer.id()`. Other (non-map-layer) sources
will have a different unique ID with its own custom interpretation.gen
%End

    virtual Qgis::ProfileGeneratorFlags flags() const;
%Docstring
Returns flags which reflect how the profile generator operates.
%End

    virtual bool generateProfile( const QgsProfileGenerationContext &context = QgsProfileGenerationContext() ) = 0;
%Docstring
Generate the profile (based on data stored in the class).

Returns ``True`` if the profile was generated successfully (i.e. the generation
was not canceled early).
%End

    virtual QgsFeedback *feedback() const = 0;
%Docstring
Access to feedback object of the generator (may be ``None``)
%End

    virtual QgsAbstractProfileResults *takeResults() = 0 /TransferBack/;
%Docstring
Takes results from the generator.

Ownership is transferred to the caller.
%End

};

/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/elevation/qgsabstractprofilegenerator.h                     *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.py again   *
 ************************************************************************/
