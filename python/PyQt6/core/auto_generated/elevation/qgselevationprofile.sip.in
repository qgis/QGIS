/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/elevation/qgselevationprofile.h                             *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.py again   *
 ************************************************************************/





class QgsElevationProfile : QObject
{
%Docstring(signature="appended")
Represents an elevation profile attached to a project.

.. versionadded:: 4.0
%End

%TypeHeaderCode
#include "qgselevationprofile.h"
%End
  public:

    explicit QgsElevationProfile( QgsProject *project );
%Docstring
Constructor for QgsElevationProfile.
%End
    ~QgsElevationProfile();

    QString name() const;
%Docstring
Returns the profile's unique name.

.. seealso:: :py:func:`setName`

.. seealso:: :py:func:`nameChanged`
%End

    QDomElement writeXml( QDomDocument &document, const QgsReadWriteContext &context ) const;
%Docstring
Returns the profiles's state encapsulated in a DOM element.

.. seealso:: :py:func:`readXml`
%End

    bool readXml( const QDomElement &element, const QDomDocument &document, const QgsReadWriteContext &context );
%Docstring
Sets the profiles's state from a DOM element.

``element`` is the DOM node corresponding to the profile.

.. seealso:: :py:func:`resolveReferences`

.. seealso:: :py:func:`writeXml`
%End

    void resolveReferences( const QgsProject *project );
%Docstring
After reading settings from XML, resolves references to any layers in a
``project`` that have been read as layer IDs.

.. seealso:: :py:func:`readXml`
%End

    QIcon icon() const;
%Docstring
Returns the icon to use for the elevation profile.
%End

    void setLayers( const QList<QgsMapLayer *> &layers );
%Docstring
Sets the list of ``layers`` to include in the profile.

.. seealso:: :py:func:`layers`
%End

    QList<QgsMapLayer *> layers() const;
%Docstring
Returns the list of layers included in the profile.

.. seealso:: :py:func:`setLayers`
%End

    QgsCoordinateReferenceSystem crs() const;
%Docstring
Returns the crs associated with the profile's map coordinates.

.. seealso:: :py:func:`setCrs`
%End

    void setProfileCurve( QgsCurve *curve /Transfer/ );
%Docstring
Sets the profile ``curve``.

The CRS associated with ``curve`` is set via
:py:func:`~QgsElevationProfile.setCrs`.

Ownership is transferred to the profile.

.. seealso:: :py:func:`profileCurve`
%End

    QgsCurve *profileCurve() const;
%Docstring
Returns the profile curve.

The CRS associated with the curve is retrieved via
:py:func:`~QgsElevationProfile.crs`.

.. seealso:: :py:func:`setProfileCurve`
%End

    double tolerance() const;
%Docstring
Returns the tolerance of the profile (in
:py:func:`~QgsElevationProfile.crs` units).

This value determines how far from the
:py:func:`~QgsElevationProfile.profileCurve` is appropriate for
inclusion of results. For instance, when a profile is generated for a
point vector layer this tolerance distance will dictate how far from the
actual profile curve a point can reside within to be included in the
results.

.. seealso:: :py:func:`setTolerance`
%End

    bool lockAxisScales() const;
%Docstring
Returns ``True`` if the distance and elevation scales are locked to each
other.

.. seealso:: :py:func:`setLockAxisScales`
%End

    Qgis::DistanceUnit distanceUnit() const;
%Docstring
Returns the distance unit used by the profile.

.. seealso:: :py:func:`setDistanceUnit`
%End

    QgsLineSymbol *subsectionsSymbol();
%Docstring
Returns the symbol used to draw the subsections.

.. seealso:: :py:func:`setSubsectionsSymbol`
%End

    void setSubsectionsSymbol( QgsLineSymbol *symbol /Transfer/ );
%Docstring
Sets the ``symbol`` used to draw the subsections.

If ``symbol`` is ``None``, the subsections are not drawn. Ownership of
``symbol`` is transferred.

.. seealso:: :py:func:`subsectionsSymbol`
%End

  public slots:

    void setName( const QString &name );
%Docstring
Sets the profile's unique ``name``.

.. seealso:: :py:func:`name`

.. seealso:: :py:func:`nameChanged`
%End

    void setCrs( const QgsCoordinateReferenceSystem &crs );
%Docstring
Sets the ``crs`` associated with the profile's map coordinates.

.. seealso:: :py:func:`crs`
%End

    void setTolerance( double tolerance );
%Docstring
Sets the profile tolerance (in :py:func:`~QgsElevationProfile.crs`
units).

This value determines how far from the
:py:func:`~QgsElevationProfile.profileCurve` is appropriate for
inclusion of results. For instance, when a profile is generated for a
point vector layer this tolerance distance will dictate how far from the
actual profile curve a point can reside within to be included in the
results.

.. seealso:: :py:func:`tolerance`
%End

    void setLockAxisScales( bool lock );
%Docstring
Sets whether the distance and elevation scales are locked to each other.

.. seealso:: :py:func:`lockAxisScales`
%End

    void setDistanceUnit( Qgis::DistanceUnit unit );
%Docstring
Sets the distance ``unit`` used by the profile.

.. seealso:: :py:func:`distanceUnit`
%End

  signals:

    void nameChanged( const QString &newName );
%Docstring
Emitted when the profile is renamed.

.. seealso:: :py:func:`name`

.. seealso:: :py:func:`setName`
%End

};

/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/elevation/qgselevationprofile.h                             *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.py again   *
 ************************************************************************/
