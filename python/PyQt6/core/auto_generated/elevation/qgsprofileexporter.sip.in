/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/elevation/qgsprofileexporter.h                              *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.pl again   *
 ************************************************************************/




class QgsProfileExporter
{
%Docstring(signature="appended")
Handles exports of elevation profiles in various formats.

.. versionadded:: 3.32
%End

%TypeHeaderCode
#include "qgsprofileexporter.h"
%End
  public:

    QgsProfileExporter( const QList< QgsAbstractProfileSource * > &sources,
                        const QgsProfileRequest &request,
                        Qgis::ProfileExportType type );
%Docstring
Constructor for QgsProfileExporter, using the provided list of profile ``sources`` to generate the
results.

After construction, call :py:func:`~QgsProfileExporter.run` to initiate the profile generation.
%End


    ~QgsProfileExporter();

    void run( QgsFeedback *feedback = 0 );
%Docstring
Runs the profile generation. This method must be called before retrieving any results from the
exporter.

This method is safe to run in a background thread.
%End

    QList< QgsVectorLayer * > toLayers() /Factory/;
%Docstring
Returns a list of vector layer containing the exported profile results.

While this method attempts to condense all results into a single layer, multiple layers may be returned
when the geometry types of exported features differs.

Ownership of the returned layers is transferred to the caller.
%End

  private:
    QgsProfileExporter( const QgsProfileExporter &other );
};

class QgsProfileExporterTask : QgsTask
{
%Docstring(signature="appended")
Handles exports of elevation profiles in various formats in a background task.

.. versionadded:: 3.32
%End

%TypeHeaderCode
#include "qgsprofileexporter.h"
%End
  public:

    enum class ExportResult
    {
      Success,
      Empty,
      DeviceError,
      DxfExportFailed,
      LayerExportFailed,
      Canceled,
    };

    QgsProfileExporterTask( const QList< QgsAbstractProfileSource * > &sources,
                            const QgsProfileRequest &request,
                            Qgis::ProfileExportType type,
                            const QString &destination,
                            const QgsCoordinateTransformContext &transformContext );
%Docstring
Constructor for QgsProfileExporterTask, saving results to the specified ``destination`` file.

If ``destination`` is an empty string then the profile results will be generated only and can
be retrieved by calling :py:func:`~QgsProfileExporterTask.takeLayers`.
%End

    virtual bool run();

    virtual void cancel();


    QList< QgsVectorLayer * > takeLayers() /Factory/;
%Docstring
Returns a list of vector layer containing the exported profile results.

While this method attempts to condense all results into a single layer, multiple layers may be returned
when the geometry types of exported features differs.

Ownership of the returned layers is transferred to the caller.
%End

    QgsProfileExporterTask::ExportResult result() const;
%Docstring
Returns the result of the export operation.

.. seealso:: :py:func:`error`
%End

    QStringList createdFiles() const;
%Docstring
Returns a list of layer files created during the export.
%End

    QString error() const;
%Docstring
Returns a descriptive error message, if available.
%End

};


/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/elevation/qgsprofileexporter.h                              *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.pl again   *
 ************************************************************************/
