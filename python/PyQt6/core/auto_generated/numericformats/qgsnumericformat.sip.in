/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/numericformats/qgsnumericformat.h                           *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.pl again   *
 ************************************************************************/





class QgsNumericFormatContext
{
%Docstring(signature="appended")
A context for numeric formats

.. versionadded:: 3.12
%End

%TypeHeaderCode
#include "qgsnumericformat.h"
%End
  public:
    static const QMetaObject staticMetaObject;

  public:

    QgsNumericFormatContext();
%Docstring
Constructor for QgsNumericFormatContext.

The context will be populated based on the user's current locale settings.
%End


    QChar thousandsSeparator() const;
%Docstring
Returns the thousands separator character.

.. seealso:: :py:func:`setThousandsSeparator`
%End

    void setThousandsSeparator( const QChar &separator );
%Docstring
Sets the thousands ``separator`` character.

.. seealso:: :py:func:`thousandsSeparator`
%End

    QChar decimalSeparator() const;
%Docstring
Returns the decimal separator character.

.. seealso:: :py:func:`setDecimalSeparator`
%End

    void setDecimalSeparator( const QChar &separator );
%Docstring
Returns the decimal separator character.

.. seealso:: :py:func:`setDecimalSeparator`
%End

    QChar percent() const;
%Docstring
Returns the percent character.

.. seealso:: :py:func:`setPercent`
%End

    void setPercent( const QChar &character );
%Docstring
Sets the percent ``character``.

.. seealso:: :py:func:`percent`
%End

    QChar zeroDigit() const;
%Docstring
Returns the zero digit character.

.. seealso:: :py:func:`setZeroDigit`
%End

    void setZeroDigit( const QChar &character );
%Docstring
Returns the zero digit ``character``.

.. seealso:: :py:func:`zeroDigit`
%End

    QChar negativeSign() const;
%Docstring
Returns the negative sign character.

.. seealso:: :py:func:`setNegativeSign`
%End

    void setNegativeSign( const QChar &character );
%Docstring
Sets the negative sign ``character``.

.. seealso:: :py:func:`negativeSign`
%End

    QChar positiveSign() const;
%Docstring
Returns the positive sign character.

.. seealso:: :py:func:`setPositiveSign`
%End

    void setPositiveSign( const QChar &character );
%Docstring
Sets the positive sign ``character``.

.. seealso:: :py:func:`positiveSign`
%End

    QChar exponential() const;
%Docstring
Returns the exponential character.

.. seealso:: :py:func:`setExponential`
%End

    void setExponential( const QChar &character );
%Docstring
Sets the exponential ``character``.

.. seealso:: :py:func:`exponential`
%End

    enum class Interpretation
    {
      Generic,
      Latitude,
      Longitude,
    };

    Interpretation interpretation() const;
%Docstring
Returns the interpretation of the numbers being converted.

.. seealso:: :py:func:`setInterpretation`

.. versionadded:: 3.26
%End

    void setInterpretation( Interpretation interpretation );
%Docstring
Sets the ``interpretation`` of the numbers being converted.

.. seealso:: :py:func:`interpretation`

.. versionadded:: 3.26
%End

};

%ModuleHeaderCode
#include <qgsbasicnumericformat.h>
#include <qgsbearingnumericformat.h>
#include <qgscurrencynumericformat.h>
#include <qgsfallbacknumericformat.h>
#include <qgspercentagenumericformat.h>
#include <qgsscientificnumericformat.h>
#include <qgscoordinatenumericformat.h>
%End

class QgsNumericFormat
{
%Docstring(signature="appended")
A numeric formatter allows for formatting a numeric value for display, using
a variety of different formatting techniques (e.g. as scientific notation, currency values,
percentage values, etc)

This is an abstract base class and will always need to be subclassed.

.. versionadded:: 3.12
%End

%TypeHeaderCode
#include "qgsnumericformat.h"
%End
%ConvertToSubClassCode
    if ( dynamic_cast< QgsBearingNumericFormat * >( sipCpp ) )
      sipType = sipType_QgsBearingNumericFormat;
    else if ( dynamic_cast< QgsGeographicCoordinateNumericFormat * >( sipCpp ) )
      sipType = sipType_QgsGeographicCoordinateNumericFormat;
    else if ( dynamic_cast< QgsFallbackNumericFormat * >( sipCpp ) )
      sipType = sipType_QgsFallbackNumericFormat;
    else if ( dynamic_cast< QgsPercentageNumericFormat * >( sipCpp ) )
      sipType = sipType_QgsPercentageNumericFormat;
    else if ( dynamic_cast< QgsScientificNumericFormat * >( sipCpp ) )
      sipType = sipType_QgsScientificNumericFormat;
    else if ( dynamic_cast< QgsCurrencyNumericFormat * >( sipCpp ) )
      sipType = sipType_QgsCurrencyNumericFormat;
    else if ( dynamic_cast< QgsBasicNumericFormat * >( sipCpp ) )
      sipType = sipType_QgsBasicNumericFormat;
    else if ( dynamic_cast< QgsFractionNumericFormat * >( sipCpp ) )
      sipType = sipType_QgsFractionNumericFormat;
    else
      sipType = NULL;
%End
  public:

    QgsNumericFormat();

    virtual ~QgsNumericFormat();

    virtual QString id() const = 0;
%Docstring
Returns a unique id for this numeric format.

This id is used to identify this numeric format in the registry with :py:func:`QgsNumericFormatRegistry.format()`.
%End

    virtual QString visibleName() const = 0;
%Docstring
Returns the translated, user-visible name for this format.
%End

    virtual int sortKey();
%Docstring
Returns a sorting key value, where formats with a lower sort key will be shown earlier in lists.

Generally, subclasses should return :py:func:`QgsNumericFormat.sortKey()` as their sorting key.
%End

    virtual double suggestSampleValue() const;
%Docstring
Returns a suggested sample value which nicely represents the current format configuration.
%End

    virtual QString formatDouble( double value, const QgsNumericFormatContext &context ) const = 0;
%Docstring
Returns a formatted string representation of a numeric double value.
%End

    virtual QgsNumericFormat *clone() const = 0 /Factory/;
%Docstring
Clones the format, returning a new object.

The caller takes ownership of the returned object.
%End

    virtual QgsNumericFormat *create( const QVariantMap &configuration, const QgsReadWriteContext &context ) const = 0 /Factory/;
%Docstring
Creates a new copy of the format, using the supplied ``configuration``.

The caller takes ownership of the returned object.
%End

    virtual QVariantMap configuration( const QgsReadWriteContext &context ) const = 0;
%Docstring
Returns the current configuration of the formatter. This value can be used in a call to :py:func:`~QgsNumericFormat.create`
in order to recreate this formatter in its current state.
%End

    void writeXml( QDomElement &element, QDomDocument &document, const QgsReadWriteContext &context ) const;
%Docstring
Writes the format to an XML ``element``.

.. seealso:: :py:func:`QgsNumericFormatRegistry.createFromXml`
%End

    bool operator==( const QgsNumericFormat &other ) const;
    bool operator!=( const QgsNumericFormat &other ) const;

  protected:

};

/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/numericformats/qgsnumericformat.h                           *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.pl again   *
 ************************************************************************/
