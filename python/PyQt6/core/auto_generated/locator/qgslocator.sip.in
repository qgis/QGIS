/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/locator/qgslocator.h                                        *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.py again   *
 ************************************************************************/







class QgsLocator : QObject
{
%Docstring(signature="appended")
Handles the management of :py:class:`QgsLocatorFilter` objects and async collection of search results from them.

:py:class:`QgsLocator` acts as both a registry for :py:class:`QgsLocatorFilter` objects and a means of firing up
asynchronous queries against these filter objects.

Filters are first registered to the locator by calling :py:func:`~registerFilter`. Registering filters
transfers their ownership to the locator object. Plugins which register filters to the locator
must take care to correctly call :py:func:`~deregisterFilter` and deregister their filter upon plugin
unload to avoid crashes.

In order to trigger a search across registered filters, the :py:func:`~fetchResults` method is called.
This triggers threaded calls to :py:func:`QgsLocatorFilter.fetchResults()` for all registered filters.
As individual filters find matching results, the :py:func:`~foundResult` signal will be triggered
for each result. Callers should connect this signal to an appropriate slot designed
to collect and handle these results. Since :py:func:`~foundResult` is triggered whenever a filter
encounters an individual result, it will usually be triggered many times for a single
call to :py:func:`~fetchResults`.
%End

%TypeHeaderCode
#include "qgslocator.h"
%End
  public:

    static const QList<QString> CORE_FILTERS;

    QgsLocator( QObject *parent /TransferThis/ = 0 );
%Docstring
Constructor for QgsLocator.
%End

    ~QgsLocator();

    void registerFilter( QgsLocatorFilter *filter /Transfer/ );
%Docstring
Registers a ``filter`` within the locator. Ownership of the filter is transferred to the
locator.

.. warning::

   Plugins which register filters to the locator must take care to correctly call
   :py:func:`~QgsLocator.deregisterFilter` and deregister their filters upon plugin unload to avoid crashes.

.. seealso:: :py:func:`deregisterFilter`
%End

    void deregisterFilter( QgsLocatorFilter *filter );
%Docstring
Deregisters a ``filter`` from the locator and deletes it. Calling this will block whilst
any currently running query is terminated.

Plugins which register filters to the locator must take care to correctly call
:py:func:`~QgsLocator.deregisterFilter` to deregister their filters upon plugin unload to avoid crashes.

.. seealso:: :py:func:`registerFilter`
%End

    QList< QgsLocatorFilter *> filters( const QString &prefix = QString() );
%Docstring
Returns the list of filters registered in the locator.

:param prefix: If prefix is not empty, the list returned corresponds to the filter with the given active prefix

.. seealso:: :py:func:`prefixedFilters`
%End

 QMap<QString, QgsLocatorFilter *> prefixedFilters() const;
%Docstring
Returns a map of prefix to filter, for all registered filters
with valid prefixes.

.. seealso:: :py:func:`filters`

.. deprecated:: 3.2

   Use :py:func:`~QgsLocator.filters` instead.
%End

    void fetchResults( const QString &string, const QgsLocatorContext &context, QgsFeedback *feedback = 0 );
%Docstring
Triggers the background fetching of filter results for a specified search ``string``.
The ``context`` argument encapsulates the context relating to the search (such as a map
extent to prioritize).

If specified, the ``feedback`` object must exist for the lifetime of this query.

The :py:func:`~QgsLocator.foundResult` signal will be emitted for each individual result encountered
by the registered filters.
%End

    void cancel();
%Docstring
Cancels any current running query, and blocks until query is completely canceled by
all filters.

.. seealso:: :py:func:`cancelWithoutBlocking`
%End

    void cancelWithoutBlocking();
%Docstring
Triggers cancellation of any current running query without blocking. The query may
take some time to cancel after calling this.

.. seealso:: :py:func:`cancel`
%End

    bool isRunning() const;
%Docstring
Returns ``True`` if a query is currently being executed by the locator.
%End

    void clearPreviousResults();
%Docstring
Will call clearPreviousResults on all filters

.. versionadded:: 3.2
%End

    QStringList completionList() const;
%Docstring
Returns the list for auto completion
This list is updated when preparing the search

.. versionadded:: 3.16
%End


  signals:

    void foundResult( const QgsLocatorResult &result );
%Docstring
Emitted whenever a filter encounters a matching ``result`` after the :py:func:`~QgsLocator.fetchResults` method
is called.
%End

    void searchPrepared();
%Docstring
Emitted when locator has prepared the search (:py:func:`QgsLocatorFilter.prepare`)
before the search is actually performed

.. versionadded:: 3.16
%End

    void finished();
%Docstring
Emitted when locator has finished a query, either as a result
of successful completion or early cancellation.
%End

};



/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/locator/qgslocator.h                                        *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.py again   *
 ************************************************************************/
