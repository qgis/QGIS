/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/sensor/qgsabstractsensor.h                                  *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.py again   *
 ************************************************************************/



class QgsAbstractSensor : QObject
{
%Docstring(signature="appended")
An abstract base class for sensor classes

.. versionadded:: 3.32
%End

%TypeHeaderCode
#include "qgsabstractsensor.h"
#include "qgsiodevicesensor.h"
#include "qgssensorregistry.h"
%End
%ConvertToSubClassCode
    if ( QgsAbstractSensor *item = qobject_cast< QgsAbstractSensor * >( sipCpp ) )
    {
      if ( item->type() == QLatin1String( "tcp_socket" ) && dynamic_cast<QgsTcpSocketSensor *>( item ) != NULL )
      {
        sipType = sipType_QgsTcpSocketSensor;
      }
      else if ( item->type() == QLatin1String( "udp_socket" ) && dynamic_cast<QgsUdpSocketSensor *>( item ) != NULL )
      {
        sipType = sipType_QgsUdpSocketSensor;
      }
#if defined( HAVE_QTSERIALPORT )
      else if ( item->type() == QLatin1String( "serial_port" ) && dynamic_cast<QgsSerialPortSensor *>( item ) != NULL )
      {
        sipType = sipType_QgsSerialPortSensor;
      }
#endif
      else
      {
        sipType = sipType_QgsAbstractSensor;
      }
    }
    else
    {
      sipType = NULL;
    }
%End
  public:

    struct SensorData
    {

      QVariant lastValue;

      QDateTime lastTimestamp;
    };

    explicit QgsAbstractSensor( QObject *parent /TransferThis/ = 0 );
%Docstring
Constructor for an abstract sensor, bound to the specified ``parent``.
%End
    virtual ~QgsAbstractSensor();

    QString id() const;
%Docstring
Returns the sensor ID.

.. note::

   This is a autogenerated unique string identifying an individual sensor.
%End

    virtual QString type() const;
%Docstring
Returns the sensor type. This will match the type string of the sensor class, as used by :py:class:`QgsSensorRegistry`.
%End

    QString name() const;
%Docstring
Returns the user-friendly name identifying the sensor.
%End

    void setName( const QString &name );
%Docstring
Sets the  user-friendly name identfying the sensor.
%End

    Qgis::DeviceConnectionStatus status() const;
%Docstring
Returns the current sensor status.
%End

    void setStatus( Qgis::DeviceConnectionStatus status );
%Docstring
Sets the current sensor ``status``.
%End

    void connectSensor();
%Docstring
Connects the sensor to its source.
%End

    void disconnectSensor();
%Docstring
Disconnects the sensor from its source.
%End

    QgsAbstractSensor::SensorData data() const;
%Docstring
Returns the latest captured data from the sensor.
%End

    void setData( const QgsAbstractSensor::SensorData &data );
%Docstring
Sets the latest captured data from the sensor.
%End

    QString errorString() const;
%Docstring
Returns the last error message.
%End

    bool writeXml( QDomElement &parentElement, QDomDocument &document ) const;
%Docstring
Write generic sensor properties into a DOM element.

:param parentElement: parent DOM element (e.g 'Sensors' element)
:param document: DOM document
%End

    bool readXml( const QDomElement &element, const QDomDocument &document );
%Docstring
Restores generic sensor details from a DOM element.

:param element: DOM node corresponding to item (e.g. 'Sensor' element)
:param document: DOM document
%End

    virtual bool writePropertiesToElement( QDomElement &element, QDomDocument &document ) const;
%Docstring
Write specific sensor type properties into a DOM element.

:param element: DOM node corresponding to item (e.g. 'Sensor' element)
:param document: DOM document
%End

    virtual bool readPropertiesFromElement( const QDomElement &element, const QDomDocument &document );
%Docstring
Restores specific sensor type properties from a DOM element.

:param element: DOM node corresponding to item (e.g. 'Sensor' element)
:param document: DOM document
%End

  signals:

    void nameChanged();
%Docstring
Emitted when the sensor name has changed.
%End

    void statusChanged();
%Docstring
Emitted when the sensor status has changed.
%End

    void dataChanged();
%Docstring
Emitted when the captured sensor data has changed.
%End

    void errorOccurred( const QString &errorString );
%Docstring
Emitted when an error has occurred. The ``errorString`` describes the error.
%End

  protected:

    virtual void handleConnect() = 0;
%Docstring
Handles the connection to the sensor.

.. note::

   Triggered by calling :py:func:`~QgsAbstractSensor.connectSensor`
%End

    virtual void handleDisconnect() = 0;
%Docstring
Handles the disconnection from the sensor.

.. note::

   Triggered by calling :py:func:`~QgsAbstractSensor.disconnectSensor`
%End


};


/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/sensor/qgsabstractsensor.h                                  *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.py again   *
 ************************************************************************/
