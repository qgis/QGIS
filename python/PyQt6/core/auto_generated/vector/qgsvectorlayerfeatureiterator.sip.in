/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/vector/qgsvectorlayerfeatureiterator.h                      *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.pl again   *
 ************************************************************************/






%ModuleHeaderCode
#include "qgsfeatureiterator.h"
%End

class QgsVectorLayerFeatureSource : QgsAbstractFeatureSource
{
%Docstring(signature="appended")
Partial snapshot of vector layer's state (only the members necessary for access to features)
%End

%TypeHeaderCode
#include "qgsvectorlayerfeatureiterator.h"
%End
  public:

    explicit QgsVectorLayerFeatureSource( const QgsVectorLayer *layer );
%Docstring
Constructor for QgsVectorLayerFeatureSource.

:param layer: source layer
%End


    ~QgsVectorLayerFeatureSource();

    virtual QgsFeatureIterator getFeatures( const QgsFeatureRequest &request = QgsFeatureRequest() );

%Docstring
Gets an iterator for features matching the specified ``request``
This function is thread-safe.

:return: A feature iterator
%End


    QgsFields fields() const;
%Docstring
Returns the fields that will be available for features that are retrieved from
this source.
%End

    QgsCoordinateReferenceSystem crs() const;
%Docstring
Returns the coordinate reference system for features retrieved from this source.
%End

    QString id() const;
%Docstring
Returns the layer id of the source layer.

.. versionadded:: 3.4
%End

  protected:











  private:
    QgsVectorLayerFeatureSource( const QgsVectorLayerFeatureSource &other );
};


typedef QgsAbstractFeatureIteratorFromSource<QgsVectorLayerFeatureSource> QgsAbstractFeatureIteratorFromSourceQgsVectorLayerFeatureSourceBase;

class QgsVectorLayerFeatureIterator : QgsAbstractFeatureIteratorFromSourceQgsVectorLayerFeatureSourceBase
{

%TypeHeaderCode
#include "qgsvectorlayerfeatureiterator.h"
#include "qgsfeatureiterator.h"
typedef QgsAbstractFeatureIteratorFromSource<QgsVectorLayerFeatureSource> QgsAbstractFeatureIteratorFromSourceQgsVectorLayerFeatureSourceBase;
%End
  public:
    QgsVectorLayerFeatureIterator( QgsVectorLayerFeatureSource *source, bool ownSource, const QgsFeatureRequest &request );

    ~QgsVectorLayerFeatureIterator();

    virtual bool rewind();

%Docstring
reset the iterator to the starting position
%End

    virtual bool close();

%Docstring
end of iterating: free the resources / lock
%End


    struct FetchJoinInfo
    {
      const QgsVectorLayerJoinInfo *joinInfo;
      QgsAttributeList attributes;
      int indexOffset;


      int targetField;

      int joinField;

      void addJoinedAttributesCached( QgsFeature &f, const QVariant &joinValue ) const;
      void addJoinedAttributesDirect( QgsFeature &f, const QVariant &joinValue ) const;
    };

    virtual bool isValid() const;


  protected:
    virtual bool fetchFeature( QgsFeature &feature );

%Docstring
fetch next feature, return ``True`` on success
%End

    virtual bool nextFeatureFilterExpression( QgsFeature &f );
%Docstring
Overrides default method as we only need to filter features in the edit buffer
while for others filtering is left to the provider implementation.
%End

    virtual bool prepareSimplification( const QgsSimplifyMethod &simplifyMethod );

%Docstring
Setup the simplification of geometries to fetch using the specified simplify method
%End



















  private:
    QgsVectorLayerFeatureIterator( const QgsVectorLayerFeatureIterator &rhs );
};



class QgsVectorLayerSelectedFeatureSource : QgsFeatureSource, QgsExpressionContextScopeGenerator
{
%Docstring(signature="appended")
:py:class:`QgsFeatureSource` subclass for the selected features from a :py:class:`QgsVectorLayer`.
%End

%TypeHeaderCode
#include "qgsvectorlayerfeatureiterator.h"
%End
  public:

    QgsVectorLayerSelectedFeatureSource( QgsVectorLayer *layer );
%Docstring
Constructor for QgsVectorLayerSelectedFeatureSource, for selected features from the specified ``layer``.
The currently selected feature IDs are stored, so change to the layer selection after constructing
the QgsVectorLayerSelectedFeatureSource will not be reflected.
%End


    virtual QgsFeatureIterator getFeatures( const QgsFeatureRequest &request = QgsFeatureRequest() ) const;

    virtual QgsCoordinateReferenceSystem sourceCrs() const;

    virtual QgsFields fields() const;

    virtual Qgis::WkbType wkbType() const;

    virtual long long featureCount() const;

    virtual QString sourceName() const;

    virtual QgsExpressionContextScope *createExpressionContextScope() const;

    virtual Qgis::SpatialIndexPresence hasSpatialIndex() const;


  private:
    QgsVectorLayerSelectedFeatureSource( const QgsVectorLayerSelectedFeatureSource &other );
};




/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/vector/qgsvectorlayerfeatureiterator.h                      *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.pl again   *
 ************************************************************************/
