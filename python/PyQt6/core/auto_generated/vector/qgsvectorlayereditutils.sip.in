/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/vector/qgsvectorlayereditutils.h                            *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.py again   *
 ************************************************************************/




class QgsVectorLayerEditUtils
{
%Docstring(signature="appended")
Contains utility functions for editing vector layers.
%End

%TypeHeaderCode
#include "qgsvectorlayereditutils.h"
%End
  public:
    QgsVectorLayerEditUtils( QgsVectorLayer *layer );

    bool insertVertex( double x, double y, QgsFeatureId atFeatureId, int beforeVertex );
%Docstring
Insert a new vertex before the given vertex number,
in the given ring, item (first number is index 0), and feature
Not meaningful for Point geometries
%End

    bool insertVertex( const QgsPoint &point, QgsFeatureId atFeatureId, int beforeVertex );
%Docstring
Inserts a new vertex before the given vertex number,
in the given ring, item (first number is index 0), and feature
Not meaningful for Point geometries
%End

    bool moveVertex( double x, double y, QgsFeatureId atFeatureId, int atVertex );
%Docstring
Moves the vertex at the given position number,
ring and item (first number is index 0), and feature
to the given coordinates
%End

    bool moveVertex( const QgsPoint &p, QgsFeatureId atFeatureId, int atVertex ) /PyName=moveVertexV2/;
%Docstring
Moves the vertex at the given position number,
ring and item (first number is index 0), and feature
to the given coordinates

.. note::

   available in Python bindings as moveVertexV2
%End

    Qgis::VectorEditResult deleteVertex( QgsFeatureId featureId, int vertex );
%Docstring
Deletes a vertex from a feature.

:param featureId: ID of feature to remove vertex from
:param vertex: index of vertex to delete
%End

 Qgis::GeometryOperationResult addRing( const QVector<QgsPointXY> &ring, const QgsFeatureIds &targetFeatureIds = QgsFeatureIds(), QgsFeatureId *modifiedFeatureId = 0 ) /Deprecated/;
%Docstring
Adds a ring to polygon/multipolygon features

:param ring: ring to add
:param targetFeatureIds: if specified, only these features will be the candidates for adding a ring. Otherwise
                         all intersecting features are tested and the ring is added to the first valid feature.
:param modifiedFeatureId: if specified, feature ID for feature that ring was added to will be stored in this parameter

:return: OperationResult result code: success or reason of failure

.. deprecated:: 3.12

   Will be removed in QGIS 4.0. Use the variant which accepts :py:class:`QgsPoint` objects instead of :py:class:`QgsPointXY`.
%End

    Qgis::GeometryOperationResult addRing( const QgsPointSequence &ring, const QgsFeatureIds &targetFeatureIds = QgsFeatureIds(), QgsFeatureId *modifiedFeatureId = 0 );
%Docstring
Adds a ring to polygon/multipolygon features

:param ring: ring to add
:param targetFeatureIds: if specified, only these features will be the candidates for adding a ring. Otherwise
                         all intersecting features are tested and the ring is added to the first valid feature.
:param modifiedFeatureId: if specified, feature ID for feature that ring was added to will be stored in this parameter

:return: OperationResult result code: success or reason of failure
%End

    Qgis::GeometryOperationResult addRingV2( QgsCurve *ring /Transfer/, const QgsFeatureIds &targetFeatureIds = QgsFeatureIds(), QgsFeatureIds *modifiedFeatureIds /Out/ = 0 );
%Docstring
Adds a ring to polygon/multipolygon features

:param ring: ring to add (ownership is transferred)
:param targetFeatureIds: if specified, only these features will be the candidates for adding a ring. Otherwise
                         all intersecting features are tested and the ring is added to all valid features.

:return: - OperationResult result code: success or reason of failure
         - modifiedFeatureIds: feature IDS for features that ring was added to will be stored in this parameter

.. versionadded:: 3.28
%End

    Qgis::GeometryOperationResult addRing( QgsCurve *ring, const QgsFeatureIds &targetFeatureIds = QgsFeatureIds(), QgsFeatureId *modifiedFeatureId = 0 ) /PyName=addCurvedRing/;
%Docstring
Adds a ring to polygon/multipolygon features

:param ring: ring to add
:param targetFeatureIds: if specified, only these features will be the candidates for adding a ring. Otherwise
                         all intersecting features are tested and the ring is added to the first valid feature.
:param modifiedFeatureId: if specified, feature ID for feature that ring was added to will be stored in this parameter

:return: OperationResult result code: success or reason of failure

.. note::

   available in python bindings as addCurvedRing
%End

  Qgis::GeometryOperationResult addPart( const QVector<QgsPointXY> &ring, QgsFeatureId featureId ) /Deprecated/;
%Docstring
Adds a new part polygon to a multipart feature

:return: - :py:class:`QgsGeometry`.Success

         - :py:class:`QgsGeometry`.AddPartSelectedGeometryNotFound
         - :py:class:`QgsGeometry`.AddPartNotMultiGeometry
         - :py:class:`QgsGeometry`.InvalidBaseGeometry
         - :py:class:`QgsGeometry`.InvalidInput

.. deprecated:: 3.12

   Will be removed in QGIS 4.0. Use the variant which accepts :py:class:`QgsPoint` objects instead of :py:class:`QgsPointXY`.
%End

    Qgis::GeometryOperationResult addPart( const QgsPointSequence &ring, QgsFeatureId featureId );
%Docstring
Adds a new part polygon to a multipart feature

:return: - :py:class:`QgsGeometry`.Success

         - :py:class:`QgsGeometry`.AddPartSelectedGeometryNotFound
         - :py:class:`QgsGeometry`.AddPartNotMultiGeometry
         - :py:class:`QgsGeometry`.InvalidBaseGeometry
         - :py:class:`QgsGeometry`.InvalidInput

.. note::

   available in python bindings as addPartV2
%End

    Qgis::GeometryOperationResult addPart( QgsCurve *ring, QgsFeatureId featureId ) /PyName=addCurvedPart/;
%Docstring
Adds a new part polygon to a multipart feature

:return: - :py:class:`QgsGeometry`.Success

         - :py:class:`QgsGeometry`.AddPartSelectedGeometryNotFound
         - :py:class:`QgsGeometry`.AddPartNotMultiGeometry
         - :py:class:`QgsGeometry`.InvalidBaseGeometry
         - :py:class:`QgsGeometry`.InvalidInput

.. note::

   available in python bindings as addCurvedPart
%End

    int translateFeature( QgsFeatureId featureId, double dx, double dy );
%Docstring
Translates feature by dx, dy

:param featureId: id of the feature to translate
:param dx: translation of x-coordinate
:param dy: translation of y-coordinate

:return: 0 in case of success
%End

  Qgis::GeometryOperationResult splitParts( const QVector<QgsPointXY> &splitLine, bool topologicalEditing = false ) /Deprecated/;
%Docstring
Splits parts cut by the given line

:param splitLine: line that splits the layer feature parts
:param topologicalEditing: ``True`` if topological editing is enabled

:return: - :py:class:`QgsGeometry`.InvalidBaseGeometry

         - :py:class:`QgsGeometry`.Success
         - :py:class:`QgsGeometry`.InvalidInput
         - :py:class:`QgsGeometry`.NothingHappened if a selection is present but no feature has been split
         - :py:class:`QgsGeometry`.InvalidBaseGeometry
         - :py:class:`QgsGeometry`.GeometryEngineError
         - :py:class:`QgsGeometry`.SplitCannotSplitPoint

.. deprecated:: 3.12

   Will be removed in QGIS 4.0. Use the variant which accepts :py:class:`QgsPoint` objects instead of :py:class:`QgsPointXY`.
%End

    Qgis::GeometryOperationResult splitParts( const QgsPointSequence &splitLine, bool topologicalEditing = false );
%Docstring
Splits parts cut by the given line

:param splitLine: line that splits the layer feature parts
:param topologicalEditing: ``True`` if topological editing is enabled

:return: - :py:class:`QgsGeometry`.InvalidBaseGeometry

         - :py:class:`QgsGeometry`.Success
         - :py:class:`QgsGeometry`.InvalidInput
         - :py:class:`QgsGeometry`.NothingHappened if a selection is present but no feature has been split
         - :py:class:`QgsGeometry`.InvalidBaseGeometry
         - :py:class:`QgsGeometry`.GeometryEngineError
         - :py:class:`QgsGeometry`.SplitCannotSplitPoint
%End

  Qgis::GeometryOperationResult splitFeatures( const QVector<QgsPointXY> &splitLine, bool topologicalEditing = false ) /Deprecated/;
%Docstring
Splits features cut by the given line

:param splitLine: line that splits the layer features
:param topologicalEditing: ``True`` if topological editing is enabled

:return: :py:class:`QgsGeometry`.OperationResult

.. deprecated:: 3.12

   Will be removed in QGIS 4.0. Use the variant which accepts :py:class:`QgsPoint` objects instead of :py:class:`QgsPointXY`.
%End

    Qgis::GeometryOperationResult splitFeatures( const QgsPointSequence &splitLine, bool topologicalEditing = false );
%Docstring
Splits features cut by the given line

:param splitLine: line that splits the layer features
:param topologicalEditing: ``True`` if topological editing is enabled

:return: :py:class:`QgsGeometry`.OperationResult
%End

    Qgis::GeometryOperationResult splitFeatures( const QgsCurve *curve, QgsPointSequence &topologyTestPoints /Out/, bool preserveCircular = false, bool topologicalEditing = false );
%Docstring
Splits features cut by the given curve

:param curve: line that splits the layer features
:param preserveCircular: whether circular strings are preserved after splitting
:param topologicalEditing: ``True`` if topological editing is enabled

:return: - :py:class:`QgsGeometry`.OperationResult
         - topologyTestPoints: topological points to be tested against other layers

.. versionadded:: 3.16
%End

    int addTopologicalPoints( const QgsGeometry &geom );
%Docstring
Adds topological points for every vertex of the geometry.

:param geom: the geometry where each vertex is added to segments of other features

:return: 0 in case of success

:return: 1 in case of error

:return: 2 in case no vertices needed to be added

.. note::

   geom is not going to be modified by the function
%End

    int addTopologicalPoints( const QgsPointXY &p );
%Docstring
Adds a vertex to segments which intersect point ``p`` but don't
already have a vertex there. If a feature already has a vertex at position p,
no additional vertex is inserted. This method is useful for topological
editing.

:return: 0 in case of success

:return: 1 in case of error

:return: 2 in case no vertices needed to be added
%End

    int addTopologicalPoints( const QgsPoint &p );
%Docstring
Adds a vertex to segments which intersect point ``p`` but don't
already have a vertex there. If a feature already has a vertex at position p,
no additional vertex is inserted. This method is useful for topological
editing.

:return: 0 in case of success

:return: 1 in case of error

:return: 2 in case no vertices needed to be added

.. versionadded:: 3.10
%End

    int addTopologicalPoints( const QgsPointSequence &ps );
%Docstring
Adds a vertex to segments which intersect point ``p`` but don't
already have a vertex there. If a feature already has a vertex at position p,
no additional vertex is inserted. This method is useful for topological
editing.

:return: 0 in case of success

:return: 1 in case of error

:return: 2 in case vertex already exists or point does not intersect segment

.. versionadded:: 3.16
%End

    bool mergeFeatures( const QgsFeatureId &targetFeatureId, const QgsFeatureIds &mergeFeatureIds, const QgsAttributes &mergeAttributes, const QgsGeometry &unionGeometry, QString &errorMessage /Out/ );
%Docstring
Merge features into a single one.

:param targetFeatureId: id of the target feature (will be updated)
:param mergeFeatureIds: id list of features to merge (will be deleted)
:param mergeAttributes: are the resulting attributes in the merged feature
:param unionGeometry: is the resulting geometry of the merged feature

:return: - ``True`` if the merge was successful, or ``False`` if the operation failed.
         - errorMessage: a descriptive error message if any occurs

.. versionadded:: 3.30
%End

};

/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/vector/qgsvectorlayereditutils.h                            *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.py again   *
 ************************************************************************/
