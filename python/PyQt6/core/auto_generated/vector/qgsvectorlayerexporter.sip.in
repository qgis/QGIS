/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/vector/qgsvectorlayerexporter.h                             *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.py again   *
 ************************************************************************/






class QgsVectorLayerExporter : QgsFeatureSink
{
%Docstring(signature="appended")
A convenience class for exporting vector layers to a destination data provider.

:py:class:`QgsVectorLayerExporter` can be used in two ways:

- Using a static call to :py:class:`QgsVectorLayerExporter`.exportLayer(...) which exports the
  entire layer to the destination provider.
- Create an instance of the class and issue calls to addFeature(...)
%End

%TypeHeaderCode
#include "qgsvectorlayerexporter.h"
%End
  public:


    static Qgis::VectorExportResult exportLayer( QgsVectorLayer *layer,
        const QString &uri,
        const QString &providerKey,
        const QgsCoordinateReferenceSystem &destCRS,
        bool onlySelected = false,
        QString *errorMessage /Out/ = 0,
        const QMap<QString, QVariant> &options = QMap<QString, QVariant>(),
        QgsFeedback *feedback = 0 );
%Docstring
Writes the contents of vector layer to a different datasource.

:param layer: source layer
:param uri: URI for destination data source
:param providerKey: string key for destination data provider
:param destCRS: destination CRS, or an invalid (default constructed) CRS if
                not available
:param onlySelected: set to ``True`` to export only selected features
:param options: optional provider dataset options
:param feedback: optional feedback object to show progress and cancellation of export

:return: - NoError for a successful export, or encountered error
         - errorMessage: if non-null, any error messages
%End

    QgsVectorLayerExporter( const QString &uri,
                            const QString &provider,
                            const QgsFields &fields,
                            Qgis::WkbType geometryType,
                            const QgsCoordinateReferenceSystem &crs,
                            bool overwrite = false,
                            const QMap<QString, QVariant> &options = QMap<QString, QVariant>(),
                            QgsFeatureSink::SinkFlags sinkFlags = QgsFeatureSink::SinkFlags() );
%Docstring
Constructor for QgsVectorLayerExporter.

:param uri: URI for destination data source
:param provider: string key for destination data provider
:param fields: fields to include in created layer
:param geometryType: destination geometry type
:param crs: desired CRS, or an invalid (default constructed) CRS if
            not available
:param overwrite: set to ``True`` to overwrite any existing data source
:param options: optional provider dataset options
:param sinkFlags: for how to add features
%End


    Qgis::VectorExportResult errorCode() const;
%Docstring
Returns any encountered error code, or ``False`` if no error was encountered.

.. seealso:: :py:func:`errorMessage`

.. seealso:: :py:func:`errorCount`
%End

    QString errorMessage() const;
%Docstring
Returns any error message encountered during the export.

.. seealso:: :py:func:`errorCount`

.. seealso:: :py:func:`errorCode`
%End

    int errorCount() const;
%Docstring
Returns the number of error messages encountered during the export.

.. seealso:: :py:func:`errorMessage`

.. seealso:: :py:func:`errorCode`
%End

    Qgis::VectorDataProviderAttributeEditCapabilities attributeEditCapabilities() const;
%Docstring
Returns the attribute capabilities of the exporter.

.. versionadded:: 3.32
%End

    virtual bool addFeatures( QgsFeatureList &features, QgsFeatureSink::Flags flags = QgsFeatureSink::Flags() );

    virtual bool addFeature( QgsFeature &feature, QgsFeatureSink::Flags flags = QgsFeatureSink::Flags() );

    virtual QString lastError() const;


    ~QgsVectorLayerExporter();

    virtual bool flushBuffer();


  private:
    QgsVectorLayerExporter( const QgsVectorLayerExporter &rh );
};


class QgsVectorLayerExporterTask : QgsTask
{
%Docstring(signature="appended")
:py:class:`QgsTask` task which performs a :py:class:`QgsVectorLayerExporter` layer export operation as a background
task. This can be used to export a vector layer out to a provider without blocking the
QGIS interface.

.. seealso:: :py:class:`QgsVectorFileWriterTask`

.. seealso:: :py:class:`QgsRasterFileWriterTask`
%End

%TypeHeaderCode
#include "qgsvectorlayerexporter.h"
%End
  public:

    QgsVectorLayerExporterTask( QgsVectorLayer *layer,
                                const QString &uri,
                                const QString &providerKey,
                                const QgsCoordinateReferenceSystem &destinationCrs,
                                const QMap<QString, QVariant> &options = QMap<QString, QVariant>(),
                                bool ownsLayer = false );
%Docstring
Constructor for QgsVectorLayerExporterTask. Takes a source ``layer``, destination ``uri``
and ``providerKey``, and various export related parameters such as destination CRS
and export ``options``. ``ownsLayer`` has to be set to ``True`` if the task should take ownership
of the layer and delete it after export.
%End

    static QgsVectorLayerExporterTask *withLayerOwnership( QgsVectorLayer *layer /Transfer/,
        const QString &uri,
        const QString &providerKey,
        const QgsCoordinateReferenceSystem &destinationCrs,
        const QMap<QString, QVariant> &options = QMap<QString, QVariant>() ) /Factory/;
%Docstring
Creates a new QgsVectorLayerExporterTask which has ownership over a source ``layer``.
When the export task has completed (successfully or otherwise) ``layer`` will be
deleted. The destination ``uri`` and ``providerKey``, and various export related parameters such as destination CRS
and export ``options`` must be specified.
%End

    virtual void cancel();


  signals:

    void exportComplete();
%Docstring
Emitted when exporting the layer is successfully completed.
%End

    void errorOccurred( Qgis::VectorExportResult error, const QString &errorMessage );
%Docstring
Emitted when an error occurs which prevented the layer being exported (or if
the task is canceled). The export ``error`` and ``errorMessage`` will be reported.
%End

  protected:

    virtual bool run();

    virtual void finished( bool result );


};

/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/vector/qgsvectorlayerexporter.h                             *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.py again   *
 ************************************************************************/
