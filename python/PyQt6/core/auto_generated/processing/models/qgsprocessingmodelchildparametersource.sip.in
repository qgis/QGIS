/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/processing/models/qgsprocessingmodelchildparametersource.h  *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.py again   *
 ************************************************************************/





class QgsProcessingModelChildParameterSource
{
%Docstring(signature="appended")
Source for the value of a parameter for a child algorithm within a model.
%End

%TypeHeaderCode
#include "qgsprocessingmodelchildparametersource.h"
%End
  public:

    QgsProcessingModelChildParameterSource();
%Docstring
Constructor for QgsProcessingModelChildParameterSource. It is recommended that the static methods
:py:func:`~QgsProcessingModelChildParameterSource.fromStaticValue`, :py:func:`~QgsProcessingModelChildParameterSource.fromModelParameter`, :py:func:`~QgsProcessingModelChildParameterSource.fromChildOutput` and :py:func:`~QgsProcessingModelChildParameterSource.fromExpression` are used instead.
%End

    bool operator==( const QgsProcessingModelChildParameterSource &other ) const;
    bool operator!=( const QgsProcessingModelChildParameterSource &other ) const;

    static QgsProcessingModelChildParameterSource fromStaticValue( const QVariant &value );
%Docstring
Returns a new QgsProcessingModelChildParameterSource which takes its value from a static ``value``.

.. seealso:: :py:func:`fromModelParameter`

.. seealso:: :py:func:`fromChildOutput`

.. seealso:: :py:func:`fromExpression`

.. seealso:: :py:func:`fromExpressionText`
%End

    static QgsProcessingModelChildParameterSource fromModelParameter( const QString &parameterName );
%Docstring
Returns a new QgsProcessingModelChildParameterSource which takes its value from a parent model parameter.

.. seealso:: :py:func:`fromStaticValue`

.. seealso:: :py:func:`fromChildOutput`

.. seealso:: :py:func:`fromExpression`

.. seealso:: :py:func:`fromExpressionText`
%End

    static QgsProcessingModelChildParameterSource fromChildOutput( const QString &childId, const QString &outputName );
%Docstring
Returns a new QgsProcessingModelChildParameterSource which takes its value from an output generated by a child algorithm.

.. seealso:: :py:func:`fromStaticValue`

.. seealso:: :py:func:`fromModelParameter`

.. seealso:: :py:func:`fromExpression`

.. seealso:: :py:func:`fromExpressionText`
%End

    static QgsProcessingModelChildParameterSource fromExpression( const QString &expression );
%Docstring
Returns a new QgsProcessingModelChildParameterSource which takes its value from an expression. The expression
is evaluated just before the child algorithm executes, and can use functions available
in its expression context to include results calculated from the child algorithms already
executed by the model.

.. seealso:: :py:func:`fromStaticValue`

.. seealso:: :py:func:`fromChildOutput`

.. seealso:: :py:func:`fromModelParameter`

.. seealso:: :py:func:`fromExpressionText`

.. versionadded:: 3.2
%End

    static QgsProcessingModelChildParameterSource fromExpressionText( const QString &text );
%Docstring
Returns a new QgsProcessingModelChildParameterSource which takes its
value from a text with expressions. Expressions are evaluated just before
the child algorithm executes, and can use functions available
in its expression context to include results calculated from the child
algorithms already executed by the model.

.. seealso:: :py:func:`fromStaticValue`

.. seealso:: :py:func:`fromChildOutput`

.. seealso:: :py:func:`fromModelParameter`

.. seealso:: :py:func:`fromExpression`

.. versionadded:: 3.2
%End

    Qgis::ProcessingModelChildParameterSource source() const;
%Docstring
Returns the parameter value's source.
%End

    void setSource( Qgis::ProcessingModelChildParameterSource source );
%Docstring
Sets the parameter's source.

.. versionadded:: 3.14
%End

    QVariant staticValue() const;
%Docstring
Returns the source's static value. This is only used when the :py:func:`~QgsProcessingModelChildParameterSource.source` is StaticValue.

.. seealso:: :py:func:`setStaticValue`
%End

    void setStaticValue( const QVariant &value );
%Docstring
Sets the source's static value. Calling this will also change the :py:func:`~QgsProcessingModelChildParameterSource.source` to StaticValue.

.. seealso:: :py:func:`staticValue`
%End

    QString parameterName() const;
%Docstring
Returns the source's model parameter name. This is only used when the :py:func:`~QgsProcessingModelChildParameterSource.source` is ModelParameter.

.. seealso:: :py:func:`setParameterName`
%End

    void setParameterName( const QString &name );
%Docstring
Sets the source's model parameter ``name``. Calling this will also change the :py:func:`~QgsProcessingModelChildParameterSource.source` to ModelParameter.

.. seealso:: :py:func:`parameterName`
%End

    QString outputChildId() const;
%Docstring
Returns the source's child algorithm ID from which the output value will be taken. This is only used when the :py:func:`~QgsProcessingModelChildParameterSource.source` is ChildOutput.

.. seealso:: :py:func:`setOutputChildId`

.. seealso:: :py:func:`outputName`
%End

    void setOutputChildId( const QString &id );
%Docstring
Sets the source's child algorithm ``id`` from which the output value will be taken. Calling this will also change the :py:func:`~QgsProcessingModelChildParameterSource.source` to ChildOutput.

.. seealso:: :py:func:`parameterName`

.. seealso:: :py:func:`setOutputName`
%End

    QString outputName() const;
%Docstring
Returns the source's child algorithm output name from which the output value will be taken. This is only used when the :py:func:`~QgsProcessingModelChildParameterSource.source` is ChildOutput.

.. seealso:: :py:func:`setOutputName`

.. seealso:: :py:func:`outputChildId`
%End

    void setOutputName( const QString &name );
%Docstring
Sets the source's child algorithm output ``name`` from which the output value will be taken. Calling this will also change the :py:func:`~QgsProcessingModelChildParameterSource.source` to ChildOutput.

.. seealso:: :py:func:`outputName`

.. seealso:: :py:func:`setOutputChildId`
%End

    QString expression() const;
%Docstring
Returns the source's expression. This is only used when the :py:func:`~QgsProcessingModelChildParameterSource.source` is Expression.

.. seealso:: :py:func:`setExpression`
%End

    void setExpression( const QString &expression );
%Docstring
Sets the source's expression. Calling this will also change the :py:func:`~QgsProcessingModelChildParameterSource.source` to Expression.
The expression is evaluated just before the child algorithm executes, and can use functions available
in its expression context to include results calculated from the child algorithms already
executed by the model.

.. seealso:: :py:func:`expression`
%End

    QString expressionText() const;
%Docstring
Returns the source's text with expressions. This is only used when the
:py:func:`~QgsProcessingModelChildParameterSource.source` is ExpressionText.

.. seealso:: :py:func:`setExpressionText`

.. versionadded:: 3.2
%End

    void setExpressionText( const QString &text );
%Docstring
Sets the source's text containing expressions. Calling this will also
change the :py:func:`~QgsProcessingModelChildParameterSource.source` to ExpressionText. Expressions are evaluated just
before the child algorithm executes, and can use functions available
in its expression context to include results calculated from the child
algorithms already executed by the model.

.. seealso:: :py:func:`expressionText`

.. versionadded:: 3.2
%End

    QVariant toVariant() const;
%Docstring
Saves this source to a QVariant.

.. seealso:: :py:func:`loadVariant`
%End

    bool loadVariant( const QVariantMap &map );
%Docstring
Loads this source from a QVariantMap.

.. seealso:: :py:func:`toVariant`
%End

    QString asPythonCode( QgsProcessing::PythonOutputType outputType, const QgsProcessingParameterDefinition *definition, const QMap< QString, QString > &friendlyChildNames ) const;
%Docstring
Attempts to convert the source to executable Python code.

The ``friendlyChildNames`` argument gives a map of child id to a friendly algorithm name, to be used in the code to identify that algorithm instead of the raw child id.
%End

    QString asPythonComment( const QgsProcessingParameterDefinition *definition ) const;
%Docstring
Returns an explanatory Python comment for the source, or an empty string if no comment is available.

.. versionadded:: 3.20
%End

    QString friendlyIdentifier( QgsProcessingModelAlgorithm *model ) const;
%Docstring
Returns a user-friendly identifier for this source, given the context of the specified ``model``.

.. versionadded:: 3.14
%End

};




/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/processing/models/qgsprocessingmodelchildparametersource.h  *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.py again   *
 ************************************************************************/
