/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/layertree/qgslayertreecustomnode.h                          *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.py again   *
 ************************************************************************/




class QgsLayerTreeCustomNode : QgsLayerTreeNode
{
%Docstring(signature="appended")
Layer tree custom node serves as a node for objects that are not layers
nor groups.

They are created, and can be found based on a node ID, which should be
unique in the whole layer tree.

.. versionadded:: 4.0
%End

%TypeHeaderCode
#include "qgslayertreecustomnode.h"
%End
  public:

    explicit QgsLayerTreeCustomNode( const QString &nodeId, const QString &nodeName = QString(), bool checked = true );
%Docstring
Constructor to create custom nodes that represent application objects
other than layers and groups.

:param nodeId: Unique identifier of the custom node.
:param nodeName: Optional name of the custom node.
:param checked: Whether the custom node should be checked or not once it
                is created.
%End


    SIP_PYOBJECT __repr__();
%MethodCode
    QString str = QStringLiteral( "<QgsLayerTreeCustomNode: %1>" ).arg( sipCpp->name() );
    sipRes = PyUnicode_FromString( str.toUtf8().constData() );
%End

    QString nodeId() const;
%Docstring
Returns the node's unique identifier.
%End
    virtual QString name() const;

%Docstring
Returns the node's name.
%End

    virtual void setName( const QString &name );

%Docstring
Sets the node's name.
%End

    static QgsLayerTreeCustomNode *readXml( const QDomElement &element, const QgsReadWriteContext &context ) /Factory/;
%Docstring
Read custom node from XML element <layer-tree-custom-node> and return
the newly created node (or ``None`` on error).
%End

    virtual void writeXml( QDomElement &parentElement, const QgsReadWriteContext &context );

%Docstring
Write custom node as XML element <layer-tree-custom-node> and add it to
the given parent element.
%End

    virtual QString dump() const;


    virtual QgsLayerTreeCustomNode *clone() const /Factory/;


    virtual void resolveReferences( const QgsProject *project, bool looseMatching = false );


  private:

    QgsLayerTreeCustomNode( const QgsLayerTreeCustomNode &other );
%Docstring
Copies are not allowed
%End
};

/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/layertree/qgslayertreecustomnode.h                          *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.py again   *
 ************************************************************************/
