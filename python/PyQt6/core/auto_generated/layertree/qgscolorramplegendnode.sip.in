/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/layertree/qgscolorramplegendnode.h                          *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.py again   *
 ************************************************************************/




class QgsColorRampLegendNode : QgsLayerTreeModelLegendNode
{
%Docstring(signature="appended")
A legend node which renders a color ramp.

.. versionadded:: 3.18
%End

%TypeHeaderCode
#include "qgscolorramplegendnode.h"
%End
  public:

    QgsColorRampLegendNode( QgsLayerTreeLayer *nodeLayer, QgsColorRamp *ramp /Transfer/,
                            const QString &minimumLabel, const QString &maximumLabel, QObject *parent /TransferThis/ = 0,
                            const QString &key = QString(), const QString &parentKey = QString() );
%Docstring
Constructor for QgsColorRampLegendNode.

:param nodeLayer: layer node
:param ramp: color ramp to render in node. Ownership is transferred to the node.
:param minimumLabel: label text to render for the minimum value in the ramp
:param maximumLabel: label text to render for the maximum value in the ramp
:param parent: attach a parent QObject to the legend node.
:param key: rule key. optional identifier to allow a unique ID to be assigned to the node by a renderer (since QGIS 3.40)
:param parentKey: rule key of parent (since QGIS 3.40)
%End

    QgsColorRampLegendNode( QgsLayerTreeLayer *nodeLayer, QgsColorRamp *ramp /Transfer/,
                            const QgsColorRampLegendNodeSettings &settings, double minimumValue,
                            double maximumValue, QObject *parent /TransferThis/ = 0,
                            const QString &key = QString(), const QString &parentKey = QString() );
%Docstring
Constructor for QgsColorRampLegendNode.

:param nodeLayer: layer node
:param ramp: color ramp to render in node. Ownership is transferred to the node.
:param settings: node settings
:param minimumValue: value associated with minimum of ramp
:param maximumValue: value associated with maximum of ramp
:param parent: attach a parent QObject to the legend node.
:param key: rule key. optional identifier to allow a unique ID to be assigned to the node by a renderer (since QGIS 3.40)
:param parentKey: rule key of parent (since QGIS 3.40)
%End


    virtual QVariant data( int role ) const;

    virtual QSizeF drawSymbol( const QgsLegendSettings &settings, ItemContext *ctx, double itemHeight ) const;

    virtual QSizeF drawSymbolText( const QgsLegendSettings &settings, ItemContext *ctx, QSizeF symbolSize ) const;

    virtual QJsonObject exportSymbolToJson( const QgsLegendSettings &settings, const QgsRenderContext &context ) const;


    void setIconSize( QSize size );
%Docstring
Set the icon ``size``, which controls how large the ramp will render in a layer tree widget.

.. seealso:: :py:func:`iconSize`
%End

    QSize iconSize() const;
%Docstring
Returns the icon size, which is how large the ramp will render in a layer tree widget.

.. seealso:: :py:func:`setIconSize`
%End

    const QgsColorRamp *ramp() const;
%Docstring
Returns the color ramp used by the node.
%End

    QgsColorRampLegendNodeSettings settings() const;
%Docstring
Returns the node's settings.

.. seealso:: :py:func:`setSettings`
%End

    void setSettings( const QgsColorRampLegendNodeSettings &settings );
%Docstring
Sets the node's ``settings``.

.. seealso:: :py:func:`settings`
%End

};



/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/layertree/qgscolorramplegendnode.h                          *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.py again   *
 ************************************************************************/
