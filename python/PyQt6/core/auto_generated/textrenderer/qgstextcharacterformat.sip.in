/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/textrenderer/qgstextcharacterformat.h                       *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.py again   *
 ************************************************************************/





class QgsTextCharacterFormat
{
%Docstring(signature="appended")
Stores information relating to individual character formatting.

These options encapsulate formatting options which override the default
settings from a :py:class:`QgsTextFormat` for individual characters (or sets of characters).

.. warning::

   This API is not considered stable and may change in future QGIS versions.

.. versionadded:: 3.14
%End

%TypeHeaderCode
#include "qgstextcharacterformat.h"
%End
  public:

    QgsTextCharacterFormat();

    QgsTextCharacterFormat( const QTextCharFormat &format );
%Docstring
Constructor for QgsTextCharacterFormat, based on the specified QTextCharFormat ``format``.
%End

    enum class BooleanValue
    {
      NotSet,
      SetTrue,
      SetFalse,
    };

    void overrideWith( const QgsTextCharacterFormat &other );
%Docstring
Override all the default/unset properties of the current character format
with the settings from another format.

This will replace any default/unset existing settings with the
settings from ``other``.

Any settings which are default/unset in ``other`` will be left unchanged.

:param other: The format to override with.

.. versionadded:: 3.36
%End

    QColor textColor() const;
%Docstring
Returns the character's text color, or an invalid color if no color override
is set and the default format color should be used.

.. seealso:: :py:func:`setTextColor`
%End

    void setTextColor( const QColor &textColor );
%Docstring
Sets the character's text ``color``.

Set ``color`` to an invalid color if no color override
is desired and the default format color should be used.

.. seealso:: :py:func:`textColor`
%End

    double fontPointSize() const;
%Docstring
Returns the font point size, or -1 if the font size is not set
and should be inherited.

.. seealso:: :py:func:`setFontPointSize`

.. versionadded:: 3.28
%End

    void setFontPointSize( double size );
%Docstring
Sets the font point ``size``.

Set ``size`` to -1 if the font size is not set
and should be inherited.

.. seealso:: :py:func:`fontPointSize`

.. versionadded:: 3.28
%End

    QString family() const;
%Docstring
Returns the font family name, or an empty string if the
family is not set and should be inherited.

.. seealso:: :py:func:`setFamily`

.. versionadded:: 3.28
%End

    void setFamily( const QString &family );
%Docstring
Sets the font ``family`` name.

Set to an empty string if the family should be inherited.

.. seealso:: :py:func:`family`

.. versionadded:: 3.28
%End

    int fontWeight() const;
%Docstring
Returns the font weight, or -1 if the font weight is not set
and should be inherited.

.. seealso:: :py:func:`setFontWeight`

.. versionadded:: 3.28
%End

    void setFontWeight( int fontWeight );
%Docstring
Sets the font ``weight``.

Set ``weight`` to -1 if the font weight is not set
and should be inherited.

.. seealso:: :py:func:`fontWeight`

.. versionadded:: 3.28
%End

    double wordSpacing() const;
%Docstring
Returns the font word spacing, in points, or NaN if word spacing is not set and should be inherited.

.. seealso:: :py:func:`setWordSpacing`

.. versionadded:: 3.40
%End

    void setWordSpacing( double spacing );
%Docstring
Sets the font word ``spacing``, in points, or NaN if word spacing is not set and should be inherited.

.. seealso:: :py:func:`wordSpacing`

.. versionadded:: 3.40
%End

    BooleanValue italic() const;
%Docstring
Returns whether the format has italic enabled.

.. seealso:: :py:func:`setItalic`

.. versionadded:: 3.28
%End

    void setItalic( BooleanValue enabled );
%Docstring
Sets whether the format has italic ``enabled``.

.. seealso:: :py:func:`italic`

.. versionadded:: 3.28
%End

    BooleanValue strikeOut() const;
%Docstring
Returns whether the format has strikethrough enabled.

.. seealso:: :py:func:`setStrikeOut`
%End

    void setStrikeOut( BooleanValue enabled );
%Docstring
Sets whether the format has strikethrough ``enabled``.

.. seealso:: :py:func:`strikeOut`
%End

    BooleanValue underline() const;
%Docstring
Returns whether the format has underline enabled.

.. seealso:: :py:func:`setUnderline`
%End

    void setUnderline( BooleanValue enabled );
%Docstring
Sets whether the format has underline ``enabled``.

.. seealso:: :py:func:`underline`
%End

    BooleanValue overline() const;
%Docstring
Returns whether the format has overline enabled.

.. seealso:: :py:func:`setUnderline`
%End

    void setOverline( BooleanValue enabled );
%Docstring
Sets whether the format has overline ``enabled``.

.. seealso:: :py:func:`overline`
%End

    bool hasVerticalAlignmentSet() const;
%Docstring
Returns ``True`` if the format has an explicit vertical alignment set.

If ``False`` is returned then the vertical alignment will be inherited.

.. seealso:: :py:func:`setHasVerticalAlignmentSet`

.. seealso:: :py:func:`verticalAlignment`

.. versionadded:: 3.30
%End

    void setHasVerticalAlignmentSet( bool set );
%Docstring
Sets whether the format has an explicit vertical alignment ``set``.

If ``set`` is ``False`` then the vertical alignment will be inherited.

.. seealso:: :py:func:`hasVerticalAlignmentSet`

.. seealso:: :py:func:`setVerticalAlignment`

.. versionadded:: 3.30
%End

    Qgis::TextCharacterVerticalAlignment verticalAlignment() const;
%Docstring
Returns the format vertical alignment.

This property is only respected if :py:func:`~QgsTextCharacterFormat.hasVerticalAlignmentSet` is ``True``.

.. seealso:: :py:func:`hasVerticalAlignmentSet`

.. seealso:: :py:func:`setVerticalAlignment`

.. versionadded:: 3.30
%End

    void setVerticalAlignment( Qgis::TextCharacterVerticalAlignment alignment );
%Docstring
Sets the format vertical ``alignment``.

This property is only respected if :py:func:`~QgsTextCharacterFormat.hasVerticalAlignmentSet` is ``True``.

.. seealso:: :py:func:`hasVerticalAlignmentSet`

.. seealso:: :py:func:`verticalAlignment`

.. versionadded:: 3.30
%End

    void updateFontForFormat( QFont &font, const QgsRenderContext &context, double scaleFactor = 1.0 ) const;
%Docstring
Updates the specified ``font`` in place, applying character formatting options which
are applicable on a font level when rendered in the given ``context``.

The optional ``scaleFactor`` parameter can specify a font size scaling factor. It is recommended to set this to
:py:func:`QgsTextRenderer.calculateScaleFactorForFormat()` and then manually calculations
based on the resultant font metrics. Failure to do so will result in poor quality text rendering
at small font sizes.
%End

};

/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/textrenderer/qgstextcharacterformat.h                       *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.py again   *
 ************************************************************************/
