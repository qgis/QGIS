/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/layout/qgslayoutitemchart.h                                 *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.py again   *
 ************************************************************************/




class QgsLayoutItemChart : QgsLayoutItem
{
%Docstring(signature="appended")
A layout item subclass that renders chart plots.

.. versionadded:: 4.0
%End

%TypeHeaderCode
#include "qgslayoutitemchart.h"
%End
  public:

    class SeriesDetails
{
%Docstring(signature="appended")
Chart series details covering all supported series types.

.. note::

   this class is experimental and therefore is not considered as stable API, it may
   change in the future as more chart plot types are implemented.

.. versionadded:: 4.0
%End

%TypeHeaderCode
#include "qgslayoutitemchart.h"
%End
      public:

        explicit SeriesDetails( const QString &name = QString() );
%Docstring
Constructor for SeriesDetails with an optional ``name`` parameter to
provide a name string to the series.
%End

        bool operator==( const SeriesDetails &other ) const;

        QString name() const;
%Docstring
Returns the series name.
%End

        void setName( const QString &name );
%Docstring
Sets the series name.
%End

        QString xExpression() const;
%Docstring
Returns the expression used to generate X-axis values. If the associated
chart X axis type is set to :py:class:`Qgis`.PlotAxisType.Categorical,
the generated values will be converted to strings. For
:py:class:`Qgis`.PlotAxisType.Interval, the generated values will be
converted to double.
%End

        void setXExpression( const QString &xExpression );
%Docstring
Sets the expression used to generate X-axis values. If the associated
chart X axis type is set to :py:class:`Qgis`.PlotAxisType.Categorical,
the generated values will be converted to strings. For
:py:class:`Qgis`.PlotAxisType.Interval, the generated values will be
converted to double.
%End

        QString yExpression() const;
%Docstring
Returns the expression used to generate Y-axis values. The generated
values will be converted to double.
%End

        void setYExpression( const QString &yExpression );
%Docstring
Sets the expression used to generate Y-axis values. The generated values
will be converted to double.
%End

        QString filterExpression() const;
%Docstring
Returns the filter expression used to generate a series against a subset
of the source layer.
%End

        void setFilterExpression( const QString &filterExpression );
%Docstring
Sets the filter expression used to generate a series against a subset of
the source layer.
%End

    };

    QgsLayoutItemChart( QgsLayout *layout );
%Docstring
Constructor for QgsLayoutItemChart, with the specified parent
``layout``.
%End

    virtual int type() const;

    virtual QIcon icon() const;


    void setPlot( QgsPlot *plot /Transfer/ );
%Docstring
Sets the ``plot`` used to render the chart.

Ownership is transferred to the item.
%End

    QgsPlot *plot();
%Docstring
Returns the plot used to render the chart.
%End

    void setSourceLayer( QgsVectorLayer *layer );
%Docstring
Sets the source vector ``layer`` from which the plot data wil be
gathered from.

.. seealso:: :py:func:`sourceLayer`
%End

    QgsVectorLayer *sourceLayer() const;
%Docstring
Returns the source vector layer from which the plot data will be
gathered from.

.. seealso:: :py:func:`setSourceLayer`
%End

    void setSortFeatures( bool sorted );
%Docstring
Sets whether features should be ``sorted`` when iterating through the
vector layer from which the plot data wil be gathered from.

.. seealso:: :py:func:`setSortAscending`

.. seealso:: :py:func:`setSortExpression`

.. seealso:: :py:func:`sortFeatures`
%End

    bool sortFeatures() const;
%Docstring
Returns ``True`` if features should be sorted when iterating through the
vector layer from which the plot data wil be gathered from.

.. seealso:: :py:func:`sortAscending`

.. seealso:: :py:func:`sortExpression`

.. seealso:: :py:func:`setSortFeatures`
%End

    void setSortAscending( bool ascending );
%Docstring
Sets whether features should be sorted in an ``ascending`` order when
iterating through the vector layer from which the plot data wil be
gathered from.

This property has no effect is
:py:func:`~QgsLayoutItemChart.sortFeatures` is ``False``.

.. seealso:: :py:func:`setSortFeatures`

.. seealso:: :py:func:`setSortExpression`

.. seealso:: :py:func:`sortAscending`
%End

    bool sortAscending() const;
%Docstring
Returns ``True`` if features should be sorted in an ascending order when
iterating through the vector layer from which the plot data wil be
gathered from.

This property has no effect is
:py:func:`~QgsLayoutItemChart.sortFeatures` is ``False``.

.. seealso:: :py:func:`sortFeatures`

.. seealso:: :py:func:`sortExpression`

.. seealso:: :py:func:`setSortAscending`
%End

    void setSortExpression( const QString &expression );
%Docstring
Sets the ``expression`` used to sort features when iterating through the
vector layer from which the plot data wil be gathered from.

.. seealso:: :py:func:`setSortFeatures`

.. seealso:: :py:func:`setSortAscending`

.. seealso:: :py:func:`sortExpression`
%End

    QString sortExpression() const;
%Docstring
Returns the expression used to sort features when iterating through the
vector layer from which the plot data wil be gathered from.

.. seealso:: :py:func:`sortFeatures`

.. seealso:: :py:func:`sortAscending`

.. seealso:: :py:func:`setSortExpression`
%End

    void setSeriesList( const QList<QgsLayoutItemChart::SeriesDetails> &seriesList );
%Docstring
Sets the plot series details used to generate the plot data.

.. seealso:: :py:func:`seriesList`
%End

    QList<QgsLayoutItemChart::SeriesDetails> seriesList() const;
%Docstring
Returns the plot series details used to generate the plot data.

.. seealso:: :py:func:`setSeriesList`
%End

    static QgsLayoutItemChart *create( QgsLayout *layout ) /Factory/;
%Docstring
Returns a new chart item for the specified ``layout``.

The caller takes responsibility for deleting the returned object.
%End

    virtual void paint( QPainter *painter, const QStyleOptionGraphicsItem *itemStyle, QWidget *pWidget );


  public slots:

    virtual void refresh();


  protected:

    virtual void draw( QgsLayoutItemRenderContext &context );

    virtual bool writePropertiesToElement( QDomElement &element, QDomDocument &document, const QgsReadWriteContext &context ) const;

    virtual bool readPropertiesFromElement( const QDomElement &element, const QDomDocument &document, const QgsReadWriteContext &context );


};

/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/layout/qgslayoutitemchart.h                                 *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.py again   *
 ************************************************************************/
