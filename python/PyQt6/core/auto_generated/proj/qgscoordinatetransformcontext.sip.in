/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/proj/qgscoordinatetransformcontext.h                        *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.pl again   *
 ************************************************************************/







class QgsCoordinateTransformContext
{
%Docstring(signature="appended")
Contains information about the context in which a coordinate transform is executed.

The context stores various information regarding which coordinate operations should
be used when transforming points from a source to destination coordinate reference
system.

.. note::

   :py:class:`QgsCoordinateTransformContext` objects are thread safe for read and write.

.. note::

   :py:class:`QgsCoordinateTransformContext` objects are implicitly shared.


.. seealso:: :py:class:`QgsDatumTransform`

.. seealso:: :py:class:`QgsCoordinateTransform`
%End

%TypeHeaderCode
#include "qgscoordinatetransformcontext.h"
%End
  public:

    QgsCoordinateTransformContext();
%Docstring
Constructor for QgsCoordinateTransformContext.
%End

    ~QgsCoordinateTransformContext();

    QgsCoordinateTransformContext( const QgsCoordinateTransformContext &rhs );

    bool operator==( const QgsCoordinateTransformContext &rhs ) const;

    void clear();
%Docstring
Clears all stored transform information from the context.
%End

 QMap< QPair< QString, QString>, QgsDatumTransform::TransformPair > sourceDestinationDatumTransforms() const /Deprecated/;
%Docstring
Returns the stored mapping for source to destination CRS pairs to associated datum transforms to use.
The map keys will be :py:class:`QgsCoordinateReferenceSystems`.authid()s.

If either the source transform ID or destination transform ID is -1, then no datum transform is
required for transformations for that source or destination.

.. warning::

   This method should not be used to calculate the corresponding datum transforms
   to use for a coordinate transform. Instead, always use :py:func:`~QgsCoordinateTransformContext.calculateDatumTransforms`
   to determine this.

.. seealso:: :py:func:`addSourceDestinationDatumTransform`


.. deprecated::
   Has no effect on builds based on Proj 6.0 or later, use :py:func:`~QgsCoordinateTransformContext.coordinateOperations` instead.
%End

    QMap< QPair< QString, QString>, QString > coordinateOperations() const;
%Docstring
Returns the stored mapping for source to destination CRS pairs to associated coordinate operation to use
(as a proj string). The map keys will be :py:class:`QgsCoordinateReferenceSystems`.authid()s.

.. warning::

   This method should not be used to calculate the corresponding coordinate operation
   to use for a coordinate transform. Instead, always use :py:func:`~QgsCoordinateTransformContext.calculateCoordinateOperation`
   to determine this.

.. seealso:: :py:func:`addCoordinateOperation`


.. note::

   Requires Proj 6.0 or later. Builds based on earlier Proj versions will always return an empty list,
   and the deprecated :py:func:`~QgsCoordinateTransformContext.sourceDestinationDatumTransforms` method must be used instead.


.. versionadded:: 3.8
%End

 bool addSourceDestinationDatumTransform( const QgsCoordinateReferenceSystem &sourceCrs, const QgsCoordinateReferenceSystem &destinationCrs, int sourceTransformId, int destinationTransformId ) /Deprecated/;
%Docstring
Adds a new ``sourceTransform`` and ``destinationTransform`` to use when projecting coordinates
from the specified ``sourceCrs`` to the specified ``destinationCrs``.

If either ``sourceTransformId`` or ``destinationTransformId`` is -1, then no datum transform is
required for transformations for that source or destination.

Returns ``True`` if the new transform pair was added successfully.

.. seealso:: :py:func:`sourceDestinationDatumTransforms`

.. seealso:: :py:func:`removeSourceDestinationDatumTransform`

.. deprecated::
   Has no effect on builds based on Proj 6.0 or later, use :py:func:`~QgsCoordinateTransformContext.addCoordinateOperation` instead.
%End

    bool addCoordinateOperation( const QgsCoordinateReferenceSystem &sourceCrs, const QgsCoordinateReferenceSystem &destinationCrs, const QString &coordinateOperationProjString, bool allowFallback = true );
%Docstring
Adds a new ``coordinateOperationProjString`` to use when projecting coordinates
from the specified ``sourceCrs`` to the specified ``destinationCrs``.

``coordinateOperationProjString`` should be set to a valid Proj coordinate operation
string. If ``coordinateOperationProjString`` is empty, then the default Proj operation
will be used when transforming between the coordinate reference systems.

If ``allowFallback`` is ``True`` (since QGIS 3.12), then "ballpark" fallback transformations
will be used in the case that the specified coordinate operation fails (such as when
coordinates from outside a required grid shift file are transformed). See
:py:func:`QgsCoordinateTransform.fallbackOperationOccurred()` for further details. Note that if an
existing ``sourceCrs`` and ``destinationCrs`` pair are added with a different ``allowFallback``
value, that value will replace the existing one (i.e. each combination of ``sourceCrs`` and
``destinationCrs`` must be unique).

.. warning::

   coordinateOperationProjString MUST be a proj string which has been normalized for
   visualization, and must be constructed so that coordinates are always input and output
   with x/y coordinate ordering. (Proj strings output by utilities such as projinfo will NOT
   automatically normalize the axis order!).

Returns ``True`` if the new coordinate operation was added successfully.

.. seealso:: :py:func:`coordinateOperations`

.. seealso:: :py:func:`removeCoordinateOperation`


.. note::

   Requires Proj 6.0 or later. Builds based on earlier Proj versions will ignore this setting,
   and the deprecated :py:func:`~QgsCoordinateTransformContext.addSourceDestinationDatumTransform` method must be used instead.


.. versionadded:: 3.8
%End

 void removeSourceDestinationDatumTransform( const QgsCoordinateReferenceSystem &sourceCrs, const QgsCoordinateReferenceSystem &destinationCrs ) /Deprecated/;
%Docstring
Removes the source to destination datum transform pair for the specified ``sourceCrs`` and
``destinationCrs``.

.. seealso:: :py:func:`addSourceDestinationDatumTransform`

.. deprecated::
   Use :py:func:`~QgsCoordinateTransformContext.removeCoordinateOperation` instead
%End

    void removeCoordinateOperation( const QgsCoordinateReferenceSystem &sourceCrs, const QgsCoordinateReferenceSystem &destinationCrs );
%Docstring
Removes the coordinate operation for the specified ``sourceCrs`` and ``destinationCrs``.

.. versionadded:: 3.8
%End

    bool hasTransform( const QgsCoordinateReferenceSystem &source,
                       const QgsCoordinateReferenceSystem &destination ) const;
%Docstring
Returns ``True`` if the context has a valid coordinate operation to use
when transforming from the specified ``source`` CRS to ``destination`` CRS.

.. note::

   source and destination are reversible.
%End

 QgsDatumTransform::TransformPair calculateDatumTransforms( const QgsCoordinateReferenceSystem &source, const QgsCoordinateReferenceSystem &destination ) const /Deprecated/;
%Docstring
Returns the pair of source and destination datum transforms to use
for a transform from the specified ``source`` CRS to ``destination`` CRS.

Returns an ID of -1 if a datum transform should not be used for the source or
destination.

.. note::

   source and destination are reversible.

.. deprecated::
   Has no effect on builds based on Proj 6.0 or later. Use :py:func:`~QgsCoordinateTransformContext.calculateCoordinateOperation` instead.
%End

    QString calculateCoordinateOperation( const QgsCoordinateReferenceSystem &source, const QgsCoordinateReferenceSystem &destination ) const;
%Docstring
Returns the Proj coordinate operation string to use when transforming
from the specified ``source`` CRS to ``destination`` CRS.

Returns an empty string if no specific coordinate operation is set for the source to
destination pair, in which case the default Proj coordinate operation should
be used.

.. note::

   source and destination are reversible.

.. note::

   Requires Proj 6.0 or later. Builds based on earlier Proj versions will always return
   an empty string, and the deprecated :py:func:`~QgsCoordinateTransformContext.calculateDatumTransforms` method should be used instead.


.. warning::

   Always check the result of :py:func:`~QgsCoordinateTransformContext.mustReverseCoordinateOperation` in order to determine if the
   proj coordinate operation string returned by this method corresponds to the reverse operation, and
   must be manually flipped when calculating coordinate transforms.


.. versionadded:: 3.8
%End

    bool allowFallbackTransform( const QgsCoordinateReferenceSystem &source, const QgsCoordinateReferenceSystem &destination ) const;
%Docstring
Returns ``True`` if approximate "ballpark" transforms may be used when transforming
between a ``source`` and ``destination`` CRS pair, in the case that the preferred
coordinate operation fails (such as when
coordinates from outside a required grid shift file are transformed). See
:py:func:`QgsCoordinateTransform.fallbackOperationOccurred()` for further details.

.. versionadded:: 3.12
%End

    bool mustReverseCoordinateOperation( const QgsCoordinateReferenceSystem &source, const QgsCoordinateReferenceSystem &destination ) const;
%Docstring
Returns ``True`` if the coordinate operation returned by :py:func:`~QgsCoordinateTransformContext.calculateCoordinateOperation` for the ``source`` to ``destination`` pair
must be inverted.

.. versionadded:: 3.10.2
%End


    bool readXml( const QDomElement &element, const QgsReadWriteContext &context, QStringList &missingTransforms /Out/ );
%Docstring
Reads the context's state from a DOM ``element``.

Returns ``False`` if transforms stored in the XML are not available. In this case ``missingTransforms`` will be
filled with missing datum transform strings.

.. seealso:: :py:func:`writeXml`
%End

    void writeXml( QDomElement &element, const QgsReadWriteContext &context ) const;
%Docstring
Writes the context's state to a DOM ``element``.

.. seealso:: :py:func:`readXml`
%End


    void readSettings();
%Docstring
Reads the context's state from application settings.

.. seealso:: :py:func:`readSettings`
%End

    void writeSettings();
%Docstring
Write the context's state to application settings.

.. seealso:: :py:func:`writeSettings`
%End


};






/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/proj/qgscoordinatetransformcontext.h                        *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.pl again   *
 ************************************************************************/
