/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/labeling/qgslabelingenginesettings.h                        *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.py again   *
 ************************************************************************/



class QgsLabelingEngineSettings
{
%Docstring(signature="appended")
Stores global configuration for labeling engine
%End

%TypeHeaderCode
#include "qgslabelingenginesettings.h"
%End
  public:


    enum Search /BaseType=IntEnum/
    {
      Chain,
      Popmusic_Tabu,
      Popmusic_Chain,
      Popmusic_Tabu_Chain,
      Falp
    };

    QgsLabelingEngineSettings();

    void clear();
%Docstring
Returns the configuration to the defaults
%End

    void setFlags( Qgis::LabelingFlags flags );
%Docstring
Sets flags of the labeling engine
%End
    Qgis::LabelingFlags flags() const;
%Docstring
Gets flags of the labeling engine
%End
    bool testFlag( Qgis::LabelingFlag f ) const;
%Docstring
Test whether a particular flag is enabled
%End
    void setFlag( Qgis::LabelingFlag f, bool enabled = true );
%Docstring
Sets whether a particual flag is enabled
%End

    double maximumLineCandidatesPerCm() const;
%Docstring
Returns the maximum number of line label candidate positions per centimeter.

.. seealso:: :py:func:`setMaximumLineCandidatesPerCm`

.. versionadded:: 3.12
%End

    void setMaximumLineCandidatesPerCm( double candidates );
%Docstring
Sets the maximum number of line label ``candidates`` per centimeter.

.. seealso:: :py:func:`maximumLineCandidatesPerCm`

.. versionadded:: 3.12
%End

    double maximumPolygonCandidatesPerCmSquared() const;
%Docstring
Returns the maximum number of polygon label candidate positions per centimeter squared.

.. seealso:: :py:func:`setMaximumPolygonCandidatesPerCmSquared`

.. versionadded:: 3.12
%End

    void setMaximumPolygonCandidatesPerCmSquared( double candidates );
%Docstring
Sets the maximum number of polygon label ``candidates`` per centimeter squared.

.. seealso:: :py:func:`maximumPolygonCandidatesPerCmSquared`

.. versionadded:: 3.12
%End

 void numCandidatePositions( int &candPoint, int &candLine, int &candPolygon ) const /Deprecated/;
%Docstring
Gets number of candidate positions that will be generated for each label feature.

.. deprecated:: 3.12

   Use :py:func:`~QgsLabelingEngineSettings.maximumPolygonCandidatesPerCmSquared` and :py:func:`~QgsLabelingEngineSettings.maximumLineCandidatesPerCm` instead.
%End

 void setNumCandidatePositions( int candPoint, int candLine, int candPolygon ) /Deprecated/;
%Docstring
Sets the number of candidate positions that will be generated for each label feature.

.. deprecated:: 3.12

   Use :py:func:`~QgsLabelingEngineSettings.setMaximumPolygonCandidatesPerCmSquared` and :py:func:`~QgsLabelingEngineSettings.setMaximumLineCandidatesPerCm` instead.
%End

 void setSearchMethod( Search s ) /Deprecated/;
%Docstring
Used to set which search method to use for removal collisions between labels

.. deprecated:: 3.10

   Chain is always used.
%End

 Search searchMethod() const /Deprecated/;
%Docstring
Which search method to use for removal collisions between labels

.. deprecated:: 3.10

   Chain is always used.
%End

    void readSettingsFromProject( QgsProject *project );
%Docstring
Read configuration of the labeling engine from a project
%End
    void writeSettingsToProject( QgsProject *project );
%Docstring
Write configuration of the labeling engine to a project
%End


    Qgis::TextRenderFormat defaultTextRenderFormat() const;
%Docstring
Returns the default text rendering format for the labels.

.. seealso:: :py:func:`setDefaultTextRenderFormat`

.. versionadded:: 3.4.3
%End

    void setDefaultTextRenderFormat( Qgis::TextRenderFormat format );
%Docstring
Sets the default text rendering ``format`` for the labels.

.. seealso:: :py:func:`defaultTextRenderFormat`

.. versionadded:: 3.4.3
%End

    QColor unplacedLabelColor() const;
%Docstring
Returns the color to use when rendering unplaced labels.

.. seealso:: :py:func:`setUnplacedLabelColor`

.. versionadded:: 3.10
%End

    void setUnplacedLabelColor( const QColor &color );
%Docstring
Sets the ``color`` to use when rendering unplaced labels.

.. seealso:: :py:func:`unplacedLabelColor`

.. versionadded:: 3.10
%End

    Qgis::LabelPlacementEngineVersion placementVersion() const;
%Docstring
Returns the placement engine version, which dictates how the label placement problem is solved.

.. seealso:: :py:func:`setPlacementVersion`

.. versionadded:: 3.10.2
%End

    void setPlacementVersion( Qgis::LabelPlacementEngineVersion version );
%Docstring
Sets the placement engine ``version``, which dictates how the label placement problem is solved.

.. seealso:: :py:func:`placementVersion`

.. versionadded:: 3.10.2
%End

};

/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/labeling/qgslabelingenginesettings.h                        *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.py again   *
 ************************************************************************/
