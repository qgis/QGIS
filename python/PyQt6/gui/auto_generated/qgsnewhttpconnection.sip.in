/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/gui/qgsnewhttpconnection.h                                       *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.py again   *
 ************************************************************************/





class QgsNewHttpConnection : QDialog
{
%Docstring(signature="appended")
Dialog to allow the user to configure and save connection
information for an HTTP Server for WMS, etc.
%End

%TypeHeaderCode
#include "qgsnewhttpconnection.h"
%End
  public:

    enum ConnectionType /BaseType=IntEnum/
    {
      ConnectionWfs,
      ConnectionWms,
      ConnectionWcs,
      ConnectionOther,
    };
    typedef QFlags<QgsNewHttpConnection::ConnectionType> ConnectionTypes;


    enum Flag /BaseType=IntEnum/
    {
      FlagShowTestConnection,
      FlagHideAuthenticationGroup,
      FlagShowHttpSettings,
    };
    typedef QFlags<QgsNewHttpConnection::Flag> Flags;


    QgsNewHttpConnection( QWidget *parent /TransferThis/ = 0,
                          QgsNewHttpConnection::ConnectionTypes types = ConnectionWms,
                          const QString &settingsKey = "WMS", // TODO QGIS 4 remove arg rename
                          const QString &connectionName = QString(),
                          QgsNewHttpConnection::Flags flags = QgsNewHttpConnection::Flags(),
                          Qt::WindowFlags fl = QgsGuiUtils::ModalDialogFlags );
%Docstring
Constructor for QgsNewHttpConnection.

The ``types`` argument dictates which connection type settings should be
shown in the dialog.

The ``flags`` argument allows specifying flags which control the dialog behavior
and appearance.
%End

    QString name() const;
%Docstring
Returns the current connection name.
%End

    QString url() const;
%Docstring
Returns the current connection url.
%End

  public slots:

    virtual void accept();


  protected:

    enum WfsVersionIndex /BaseType=IntEnum/
    {
      WFS_VERSION_MAX,
      WFS_VERSION_1_0,
      WFS_VERSION_1_1,
      WFS_VERSION_2_0,
      WFS_VERSION_API_FEATURES_1_0,
    };


    virtual bool validate();
%Docstring
Returns ``True`` if dialog settings are valid, or ``False`` if current
settings are not valid and the dialog should not be acceptable.
%End

    QPushButton *testConnectButton();
%Docstring
Returns the "test connection" button.
%End








    virtual QString wfsSettingsKey( const QString &base, const QString &connectionName ) const;
%Docstring
Returns the QSettings key for WFS related settings for the connection.

.. seealso:: :py:func:`wmsSettingsKey`
%End

    virtual QString wmsSettingsKey( const QString &base, const QString &connectionName ) const;
%Docstring
Returns the QSettings key for WMS related settings for the connection.

.. seealso:: :py:func:`wfsSettingsKey`
%End

    void updateServiceSpecificSettings();
%Docstring
Triggers a resync of the GUI widgets for the service specific settings (i.e. WFS
and WMS related settings).
%End

};

QFlags<QgsNewHttpConnection::ConnectionType> operator|(QgsNewHttpConnection::ConnectionType f1, QFlags<QgsNewHttpConnection::ConnectionType> f2);

QFlags<QgsNewHttpConnection::Flag> operator|(QgsNewHttpConnection::Flag f1, QFlags<QgsNewHttpConnection::Flag> f2);



/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/gui/qgsnewhttpconnection.h                                       *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.py again   *
 ************************************************************************/
