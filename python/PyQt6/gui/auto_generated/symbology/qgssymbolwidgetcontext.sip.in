/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/gui/symbology/qgssymbolwidgetcontext.h                           *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.pl again   *
 ************************************************************************/




class QgsSymbolWidgetContext
{
%Docstring(signature="appended")
Contains settings which reflect the context in which a symbol (or renderer) widget is shown, e.g., the
map canvas and relevant expression contexts.
%End

%TypeHeaderCode
#include "qgssymbolwidgetcontext.h"
%End
  public:

    QgsSymbolWidgetContext();
    QgsSymbolWidgetContext( const QgsSymbolWidgetContext &other );

    void setMapCanvas( QgsMapCanvas *canvas );
%Docstring
Sets the map canvas associated with the widget. This allows the widget to retrieve the current
map scale and other properties from the canvas.

:param canvas: map canvas

.. seealso:: :py:func:`mapCanvas`
%End

    QgsMapCanvas *mapCanvas() const;
%Docstring
Returns the map canvas associated with the widget.

.. seealso:: :py:func:`setMapCanvas`
%End

    void setMessageBar( QgsMessageBar *bar );
%Docstring
Sets the message ``bar`` associated with the widget. This allows the widget to push feedback messages
to the appropriate message bar.

.. seealso:: :py:func:`messageBar`

.. versionadded:: 3.6
%End

    QgsMessageBar *messageBar() const;
%Docstring
Returns the message bar associated with the widget.

.. seealso:: :py:func:`setMessageBar`

.. versionadded:: 3.6
%End

    void setExpressionContext( QgsExpressionContext *context );
%Docstring
Sets the optional expression context used for the widget. This expression context is used for
evaluating data defined symbol properties and for populating based expression widgets in
the layer widget.

:param context: expression context pointer. Ownership is not transferred.

.. seealso:: :py:func:`expressionContext`

.. seealso:: :py:func:`setAdditionalExpressionContextScopes`
%End

    QgsExpressionContext *expressionContext() const;
%Docstring
Returns the expression context used for the widget, if set. This expression context is used for
evaluating data defined symbol properties and for populating based expression widgets in
the layer widget.

.. seealso:: :py:func:`setExpressionContext`
%End

    void setAdditionalExpressionContextScopes( const QList< QgsExpressionContextScope > &scopes );
%Docstring
Sets a list of additional expression context scopes to show as available within the layer.

:param scopes: list of additional scopes which will be added in order to the end of the default expression context

.. seealso:: :py:func:`setExpressionContext`
%End

    QList< QgsExpressionContextScope > additionalExpressionContextScopes() const;
%Docstring
Returns the list of additional expression context scopes to show as available within the layer.

.. seealso:: :py:func:`setAdditionalExpressionContextScopes`
%End

    QList<QgsExpressionContextScope *> globalProjectAtlasMapLayerScopes( const QgsMapLayer *layer ) const /Factory/;
%Docstring
Returns list of scopes: global, project, atlas, map, layer.
Ownership is transferred to the caller.
%End

    Qgis::SymbolType symbolType() const;
%Docstring
Returns the associated symbol type, if the widget is being shown as a subcomponent
of a parent symbol configuration widget.

.. seealso:: :py:func:`setSymbolType`

.. versionadded:: 3.18
%End

    void setSymbolType( Qgis::SymbolType type );
%Docstring
Sets the associated symbol ``type``, if the widget is being shown as a subcomponent
of a parent symbol configuration widget.

.. seealso:: :py:func:`symbolType`

.. versionadded:: 3.18
%End

};

/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/gui/symbology/qgssymbolwidgetcontext.h                           *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.pl again   *
 ************************************************************************/
