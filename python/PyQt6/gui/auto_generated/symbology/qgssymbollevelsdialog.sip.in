/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/gui/symbology/qgssymbollevelsdialog.h                            *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.py again   *
 ************************************************************************/




class QgsSymbolLevelsWidget : QgsPanelWidget
{
%Docstring(signature="appended")
A widget which allows the user to modify the rendering order of symbol layers.

.. seealso:: :py:class:`QgsSymbolLevelsDialog`
%End

%TypeHeaderCode
#include "qgssymbollevelsdialog.h"
%End
  public:

    QgsSymbolLevelsWidget( QgsFeatureRenderer *renderer, bool usingSymbolLevels, QWidget *parent /TransferThis/ = 0 );
%Docstring
Constructor for QgsSymbolLevelsWidget
%End

    QgsSymbolLevelsWidget( const QgsLegendSymbolList &symbols, bool usingSymbolLevels, QWidget *parent /TransferThis/ = 0 );
%Docstring
Constructor for QgsSymbolLevelsWidget, which takes a list of ``symbols`` to show in the dialog.

.. versionadded:: 3.20
%End

    bool usingLevels() const;
%Docstring
Returns whether the level ordering is enabled
%End

    QgsLegendSymbolList symbolLevels() const;
%Docstring
Returns the current legend symbols with rendering passes set, as defined in the widget.

.. versionadded:: 3.20
%End

    void setForceOrderingEnabled( bool enabled );
%Docstring
Sets whether the level ordering is always forced on and hide the checkbox (used by rule-based renderer)

:param enabled: toggle level ordering
%End

  public slots:

 void apply() /Deprecated/;
%Docstring
Apply button.

.. deprecated:: 3.20

   Use :py:func:`~QgsSymbolLevelsWidget.symbolLevels` and manually apply the changes to the renderer as appropriate.
%End

};


class QgsSymbolLevelsDialog : QDialog
{
%Docstring(signature="appended")
A dialog which allows the user to modify the rendering order of symbol layers.

.. seealso:: :py:class:`QgsSymbolLevelsWidget`
%End

%TypeHeaderCode
#include "qgssymbollevelsdialog.h"
%End
  public:

    QgsSymbolLevelsDialog( QgsFeatureRenderer *renderer, bool usingSymbolLevels, QWidget *parent /TransferThis/ = 0 );
%Docstring
Constructor for QgsSymbolLevelsDialog.
%End

    void setForceOrderingEnabled( bool enabled );

    bool usingLevels() const;
%Docstring
Returns whether the level ordering is enabled.

.. versionadded:: 3.20
%End

    QgsLegendSymbolList symbolLevels() const;
%Docstring
Returns the current legend symbols with rendering passes set, as defined in the widget.

.. versionadded:: 3.20
%End

};


/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/gui/symbology/qgssymbollevelsdialog.h                            *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.py again   *
 ************************************************************************/
