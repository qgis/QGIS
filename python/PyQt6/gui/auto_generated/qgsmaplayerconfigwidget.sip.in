/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/gui/qgsmaplayerconfigwidget.h                                    *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.py again   *
 ************************************************************************/




class QgsMapLayerConfigWidgetContext
{
%Docstring(signature="appended")
Encapsulates the context for a :py:class:`QgsMapLayerConfigWidget`.

.. versionadded:: 3.22
%End

%TypeHeaderCode
#include "qgsmaplayerconfigwidget.h"
%End
  public:

    QString annotationId() const;
%Docstring
Returns the item ID of the target annotation, when modifying
an annotation from a :py:class:`QgsAnnotationLayer`.

.. seealso:: :py:func:`setAnnotationId`
%End

    void setAnnotationId( const QString &id );
%Docstring
Sets the item ``id`` of the target annotation, when modifying
an annotation from a :py:class:`QgsAnnotationLayer`.

.. seealso:: :py:func:`annotationId`
%End

    void setMapCanvas( QgsMapCanvas *canvas );
%Docstring
Sets the map ``canvas`` associated with the widget. This allows the widget to retrieve the current
map scale and other properties from the canvas.

.. seealso:: :py:func:`mapCanvas`
%End

    QgsMapCanvas *mapCanvas() const;
%Docstring
Returns the map canvas associated with the widget.

.. seealso:: :py:func:`setMapCanvas`
%End

    void setMessageBar( QgsMessageBar *bar );
%Docstring
Sets the message ``bar`` associated with the widget. This allows the widget to push feedback messages
to the appropriate message bar.

.. seealso:: :py:func:`messageBar`
%End

    QgsMessageBar *messageBar() const;
%Docstring
Returns the message bar associated with the widget.

.. seealso:: :py:func:`setMessageBar`
%End

    void setLayerTreeGroup( QgsLayerTreeGroup *group );
%Docstring
Sets the layer tree ``group`` associated with the widget.

.. seealso:: :py:func:`layerTreeGroup`

.. versionadded:: 3.24
%End

    QgsLayerTreeGroup *layerTreeGroup() const;
%Docstring
Returns the layer tree group associated with the widget.

.. seealso:: :py:func:`setLayerTreeGroup`

.. versionadded:: 3.24
%End

};


class QgsMapLayerConfigWidget : QgsPanelWidget
{
%Docstring(signature="appended")
A panel widget that can be shown in the map style dock
%End

%TypeHeaderCode
#include "qgsmaplayerconfigwidget.h"
%End
  public:

    QgsMapLayerConfigWidget( QgsMapLayer *layer, QgsMapCanvas *canvas, QWidget *parent = 0 );
%Docstring
A panel widget that can be shown in the map style dock

:param layer: The layer active in the dock.
:param canvas: The canvas object.
:param parent: The parent of the widget.

.. note::

   The widget is created each time the panel is selected in the dock.
   Keep the loading light as possible for speed in the UI.
%End

    virtual bool shouldTriggerLayerRepaint() const;
%Docstring
Whether this config widget changes map layer properties in a way that :py:func:`~QgsMapLayerConfigWidget.triggerRepaint` should
be called for the layer after applying changes. This is ``True`` by default, but some config widgets
(for example 3D rendering config) do not need layer repaint as they do not modify 2D map rendering.

.. versionadded:: 3.8
%End

    virtual void syncToLayer( QgsMapLayer *layer );
%Docstring
Reset to original (vector layer) values

.. versionadded:: 3.14
%End

    virtual void setMapLayerConfigWidgetContext( const QgsMapLayerConfigWidgetContext &context );
%Docstring
Sets the ``context`` under which the widget is being shown.

Subclasses should take care to call the base class implementation when overriding this method.
%End

  public slots:

    virtual void apply() = 0;
%Docstring
Called when changes to the layer need to be made.
Will be called when live update is enabled.
%End

    virtual void focusDefaultWidget();
%Docstring
Focuses the default widget for the page.

.. versionadded:: 3.22
%End

  signals:


  protected:

};

/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/gui/qgsmaplayerconfigwidget.h                                    *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.py again   *
 ************************************************************************/
