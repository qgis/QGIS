/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/gui/attributetable/qgsattributetablefiltermodel.h                *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.py again   *
 ************************************************************************/





class QgsAttributeTableFilterModel: QSortFilterProxyModel, QgsFeatureModel
{

%TypeHeaderCode
#include "qgsattributetablefiltermodel.h"
%End
  public:

    enum FilterMode
    {
      ShowAll,
      ShowSelected,
      ShowVisible,
      ShowFilteredList,
      ShowEdited,
      ShowInvalid,
    };

    enum ColumnType
    {
      ColumnTypeField,
      ColumnTypeActionButton
    };


    enum class CustomRole
    {
      Type
    };

    QgsAttributeTableFilterModel( QgsMapCanvas *canvas, QgsAttributeTableModel *sourceModel, QObject *parent /TransferThis/ = 0 );
%Docstring
Make sure, the master model is already loaded, so the selection will get synchronized.

:param parent: parent object (owner)
:param sourceModel: The :py:class:`QgsAttributeTableModel` to use as source (mostly referred to as master model)
:param canvas: The mapCanvas. Used to identify the currently visible features.
%End


    void setSourceModel( QgsAttributeTableModel *sourceModel );
%Docstring
Set the attribute table model that backs this model

:param sourceModel: The model
%End


    void setSelectedOnTop( bool selectedOnTop );
%Docstring
Changes the sort order of the features. If set to ``True``, selected features
will be sorted on top, regardless of the current sort column

:param selectedOnTop: Specify, if selected features should be sorted on top
%End

    bool selectedOnTop();
%Docstring
Returns if selected features are currently shown on top

:return: ``True`` if selected are shown on top
%End

    virtual void setFilteredFeatures( const QgsFeatureIds &ids );
%Docstring
Specify a list of features, which the filter will accept.
The filter mode will automatically be adjusted to show only these features (ShowFilteredList).

:param ids: The list of feature ids which will be accepted by the filter
%End

    QgsFeatureIds filteredFeatures();
%Docstring
Gets a list of currently filtered feature ids

:return: A list of feature ids
%End

    void setFilterMode( FilterMode filterMode );
%Docstring
Set the filter mode the filter will use.

:param filterMode: Sets the current mode of the filter
%End

    void disconnectFilterModeConnections();
%Docstring
Disconnect the connections set for the current filterMode
%End

    void connectFilterModeConnections( FilterMode filterMode );
%Docstring
Disconnect the connections set for the new ``filterMode``
%End

    FilterMode filterMode();
%Docstring
The current filterModel
%End

    QgsVectorLayer *layer() const;
%Docstring
Returns the layer this filter acts on.

:return: Abovementioned layer
%End

    QgsVectorLayerCache *layerCache() const;
%Docstring
Returns the layerCache this filter acts on.

:return: The layer cache
%End

    QgsAttributeTableModel *masterModel() const;
%Docstring
Returns the table model this filter is using

:return: the table model in quesion
%End

    QgsFeatureId rowToId( const QModelIndex &row );
%Docstring
Returns the feature id for a given model index.

:param row: A model index of the row in question

:return: The feature id of the feature visible in the provided row
%End

    virtual QModelIndex fidToIndex( QgsFeatureId fid );


    QModelIndexList fidToIndexList( QgsFeatureId fid );

    QModelIndex mapToMaster( const QModelIndex &proxyIndex ) const;

    QModelIndex mapFromMaster( const QModelIndex &sourceIndex ) const;

    virtual QModelIndex mapToSource( const QModelIndex &proxyIndex ) const;


    virtual QModelIndex mapFromSource( const QModelIndex &sourceIndex ) const;


    virtual Qt::ItemFlags flags( const QModelIndex &index ) const;


    virtual void sort( int column, Qt::SortOrder order = Qt::AscendingOrder );

%Docstring
Sort by the given column using the given order.
Prefetches all the data from the layer to speed up sorting.

:param column: The column which should be sorted
:param order: The order ( Qt.AscendingOrder or Qt.DescendingOrder )
%End

    void sort( const QString &expression, Qt::SortOrder order = Qt::AscendingOrder );
%Docstring
Sort by the given expression using the given order.
Prefetches all the data from the layer to speed up sorting.

:param expression: The expression which should be used for sorting
:param order: The order ( Qt.AscendingOrder or Qt.DescendingOrder )
%End

    QString sortExpression() const;
%Docstring
The expression which is used to sort the attribute table.
%End

    QgsMapCanvas *mapCanvas() const;
%Docstring
Returns the map canvas
%End

    virtual QVariant data( const QModelIndex &index, int role ) const;


    virtual QVariant headerData( int section, Qt::Orientation orientation, int role ) const;


    int actionColumnIndex() const;
%Docstring
Gets the index of the first column that contains an action widget.
Returns -1 if none is defined.
%End

    virtual int columnCount( const QModelIndex &parent ) const;


    void setAttributeTableConfig( const QgsAttributeTableConfig &config );
%Docstring
Set the attribute table configuration to control which fields are shown,
in which order they are shown as well as if and where an action column
is shown.

:param config: attribute table config
%End

    void setFilterExpression( const QgsExpression &expression, const QgsExpressionContext &context );
%Docstring
Set the ``expression`` and the ``context`` to be stored in case of the features
need to be filtered again (like on filter or on main model data change).

.. versionadded:: 3.10.3
%End

    QString filterExpression() const;
%Docstring
Returns the stored filter expression string.

.. versionadded:: 3.28.0
%End
  signals:

    void sortColumnChanged( int column, Qt::SortOrder order );
%Docstring
Emitted whenever the sort column is changed

:param column: The sort column
:param order: The sort order
%End

    void featuresFiltered();
%Docstring
Emitted when the filtering of the features has been done
%End

    void visibleReloaded();
%Docstring
Emitted when the the visible features on extend are reloaded (the list is created)
%End

    void filterError( const QString &errorMessage );
%Docstring
Emitted when an error occurred while filtering features

.. versionadded:: 3.18
%End

  protected:

    virtual bool filterAcceptsRow( int sourceRow, const QModelIndex &sourceParent ) const;

%Docstring
Returns ``True`` if the source row will be accepted

:param sourceRow: row from the source model
:param sourceParent: parent index in the source model
%End

    void generateListOfVisibleFeatures();
%Docstring
Updates the list of currently visible features on the map canvas.
Is called automatically when the filter mode is adjusted or the extents changed.
%End

    virtual bool lessThan( const QModelIndex &left, const QModelIndex &right ) const;

%Docstring
Used by the sorting algorithm. Compares the two model indices. Will also consider the
selection state of the feature in case selected features are to be shown on top.
%End

  public slots:

 void extentsChanged();
%Docstring
Is called upon every change of the visible extents on the map canvas.
When a change is signalled, the filter is updated and invalidated if needed.

.. deprecated:: 3.10.3

   Made private as :py:func:`~QgsAttributeTableFilterModel.reloadVisible`.
%End

    void filterFeatures();
%Docstring
Updates the filtered features in the filter model. It is called when the data of the
main table or the filter expression changed.

.. versionadded:: 3.10.3
%End

};

/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/gui/attributetable/qgsattributetablefiltermodel.h                *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.py again   *
 ************************************************************************/
