/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/gui/symbology/qgssymbollayerwidget.h                             *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.py again   *
 ************************************************************************/





class QgsSymbolLayerWidget : QWidget, protected QgsExpressionContextGenerator
{
%Docstring(signature="appended")
Abstract base class for widgets used to configure
:py:class:`QgsSymbolLayer` classes.
%End

%TypeHeaderCode
#include "qgssymbollayerwidget.h"
%End
  public:
    QgsSymbolLayerWidget( QWidget *parent /TransferThis/, QgsVectorLayer *vl = 0 );
%Docstring
Constructor for QgsSymbolLayerWidget.

:param vl: associated vector layer
:param parent: parent widget
%End

    virtual void setSymbolLayer( QgsSymbolLayer *layer ) = 0;
    virtual QgsSymbolLayer *symbolLayer() = 0;

    virtual void setContext( const QgsSymbolWidgetContext &context );
%Docstring
Sets the context in which the symbol widget is shown, e.g., the
associated map canvas and expression contexts.

:param context: symbol widget context

.. seealso:: :py:func:`context`
%End

    QgsSymbolWidgetContext context() const;
%Docstring
Returns the context in which the symbol widget is shown, e.g., the
associated map canvas and expression contexts.

.. seealso:: :py:func:`setContext`
%End

    const QgsVectorLayer *vectorLayer() const;
%Docstring
Returns the vector layer associated with the widget.
%End

  protected:
    void registerDataDefinedButton( QgsPropertyOverrideButton *button, QgsSymbolLayer::Property key );
%Docstring
Registers a data defined override button. Handles setting up connections
for the button and initializing the button to show the correct
descriptions and help text for the associated property.
%End

    virtual QgsExpressionContext createExpressionContext() const;


  signals:

    void changed();
%Docstring
Should be emitted whenever configuration changes happened on this symbol
layer configuration. If the subsymbol is changed,
:py:func:`~QgsSymbolLayerWidget.symbolChanged` should be emitted
instead.
%End

    void symbolChanged();
%Docstring
Should be emitted whenever the sub symbol changed on this symbol layer
configuration. Normally :py:func:`~QgsSymbolLayerWidget.changed` should
be preferred.

.. seealso:: :py:func:`changed`
%End

  protected slots:
    void updateDataDefinedProperty();

};

/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/gui/symbology/qgssymbollayerwidget.h                             *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.py again   *
 ************************************************************************/
