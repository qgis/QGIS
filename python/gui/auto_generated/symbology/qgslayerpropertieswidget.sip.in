/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/gui/symbology/qgslayerpropertieswidget.h                         *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.py again   *
 ************************************************************************/





class QgsLayerPropertiesWidget : QgsPanelWidget, QgsExpressionContextGenerator
{
%Docstring(signature="appended")
A widget which allows configuration of the properties of a single :py:class:`QgsSymbolLayer`.

This widget includes a combobox box for selection of the symbol layer type, and a panel for
showing configuration properties for the selected symbol layer type.
%End

%TypeHeaderCode
#include "qgslayerpropertieswidget.h"
%End
  public:

    QgsLayerPropertiesWidget( QgsSymbolLayer *layer, const QgsSymbol *symbol, QgsVectorLayer *vl, QWidget *parent /TransferThis/ = 0 );
%Docstring
Constructor for QgsLayerPropertiesWidget.

:param layer: the symbol layer
:param symbol: the symbol
:param vl: associated vector layer
:param parent: parent widget
%End

    void setContext( const QgsSymbolWidgetContext &context );
%Docstring
Sets the context in which the symbol widget is shown, e.g., the associated map canvas and expression contexts.

:param context: symbol widget context

.. seealso:: :py:func:`context`
%End

    QgsSymbolWidgetContext context() const;
%Docstring
Returns the context in which the symbol widget is shown, e.g., the associated map canvas and expression contexts.

.. seealso:: :py:func:`setContext`
%End

    virtual void setDockMode( bool dockMode );

%Docstring
Set the widget in dock mode which tells the widget to emit panel
widgets and not open dialogs

:param dockMode: ``True`` to enable dock mode.
%End

  public slots:
    void layerTypeChanged();
    void emitSignalChanged();

  signals:

    void changed();
%Docstring
Emitted when the symbol layer configuration is changed in the widget.
%End

    void changeLayer( QgsSymbolLayer *layer );
%Docstring
Emitted when the symbol ``layer`` is changed in the widget.
%End

  protected:
    void populateLayerTypes();
    void updateSymbolLayerWidget( QgsSymbolLayer *layer );

    virtual QgsExpressionContext createExpressionContext() const;


    void registerDataDefinedButton( QgsPropertyOverrideButton *button, QgsSymbolLayer::Property key );
%Docstring
Registers a data defined override button. Handles setting up connections
for the button and initializing the button to show the correct descriptions
and help text for the associated property.
%End

  protected: // data


};

/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/gui/symbology/qgslayerpropertieswidget.h                         *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.py again   *
 ************************************************************************/
