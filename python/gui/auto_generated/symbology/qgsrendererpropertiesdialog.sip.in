/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/gui/symbology/qgsrendererpropertiesdialog.h                      *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.py again   *
 ************************************************************************/







class QgsRendererPropertiesDialog : QDialog
{

%TypeHeaderCode
#include "qgsrendererpropertiesdialog.h"
%End
  public:

    QgsRendererPropertiesDialog( QgsVectorLayer *layer, QgsStyle *style, bool embedded = false, QWidget *parent /TransferThis/ = 0 );
%Docstring
Constructor for QgsRendererPropertiesDialog.

:param layer: associated layer
:param style: style collection
:param embedded: set to ``True`` to indicate that the dialog will be embedded in another widget, rather
                 than shown as a dialog by itself
:param parent: parent widget
%End
    ~QgsRendererPropertiesDialog();

    void setMapCanvas( QgsMapCanvas *canvas );
%Docstring
Sets the map canvas associated with the dialog. This allows the widget to retrieve the current
map scale and other properties from the canvas.

:param canvas: map canvas
%End

    void setContext( const QgsSymbolWidgetContext &context );
%Docstring
Sets the ``context`` in which the dialog is shown, e.g., the associated map canvas and expression contexts.

.. versionadded:: 3.6
%End

    void setDockMode( bool dockMode );
%Docstring
Set the widget in dock mode which tells the widget to emit panel
widgets and not open dialogs

:param dockMode: ``True`` to enable dock mode.
%End

  signals:

    void layerVariablesChanged();
%Docstring
Emitted when expression context variables on the associated
vector layers have been changed. Will request the parent dialog
to re-synchronize with the variables.
%End

    void widgetChanged();
%Docstring
Emitted when something on the widget has changed.
All widgets will fire this event to notify of an internal change.
%End

    void showPanel( QgsPanelWidget *panel );
%Docstring
Emit when you require a panel to be show in the interface.

:param panel: The panel widget to show.

.. note::

   If you are connected to this signal you should also connect
   given panels showPanel signal as they can be nested.
%End

  public slots:
    void rendererChanged();
%Docstring
called when user changes renderer type
%End

    void apply();
%Docstring
Apply the changes from the dialog to the layer.
%End

    void onOK();
%Docstring
Apply and accept the changes for the dialog.
%End

    void openPanel( QgsPanelWidget *panel );
%Docstring
Open a panel or dialog depending on dock mode setting
If dock mode is ``True`` this method will emit the showPanel signal
for connected slots to handle the open event.

If dock mode is ``False`` this method will open a dialog
and block the user.

:param panel: The panel widget to open.
%End


  protected:

    void connectValueChanged( const QList<QWidget *> &widgets, const char *slot );
%Docstring
Connect the given slot to the value changed event for the set of widgets
Each widget is checked for type and the common type of signal is connected
to the slot.

:param widgets: The list of widgets to check.
:param slot: The slot to connect to the signals.
%End

    virtual void keyPressEvent( QKeyEvent *event );







};


/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/gui/symbology/qgsrendererpropertiesdialog.h                      *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.py again   *
 ************************************************************************/
