/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/gui/symbology/qgsstylemanagerdialog.h                            *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.py again   *
 ************************************************************************/






class QgsStyleManagerDialog : QDialog
{
%Docstring(signature="appended")

A dialog allowing users to customize and populate a :py:class:`QgsStyle`.
%End

%TypeHeaderCode
#include "qgsstylemanagerdialog.h"
%End
  public:

    QgsStyleManagerDialog( QgsStyle *style, QWidget *parent /TransferThis/ = 0, Qt::WindowFlags flags = Qt::WindowFlags(),
                           bool readOnly = false );
%Docstring
Constructor for QgsStyleManagerDialog, with the specified ``parent`` widget and window ``flags``.

The ``style`` argument specifies the linked :py:class:`QgsStyle` database. Symbols and objects contained within
this style will be shown in the dialog, and changes made within the dialog will be applied to ``style``.
The ``style`` object must last for the lifetime of the dialog.
%End

    QgsStyleManagerDialog( QWidget *parent /TransferThis/ = 0, Qt::WindowFlags flags = Qt::WindowFlags() );
%Docstring
Constructor for QgsStyleManagerDialog, with the specified ``parent`` widget and window ``flags``.

All styles linked to the current project will be available.

.. versionadded:: 3.26
%End


    static QString addColorRampStatic( QWidget *parent, QgsStyle *style,
                                       const QString &RampType = QString() );
%Docstring
Opens the add color ramp dialog, returning the new color ramp's name if the ramp has been added.

The ``RampType`` argument should be set to a string representing a valid :py:func:`QgsColorRamp.type()` value.
%End

    void setFavoritesGroupVisible( bool show );
%Docstring
Sets whether the favorites group should be shown. The default is to show the group.

.. versionadded:: 3.6
%End

    void setSmartGroupsVisible( bool show );
%Docstring
Sets whether smart groups should be shown. The default is to show the groups.

.. versionadded:: 3.6
%End

    void setBaseStyleName( const QString &name );
%Docstring
Sets the base ``name`` for the style, which is used by the dialog to reflect the
original style/XML file name.

``name`` should be stripped of any extensions and folder information, e.g. "transport_styles",
not "d:/stuff/transport_styles.xml".

.. versionadded:: 3.6
%End

  public slots:


    void activate();
%Docstring
Raises, unminimizes and activates this window

.. versionadded:: 3.4
%End

    void addItem();
%Docstring
Triggers the dialog for adding a new item, based on the currently
selected item type tab.
%End

    void editItem();
%Docstring
Triggers the dialog for editing the current item.
%End

    void removeItem();
%Docstring
Removes the current selected item.
%End

    void exportItemsSVG();
%Docstring
Triggers the dialog to export selected items as SVG files.

.. seealso:: :py:func:`exportItemsPNG`

.. seealso:: :py:func:`exportSelectedItemsImages`
%End

    void exportItemsPNG();
%Docstring
Triggers the dialog to export selected items as PNG files.

.. seealso:: :py:func:`exportItemsSVG`

.. seealso:: :py:func:`exportSelectedItemsImages`
%End

    void exportSelectedItemsImages( const QString &dir, const QString &format, QSize size );
%Docstring
Triggers the dialog to export selected items as images of the specified ``format`` and ``size``.

.. seealso:: :py:func:`exportItemsSVG`

.. seealso:: :py:func:`exportItemsPNG`
%End

    void exportItems();
%Docstring
Triggers the dialog to export items.

.. seealso:: :py:func:`importItems`
%End

    void importItems();
%Docstring
Triggers the dialog to import items.

.. seealso:: :py:func:`exportItems`
%End

    void populateList();
%Docstring
Refreshes the list of items.
%End

    void onFinished();
%Docstring
Called when the dialog is going to be closed.
%End

    void onClose();
%Docstring
Closes the dialog
%End

    void showHelp();
%Docstring
Opens the associated help
%End

 void itemChanged( QStandardItem *item ) /Deprecated/;
%Docstring

.. deprecated:: 3.6

   Has no effect and will be removed in QGIS 4.0.
%End

    void groupChanged( const QModelIndex & );
%Docstring
Triggered when the current group (or tag) is changed.
%End

    void groupRenamed( QStandardItem *item );
%Docstring
Triggered when a group ``item`` is renamed.
%End

    int addTag();
%Docstring
Triggers the dialog to add a new tag.
%End

    int addSmartgroup();
%Docstring
Triggers the dialog to add a new smart group.
%End

    void removeGroup();
%Docstring
Removes the selected tag or smartgroup.
%End

    void tagSymbolsAction();
%Docstring
Toggles the interactive item tagging mode.
%End

    void editSmartgroupAction();
%Docstring
Triggers the dialog for editing the selected smart group.
%End

 void regrouped( QStandardItem * ) /Deprecated/;
%Docstring

.. deprecated:: 3.6

   Has no effect and will be removed in QGIS 4.0.
%End

    void filterSymbols( const QString &filter );
%Docstring
Sets the ``filter`` string to filter symbols by.
%End

    void symbolSelected( const QModelIndex & );
%Docstring
Perform symbol specific tasks when selected
%End

    void selectedSymbolsChanged( const QItemSelection &selected, const QItemSelection &deselected );
%Docstring
Perform tasks when the selected symbols change
%End

    void grouptreeContextMenu( QPoint );
%Docstring
Context menu for the groupTree
%End

    void listitemsContextMenu( QPoint );
%Docstring
Context menu for the listItems ( symbols list )
%End

  protected slots:

    bool addColorRamp( const QString &type = QString() );
%Docstring
Triggers adding a new color ramp.

If ``type`` is set to a string representing a valid :py:func:`QgsColorRamp.type()` value then a new ramp
of that type will be created. If ``type`` is empty, then the user will be prompted to select
the color ramp type.
%End

    void addFavoriteSelectedSymbols();
%Docstring
Add selected symbols to favorites
%End
    void removeFavoriteSelectedSymbols();
%Docstring
Remove selected symbols from favorites
%End
    void tagSelectedSymbols( bool newTag = false );
%Docstring
Tag selected symbols using menu item selection
%End
    void detagSelectedSymbols();
%Docstring
Remove all tags from selected symbols
%End

  protected:

 void populateTypes() /Deprecated/;
%Docstring
Populate combo box with known style items (symbols, color ramps).

.. deprecated:: 3.6

   Has no effect and will be removed in QGIS 4.0.
%End

    void populateGroups();
%Docstring
populate the groups
%End

 void setSymbolsChecked( const QStringList & ) /Deprecated/;
%Docstring

.. deprecated:: 3.6

   Has no effect and will be removed in QGIS 4.0.
%End

 void populateSymbols( const QStringList &symbolNames, bool checkable = false ) /Deprecated/;
%Docstring
Populates the list view with symbols of the current type with the given names.

.. deprecated:: 3.40

   No longer required in QGIS 3.6, as the model is updated live. Has no effect and will be removed in QGIS 4.0.
%End

 void populateColorRamps( const QStringList &colorRamps, bool checkable = false ) /Deprecated/;
%Docstring
Populates the list view with color ramps of the current type with the given names.

.. deprecated:: 3.40

   No longer required in QGIS 3.6, as the model is updated live. Has no effect and will be removed in QGIS 4.0.
%End

    int currentItemType();
    QString currentItemName();

    bool addSymbol( int symbolType = -1 );
%Docstring
add a new symbol to style
%End

    bool editSymbol();
    bool editColorRamp();

 bool removeSymbol() /Deprecated/;
%Docstring

.. deprecated:: 3.6

   Has no effect and will be removed in QGIS 4.0.
%End

 bool removeColorRamp() /Deprecated/;
%Docstring

.. deprecated:: 3.6

   Has no effect and will be removed in QGIS 4.0.
%End

    void enableSymbolInputs( bool );
%Docstring
Enables or disbables the symbol specific inputs
%End
    void enableGroupInputs( bool );
%Docstring
Enables or disables the groupTree specific inputs
%End
    void enableItemsForGroupingMode( bool );
%Docstring
Enables or disables the groupTree items for grouping mode
%End

    void setBold( QStandardItem * );
%Docstring
sets the text of the item with bold font
%End

};

/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/gui/symbology/qgsstylemanagerdialog.h                            *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.py again   *
 ************************************************************************/
