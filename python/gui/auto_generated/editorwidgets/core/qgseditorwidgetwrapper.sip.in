/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/gui/editorwidgets/core/qgseditorwidgetwrapper.h                  *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.py again   *
 ************************************************************************/






class QgsEditorWidgetWrapper : QgsWidgetWrapper
{
%Docstring(signature="appended")
Manages an editor widget
Widget and wrapper share the same parent

A wrapper controls one attribute editor widget and is able to create a default
widget or use a pre-existent widget. It is able to set the widget to the value implied
by a field of a vector layer, or return the value it currently holds. Every time it is changed
it has to emit a valueChanged signal. If it fails to do so, there is no guarantee that the
changed status of the widget will be saved.

It can also handle additional fields of a vector layer and would set the widget
for their corresponding values and emit valuesChanged signal.
%End

%TypeHeaderCode
#include "qgseditorwidgetwrapper.h"
%End
  public:

    enum ConstraintResult
    {
      ConstraintResultPass,
      ConstraintResultFailHard,
      ConstraintResultFailSoft,
    };

    explicit QgsEditorWidgetWrapper( QgsVectorLayer *vl, int fieldIdx, QWidget *editor = 0, QWidget *parent /TransferThis/ = 0 );
%Docstring
Create a new widget wrapper

:param vl: The layer on which the field is
:param fieldIdx: The field which will be controlled
:param editor: An editor widget. Can be ``None`` if one should be autogenerated.
:param parent: A parent widget for this widget wrapper and the created widget.
%End

    virtual QVariant value() const = 0;
%Docstring
Will be used to access the widget's value. Read the value from the widget and
return it properly formatted to be saved in the attribute.

If an invalid variant is returned this will be interpreted as no change.
Be sure to return a NULL QVariant if it should be set to NULL.

:return: The current value the widget represents
%End

    virtual QStringList additionalFields() const;
%Docstring
Returns the list of additional fields which the editor handles

.. versionadded:: 3.10
%End

    virtual QVariantList additionalFieldValues() const;
%Docstring
Will be used to access the widget's values for potential additional fields handled by the widget

:return: A map of additional field names with their corresponding values

.. seealso:: :py:func:`additionalFields`

.. versionadded:: 3.10
%End

    int fieldIdx() const;
%Docstring
Access the field index.

:return: The index of the field you are working on

.. seealso:: :py:func:`layer`
%End

    QgsField field() const;
%Docstring
Access the field.

:return: The field you are working on

.. seealso:: :py:func:`layer`
%End

    QVariant defaultValue() const;
%Docstring
Access the default value of the field.

:return: the default value of the field

.. seealso:: :py:func:`layer`
%End

    static QgsEditorWidgetWrapper *fromWidget( QWidget *widget );
%Docstring
Will return a wrapper for a given widget

:param widget: The widget which was created by a wrapper

:return: The wrapper for the widget or ``None``
%End

    static bool isInTable( const QWidget *parent );
%Docstring
Check if the given widget or one of its parent is a QTableView.

:param parent: the widget to check

:return: ``True`` if yes
%End

    virtual void setEnabled( bool enabled );

%Docstring
Is used to enable or disable the edit functionality of the managed widget.
By default this will enable or disable the whole widget

:param enabled: Enable or Disable?
%End

    virtual void showIndeterminateState();
%Docstring
Sets the widget to display in an indeterminate "mixed value" state.
%End

    void updateConstraint( const QgsFeature &featureContext, QgsFieldConstraints::ConstraintOrigin constraintOrigin = QgsFieldConstraints::ConstraintOriginNotSet );
%Docstring
Update constraint.

:param featureContext: the feature to use to evaluate the constraint
:param constraintOrigin: optional origin for constraints to check. This can be used to limit the constraints tested
                         to only provider or layer based constraints.
%End

    void updateConstraint( const QgsVectorLayer *layer, int index, const QgsFeature &feature, QgsFieldConstraints::ConstraintOrigin constraintOrigin = QgsFieldConstraints::ConstraintOriginNotSet );
%Docstring
Update constraint on a feature coming from a specific layer.

:param layer: The vector layer where the feature is defined
:param index: The index of the field to check
:param feature: The feature to use to evaluate the constraint
:param constraintOrigin: Optional origin for constraints to check. This
                         can be used to limit the constraints tested to only provider or layer
                         based constraints.
%End

    void updateConstraint( QgsEditorWidgetWrapper::ConstraintResult constraintResult, const QString &constraintFailureReason );
%Docstring
Update constraint manually by providing the constraint result value and failure reason(s).

:param constraintResult: the constraint result value
:param constraintFailureReason: the constraint failure reason(s) (blank is the result passes)

.. versionadded:: 3.36
%End

    bool isValidConstraint() const;
%Docstring
Gets the current constraint status.

:return: ``True`` if the constraint is valid or if there's no constraint,
         ``False`` otherwise

.. seealso:: :py:func:`constraintFailureReason`

.. seealso:: :py:func:`isBlockingCommit`
%End

    bool isBlockingCommit() const;
%Docstring
Returns ``True`` if the widget is preventing the feature from being committed. This may be ``True`` as a result
of attribute values failing enforced field constraints.

.. seealso:: :py:func:`isValidConstraint`
%End

    QString constraintFailureReason() const;
%Docstring
Returns the reason why a constraint check has failed (or an empty string
if constraint check was successful).

.. seealso:: :py:func:`isValidConstraint`
%End

    virtual void setHint( const QString &hintText );
%Docstring
Add a hint text on the widget

:param hintText: The hint text to display
%End

    ConstraintResult constraintResult() const;
%Docstring
Returns the constraint result, which is the current result of the constraint
on the widget influencing its visualization.
%End

    bool constraintResultVisible() const;
%Docstring
Returns whether the constraint result is visible.

Returns ``True`` if the constraint result will be visualized on the widget (with color).
This will be disabled when the form is not editable.
%End

    void setConstraintResultVisible( bool constraintResultVisible );
%Docstring
Sets whether the constraint result is visible.

Controls if the constraint result should be visualized on the widget (with color).
This will be disabled when the form is not editable.

:param constraintResultVisible: if constraintResult should be displayed (mostly editable status)
%End

  signals:

 void valueChanged( const QVariant &value );
%Docstring
Emit this signal, whenever the value changed.

:param value: The new value

.. deprecated:: 3.10

   Use valuesChanged signal instead.
%End

    void valuesChanged( const QVariant &value, const QVariantList &additionalFieldValues = QVariantList() );
%Docstring
Emit this signal, whenever the value changed.
It will also return the values for the additional fields handled by the widget

:param value: The new value
:param additionalFieldValues: A map of additional field names with their corresponding values

.. versionadded:: 3.10
%End

    void constraintStatusChanged( const QString &constraint, const QString &desc, const QString &err, QgsEditorWidgetWrapper::ConstraintResult status );
%Docstring
Emit this signal when the constraint status changed.
constraintStatusChanged

:param constraint: represented as a string
:param desc: is the constraint description
:param err: the error represented as a string. Empty if none.
:param status:
%End

    void constraintResultVisibleChanged( bool visible );
%Docstring
Emit this signal when the constraint result visibility changed.
%End

  public slots:

    virtual void setFeature( const QgsFeature &feature );

%Docstring
Will be called when the feature changes

Is forwarded to the slot :py:func:`~QgsEditorWidgetWrapper.setValues`

:param feature: The new feature
%End


    virtual void setValue( const QVariant &value ) /Deprecated/;
%Docstring
Is called when the value of the widget needs to be changed. Updates the widget representation
to reflect the new value.

:param value: The new value of the attribute

.. deprecated:: 3.10
%End

    void setValues( const QVariant &value, const QVariantList &additionalValues );
%Docstring
Is called when the value of the widget or additional field values
needs to be changed. Updates the widget representation
to reflect the new values.

.. versionadded:: 3.10
%End

    void emitValueChanged();
%Docstring
Will call the :py:func:`~QgsEditorWidgetWrapper.value` method to determine the emitted value
%End

    virtual void parentFormValueChanged( const QString &attribute, const QVariant &value );
%Docstring
Is called in embedded form widgets when an ``attribute`` ``value`` in
the parent form has changed.

The default implementations does nothing.
Subclasses should reimplement this method to notify the form widgets
that something has changed in case they have filter expressions that
depend on the parent form scope.

.. versionadded:: 3.14
%End

  protected:

    virtual void updateConstraintWidgetStatus();
%Docstring
This should update the widget with a visual cue if a constraint status
changed.

By default a stylesheet will be applied on the widget that changes the
background color to red.

This can be overwritten in subclasses to allow individual widgets to
change the visual cue.
%End


    QgsFeature formFeature() const;
%Docstring
The feature currently being edited, in its current state

:return: the feature currently being edited, in its current state

.. versionadded:: 3.2
%End

    void setFormFeature( const QgsFeature &feature );
%Docstring
Set the feature currently being edited to ``feature``

.. versionadded:: 3.2
%End

    bool setFormFeatureAttribute( const QString &attributeName, const QVariant &attributeValue );
%Docstring
Update the feature currently being edited by changing its
attribute ``attributeName`` to ``attributeValue``

:return: bool ``True`` on success

.. versionadded:: 3.2
%End

};


/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/gui/editorwidgets/core/qgseditorwidgetwrapper.h                  *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.py again   *
 ************************************************************************/
