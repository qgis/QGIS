/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/gui/qgscolorwidgets.h                                            *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.pl again   *
 ************************************************************************/





class QgsColorWidget : QWidget
{
%Docstring(signature="appended")
A base class for interactive color widgets. Widgets can either allow setting a single component of
a color (e.g., the red or green components), or an entire color. The :py:class:`QgsColorWidget` also keeps track of
any explicitly set hue for the color, so that this information is not lost when the widget is
set to a color with an ambiguous hue (e.g., black or white shades).
%End

%TypeHeaderCode
#include "qgscolorwidgets.h"
%End
  public:

    enum ColorComponent
    {
      Multiple,
      Red,
      Green,
      Blue,
      Hue,
      Saturation,
      Value,
      Alpha,
      Cyan,
      Magenta,
      Yellow,
      Black
    };

    QgsColorWidget( QWidget *parent /TransferThis/ = 0, ColorComponent component = Multiple );
%Docstring
Construct a new color widget.

:param parent: parent QWidget for the widget
:param component: color component the widget alters
%End

    QColor color() const;
%Docstring
Returns the current color for the widget

:return: current widget color

.. seealso:: :py:func:`setColor`
%End

    ColorComponent component() const;
%Docstring
Returns the color component which the widget controls

:return: color component for widget

.. seealso:: :py:func:`setComponent`
%End

    int componentValue() const;
%Docstring
Returns the current value of the widget's color component

:return: value of color component, or -1 if widget has multiple components or an invalid color
         set

.. seealso:: :py:func:`setComponentValue`

.. seealso:: :py:func:`component`
%End

    static QPixmap createDragIcon( const QColor &color );
%Docstring
Create an icon for dragging colors

:param color: for icon
%End

  public slots:

    virtual void setColor( const QColor &color, bool emitSignals = false );
%Docstring
Sets the color for the widget

:param color: widget color
:param emitSignals: set to ``True`` to emit the colorChanged signal after setting color

.. seealso:: :py:func:`color`
%End

    virtual void setComponent( QgsColorWidget::ColorComponent component );
%Docstring
Sets the color component which the widget controls

:param component: color component for widget

.. seealso:: :py:func:`component`
%End

    virtual void setComponentValue( int value );
%Docstring
Alters the widget's color by setting the value for the widget's color component

:param value: value for widget's color component. This value is automatically
              clipped to the range of valid values for the color component.

.. seealso:: :py:func:`componentValue`

.. seealso:: :py:func:`setComponent`

.. note::

   this method has no effect if the widget is set to the QgsColorWidget.Multiple
   component
%End

  signals:

    void colorChanged( const QColor &color );
%Docstring
Emitted when the widget's color changes

:param color: new widget color
%End

    void hovered();
%Docstring
Emitted when mouse hovers over widget.
%End

  protected:




    int componentRange() const;
%Docstring
Returns the range of valid values for the color widget's component

:return: maximum value allowed for color component, or -1 if widget has multiple components
%End

    static int componentRange( ColorComponent component );
%Docstring
Returns the range of valid values a color component

:return: maximum value allowed for color component
%End

    int componentValue( ColorComponent component ) const;
%Docstring
Returns the value of a component of the widget's current color. This method correctly
handles hue values when the color has an ambiguous hue (e.g., black or white shades)

:param component: color component to return

:return: value of color component, or -1 if widget has an invalid color set

.. seealso:: :py:func:`hue`
%End

    int hue() const;
%Docstring
Returns the hue for the widget. This may differ from the hue for the QColor returned by :py:func:`~QgsColorWidget.color`,
as QColor returns a hue of -1 if the color's hue is ambiguous (e.g., if the saturation is zero).

:return: explicitly set hue for widget
%End

    static void alterColor( QColor &color, QgsColorWidget::ColorComponent component, int newValue );
%Docstring
Alters a color by modifying the value of a specific color component

:param color: color to alter
:param component: color component to alter
:param newValue: new value of color component. Values are automatically clipped to a
                 valid range for the color component.
%End

    QColor::Spec colorSpec() const;
%Docstring
Returns color widget type of color, either RGB, HSV, CMYK, or Invalid if this component value is Multiple or Alpha
%End

    static QColor::Spec colorSpec( QgsColorWidget::ColorComponent component );
%Docstring
Returns ``component`` type of color, either RGB, HSV, CMYK, or Invalid if ``component`` value is Multiple or Alpha
%End

    static const QPixmap &transparentBackground();
%Docstring
Generates a checkboard pattern pixmap for use as a background to transparent colors

:return: checkerboard pixmap
%End

    virtual void dragEnterEvent( QDragEnterEvent *e );


    virtual void dropEvent( QDropEvent *e );


    virtual void mouseMoveEvent( QMouseEvent *e );

    virtual void mousePressEvent( QMouseEvent *e );

    virtual void mouseReleaseEvent( QMouseEvent *e );


};



class QgsColorWidgetAction: QWidgetAction
{
%Docstring(signature="appended")
An action containing a color widget, which can be embedded into a menu.

.. seealso:: :py:class:`QgsColorWidget`
%End

%TypeHeaderCode
#include "qgscolorwidgets.h"
%End
  public:

    QgsColorWidgetAction( QgsColorWidget *colorWidget, QMenu *menu = 0, QWidget *parent /TransferThis/ = 0 );
%Docstring
Construct a new color widget action.

:param colorWidget: :py:class:`QgsColorWidget` to show in action
:param menu: parent menu
:param parent: parent widget
%End

    QgsColorWidget *colorWidget();
%Docstring
Returns the color widget contained in the widget action.
%End

    void setDismissOnColorSelection( bool dismiss );
%Docstring
Sets whether the parent menu should be dismissed and closed when a color is selected
from the action's color widget.

:param dismiss: set to ``True`` (default) to immediately close the menu when a color is selected
                from the widget. If set to ``False``, the colorChanged signal will be emitted but the menu will
                stay open.

.. seealso:: :py:func:`dismissOnColorSelection`
%End

    bool dismissOnColorSelection() const;
%Docstring
Returns whether the parent menu will be dismissed after a color is selected from the
action's color widget.

.. seealso:: :py:func:`setDismissOnColorSelection`
%End

  signals:

    void colorChanged( const QColor &color );
%Docstring
Emitted when a color has been selected from the widget

:param color: selected color
%End

};




class QgsColorWheel : QgsColorWidget
{
%Docstring(signature="appended")
A color wheel widget. This widget consists of an outer ring which allows for hue selection, and an
inner rotating triangle which allows for saturation and value selection.
%End

%TypeHeaderCode
#include "qgscolorwidgets.h"
%End
  public:

    QgsColorWheel( QWidget *parent /TransferThis/ = 0 );
%Docstring
Constructs a new color wheel widget.

:param parent: parent QWidget for the widget
%End

    ~QgsColorWheel();

    virtual QSize sizeHint() const;

    virtual void paintEvent( QPaintEvent *event );


  public slots:

    virtual void setColor( const QColor &color, bool emitSignals = false );


  protected:

    virtual void resizeEvent( QResizeEvent *event );

    virtual void mouseMoveEvent( QMouseEvent *event );

    virtual void mousePressEvent( QMouseEvent *event );

    virtual void mouseReleaseEvent( QMouseEvent *event );


};



class QgsColorBox : QgsColorWidget
{
%Docstring(signature="appended")
A color box widget. This widget consists of a two dimensional rectangle filled with color
variations, where a different color component varies along both the horizontal and vertical
axis.
%End

%TypeHeaderCode
#include "qgscolorwidgets.h"
%End
  public:

    QgsColorBox( QWidget *parent /TransferThis/ = 0, ColorComponent component = Value );
%Docstring
Construct a new color box widget.

:param parent: parent QWidget for the widget
:param component: constant color component for the widget. The color components
                  which vary along the horizontal and vertical axis are automatically assigned
                  based on this constant color component.
%End

    ~QgsColorBox();

    virtual QSize sizeHint() const;

    virtual void paintEvent( QPaintEvent *event );


    virtual void setComponent( ColorComponent component );


  public slots:
    virtual void setColor( const QColor &color, bool emitSignals = false );


  protected:

    virtual void resizeEvent( QResizeEvent *event );

    virtual void mouseMoveEvent( QMouseEvent *event );

    virtual void mousePressEvent( QMouseEvent *event );

    virtual void mouseReleaseEvent( QMouseEvent *event );


};



class QgsColorRampWidget : QgsColorWidget
{
%Docstring(signature="appended")
A color ramp widget. This widget consists of an interactive box filled with a color which varies along
its length by a single color component (e.g., varying saturation from 0 to 100%).
%End

%TypeHeaderCode
#include "qgscolorwidgets.h"
%End
  public:

    enum Orientation
    {
      Horizontal,
      Vertical
    };

    QgsColorRampWidget( QWidget *parent /TransferThis/ = 0,
                        ColorComponent component = QgsColorWidget::Red,
                        Orientation orientation = QgsColorRampWidget::Horizontal );
%Docstring
Construct a new color ramp widget.

:param parent: parent QWidget for the widget
:param component: color component which varies along the ramp
:param orientation: orientation for widget
%End

    virtual QSize sizeHint() const;

    virtual void paintEvent( QPaintEvent *event );


    void setOrientation( Orientation orientation );
%Docstring
Sets the orientation for the color ramp

:param orientation: new orientation for the ramp

.. seealso:: :py:func:`orientation`
%End

    Orientation orientation() const;
%Docstring
Fetches the orientation for the color ramp

:return: orientation for the ramp

.. seealso:: :py:func:`setOrientation`
%End

    void setInteriorMargin( int margin );
%Docstring
Sets the margin between the edge of the widget and the ramp

:param margin: margin around the ramp

.. seealso:: :py:func:`interiorMargin`
%End

    int interiorMargin() const;
%Docstring
Fetches the margin between the edge of the widget and the ramp

:return: margin around the ramp

.. seealso:: :py:func:`setInteriorMargin`
%End

    void setShowFrame( bool showFrame );
%Docstring
Sets whether the ramp should be drawn within a frame

:param showFrame: set to ``True`` to draw a frame around the ramp

.. seealso:: :py:func:`showFrame`
%End

    bool showFrame() const;
%Docstring
Fetches whether the ramp is drawn within a frame

:return: ``True`` if a frame is drawn around the ramp

.. seealso:: :py:func:`setShowFrame`
%End

    void setMarkerSize( int markerSize );
%Docstring
Sets the size for drawing the triangular markers on the ramp

:param markerSize: marker size in pixels
%End

  signals:

    void valueChanged( int value );
%Docstring
Emitted when the widget's color component value changes

:param value: new value of color component
%End

  protected:

    virtual void mouseMoveEvent( QMouseEvent *event );

    virtual void wheelEvent( QWheelEvent *event );

    virtual void mousePressEvent( QMouseEvent *event );

    virtual void mouseReleaseEvent( QMouseEvent *event );

    virtual void keyPressEvent( QKeyEvent *event );


};



class QgsColorSliderWidget : QgsColorWidget
{
%Docstring(signature="appended")
A composite horizontal color ramp widget and associated spinbox for manual value entry.
%End

%TypeHeaderCode
#include "qgscolorwidgets.h"
%End
  public:

    QgsColorSliderWidget( QWidget *parent /TransferThis/ = 0, ColorComponent component = QgsColorWidget::Red );
%Docstring
Construct a new color slider widget.

:param parent: parent QWidget for the widget
:param component: color component which is controlled by the slider
%End

    virtual void setComponent( ColorComponent component );

    virtual void setComponentValue( int value );

    virtual void setColor( const QColor &color, bool emitSignals = false );


};



class QgsColorTextWidget : QgsColorWidget
{
%Docstring(signature="appended")
A line edit widget which displays colors as text and accepts string representations
of colors.
%End

%TypeHeaderCode
#include "qgscolorwidgets.h"
%End
  public:

    enum ColorTextFormat
    {
      HexRgb,
      HexRgbA,
      Rgb,
      Rgba
    };

    QgsColorTextWidget( QWidget *parent /TransferThis/ = 0 );
%Docstring
Construct a new color line edit widget.

:param parent: parent QWidget for the widget
%End

    virtual void setColor( const QColor &color, bool emitSignals = false );


    void setAllowOpacity( bool allowOpacity );
%Docstring
Sets whether opacity modification (transparency) is permitted.
Defaults to ``True``.

:param allowOpacity: set to ``False`` to disable opacity modification
%End

  protected:
    virtual void resizeEvent( QResizeEvent *event );


};



class QgsColorPreviewWidget : QgsColorWidget
{
%Docstring(signature="appended")
A preview box which displays one or two colors as swatches.
%End

%TypeHeaderCode
#include "qgscolorwidgets.h"
%End
  public:

    QgsColorPreviewWidget( QWidget *parent /TransferThis/ = 0 );
%Docstring
Construct a new color preview widget.

:param parent: parent QWidget for the widget
%End

    virtual void paintEvent( QPaintEvent *event );

    virtual QSize sizeHint() const;


    QColor color2() const;
%Docstring
Returns the secondary color for the widget

:return: secondary widget color, or an invalid color if the widget
         has no secondary color

.. seealso:: :py:func:`color`

.. seealso:: :py:func:`setColor2`
%End

  public slots:

    virtual void setColor2( const QColor &color );
%Docstring
Sets the second color for the widget

:param color: secondary widget color. Set to an invalid color to prevent
              drawing of a secondary color

.. seealso:: :py:func:`setColor`

.. seealso:: :py:func:`color2`
%End

  protected:

    virtual void mousePressEvent( QMouseEvent *e );


    virtual void mouseReleaseEvent( QMouseEvent *e );


    virtual void mouseMoveEvent( QMouseEvent *e );


};

/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/gui/qgscolorwidgets.h                                            *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.pl again   *
 ************************************************************************/
