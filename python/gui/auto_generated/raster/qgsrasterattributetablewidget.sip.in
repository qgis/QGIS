/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/gui/raster/qgsrasterattributetablewidget.h                       *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.py again   *
 ************************************************************************/







class QgsRasterAttributeTableWidget : QgsPanelWidget
{
%Docstring(signature="appended")
The :py:class:`QgsRasterAttributeTableWidget` class provides an attribute table for rasters and methods to edit the table.

.. versionadded:: 3.30
%End

%TypeHeaderCode
#include "qgsrasterattributetablewidget.h"
%End
  public:

    explicit QgsRasterAttributeTableWidget( QWidget *parent /TransferThis/ = 0, QgsRasterLayer *rasterLayer = 0, const int bandNumber = 0 );
%Docstring
Creates a new QgsRasterAttributeTableWidget

:param parent: parent widget
:param rasterLayer: raster layer
:param bandNumber: optional initial selected band number (default to 0, which makes the widget use the first available RAT, if any)
%End

    void setRasterLayer( QgsRasterLayer *rasterLayer, const int bandNumber = 0 );
%Docstring
Sets the raster layer and an optional band number.

:param rasterLayer: raster layer
:param bandNumber: optional initial selected band number (default to 0, which makes the widget use the first available RAT, if any)
%End

    bool isDirty( ) const;
%Docstring
Returns ``True`` if the associated raster attribute table is dirty
%End

    void setMessageBar( QgsMessageBar *bar );
%Docstring
Sets the message ``bar`` associated with the widget. This allows the widget to push feedback messages
to the appropriate message bar.
%End

  signals:

    void rendererChanged( );
%Docstring
This signal is emitted after a successful classify operation which changed the raster renderer.
%End

  public slots:

    void saveChanges();
%Docstring
Save the changes in the raster attribute table.
%End

    bool setEditable( bool editable, bool allowCancel = true );
%Docstring
Set the editable state, it may trigger save changes if the attribute table has unsave changes.

:param editable: editable state
:param allowCancel: optional (default ``True``) flag to show cancel option in confirm save dialog.
%End

  public:
    virtual void setDockMode( bool dockMode );

};

/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/gui/raster/qgsrasterattributetablewidget.h                       *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.py again   *
 ************************************************************************/
