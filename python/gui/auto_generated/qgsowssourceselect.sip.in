/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/gui/qgsowssourceselect.h                                         *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.py again   *
 ************************************************************************/






class QgsOWSSourceSelect : QgsAbstractDataSourceWidget, protected Ui::QgsOWSSourceSelectBase
{
%Docstring(signature="appended")
Dialog to create connections and add layers WCS etc.

This dialog allows the user to define and save connection information
for WMS servers, etc.

The user can then connect and add
layers from the WCS server to the map canvas.
%End

%TypeHeaderCode
#include "qgsowssourceselect.h"
%End
  public:
    struct SupportedFormat
    {
      QString format;
      QString label;
    };

    QgsOWSSourceSelect( const QString &service, QWidget *parent /TransferThis/ = 0, Qt::WindowFlags fl = QgsGuiUtils::ModalDialogFlags, QgsProviderRegistry::WidgetMode widgetMode = QgsProviderRegistry::WidgetMode::Standalone );
%Docstring
Constructor
%End

    virtual void refresh();

%Docstring
Triggered when the provider's connections need to be refreshed
%End

    virtual void reset();


    virtual void setMapCanvas( QgsMapCanvas *mapCanvas );



  protected slots:
    void showError( const QString &title, const QString &format, const QString &error );
%Docstring
show whatever error is exposed.
%End

    void showStatusMessage( const QString &message );
%Docstring
Sets status message to theMessage
%End

  protected:

    virtual QList<QgsOWSSourceSelect::SupportedFormat> providerFormats();
%Docstring
List of image formats (encodings) supported by provider

:return: list of format/label pairs
%End

    virtual QStringList selectedLayersFormats();
%Docstring
List of formats supported for currently selected layer item(s)
%End

    virtual QStringList selectedLayersCrses();
%Docstring
Server CRS supported for currently selected layer item(s)
%End

    virtual QStringList selectedLayersTimes();
%Docstring
List of times (temporalDomain timePosition/timePeriod for currently selected layer item(s)
%End


    void populateConnectionList();
%Docstring
Populate the connection list combo box
%End

    void populateFormats();
%Docstring
Populate supported formats
%End

    void clearFormats();
%Docstring
Clear previously set formats
%End

    void populateCrs();
%Docstring
Sets supported CRSs
%End

    void clearCrs();
%Docstring
Clear CRSs
%End

    void populateTimes();
%Docstring
Populate times
%End

    void clearTimes();
%Docstring
Clear times
%End

    QString connName();
%Docstring
Connection name
%End

    QString connectionInfo();
%Docstring
Connection info (uri)
%End

    void setConnectionListPosition();
%Docstring
Sets the server connection combo box to that stored in the config file.
%End

    void addDefaultServers();
%Docstring
Add a few example servers to the list.
%End


    virtual void populateLayerList();
%Docstring
Populate the layer list.
%End


    QString descriptionForAuthId( const QString &authId );
%Docstring
Returns a textual description for the authority id
%End



    virtual void enableLayersForCrs( QTreeWidgetItem *item );
%Docstring
layer name derived from latest layer selection (updated as long it's not edited manually)
%End

    QString selectedFormat();
%Docstring
Returns currently selected format
%End

    QString selectedCrs();
%Docstring
Returns currently selected Crs
%End

    QString selectedTime();
%Docstring
Returns currently selected time
%End

    QNetworkRequest::CacheLoadControl selectedCacheLoadControl();
%Docstring
Returns currently selected cache load control
%End

    void prepareExtent();
%Docstring
Prepares the spatial extent box with the general settings
including original crs, destination crs and the map
canvas if it is available.

.. versionadded:: 3.26
%End





};

/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/gui/qgsowssourceselect.h                                         *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.py again   *
 ************************************************************************/
