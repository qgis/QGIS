/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/gui/processing/models/qgsmodelgraphicitem.h                      *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.py again   *
 ************************************************************************/






class QgsModelDesignerFlatButtonGraphicItem : QGraphicsObject
{
%Docstring(signature="appended")
A flat button graphic item for use in the Processing model designer.

.. warning::

   Not stable API

.. versionadded:: 3.14
%End

%TypeHeaderCode
#include "qgsmodelgraphicitem.h"
%End
  public:
    QgsModelDesignerFlatButtonGraphicItem( QGraphicsItem *parent /TransferThis/, const QPicture &picture, const QPointF &position, const QSizeF &size = QSizeF( 16, 16 ) );
%Docstring
Constructor for QgsModelDesignerFlatButtonGraphicItem, with the
specified ``parent`` item.

The ``picture`` argument specifies a QPicture object containing the
graphic to render for the button. The button will be rendered at the
specified ``position`` and ``size``.
%End

    virtual void paint( QPainter *painter, const QStyleOptionGraphicsItem *option, QWidget *widget = 0 );

    virtual QRectF boundingRect() const;

    virtual void hoverEnterEvent( QGraphicsSceneHoverEvent *event );

    virtual void hoverLeaveEvent( QGraphicsSceneHoverEvent *event );

    virtual void mousePressEvent( QGraphicsSceneMouseEvent *event );



    QPointF position() const;
%Docstring
Returns the button's position.
%End

    void setPosition( const QPointF &position );
%Docstring
Sets the button's ``position``.
%End

    QgsModelGraphicsView *view();
%Docstring
Returns the associated model view.
%End

  signals:

    void clicked();
%Docstring
Emitted when the button is clicked.
%End

  protected:
    void setPicture( const QPicture &picture );
%Docstring
Sets the ``picture`` to render for the button graphics.
%End

};


class QgsModelDesignerFoldButtonGraphicItem : QgsModelDesignerFlatButtonGraphicItem
{
%Docstring(signature="appended")
A button allowing folding or expanding component graphics in the
Processing model designer.

.. warning::

   Not stable API

.. versionadded:: 3.14
%End

%TypeHeaderCode
#include "qgsmodelgraphicitem.h"
%End
  public:
    QgsModelDesignerFoldButtonGraphicItem( QGraphicsItem *parent /TransferThis/, bool folded, const QPointF &position, const QSizeF &size = QSizeF( 11, 11 ) );
%Docstring
Constructor for QgsModelDesignerFoldButtonGraphicItem, with the
specified ``parent`` item.

The ``folded`` argument specifies whether the button should initially
indicate the folded (collapsed) state.

The button will be rendered at the specified ``position`` and ``size``.
%End

    virtual void mousePressEvent( QGraphicsSceneMouseEvent *event );


  signals:

    void folded( bool folded );
%Docstring
Emitted when the button ``folded`` state changes.

If ``folded`` is ``True``, the button represents the collapsed state for
the item.
%End

};


class QgsModelDesignerSocketGraphicItem : QgsModelDesignerFlatButtonGraphicItem
{
%Docstring(signature="appended")
A socket allowing linking component together.

.. warning::

   Not stable API

.. versionadded:: 3.44
%End

%TypeHeaderCode
#include "qgsmodelgraphicitem.h"
%End
  public:
    QgsModelDesignerSocketGraphicItem( QgsModelComponentGraphicItem *parent /TransferThis/, QgsProcessingModelComponent *component, int index, const QPointF &position, Qt::Edge edge, const QSizeF &size = QSizeF( 11, 11 ) );
%Docstring
Constructor for QgsModelDesignerSocketGraphicItem, with the specified
``parent`` item.

The ``index`` argument specifies whether the input or output index of
this socket inside the component And the ``edge`` argument specifies if
it's an input socket( Qt.Edge.TopEdge ) or output ( Qt.Edge.BottomEdge )

The sockets will be rendered at the specified ``position``
%End

    virtual void paint( QPainter *painter, const QStyleOptionGraphicsItem *option, QWidget *widget = 0 );

    int index() const;
%Docstring
Returns the index of this socket in either
QgsModelDesignerSocketGraphicItem.mInSockets or
QgsModelDesignerSocketGraphicItem.mOutSockets array
%End
    Qt::Edge edge() const;
%Docstring
Returns on which edge this socket is: * Qt.Edge.TopEdge for input socket
* Qt.Edge.BottomEdge for output socket
%End
    bool isInput() const;
%Docstring
Returns whether the socket is an input socket or not

Convenient function around mEdge member
%End
    QgsProcessingModelComponent *component();
%Docstring
Return the component associated to the socket */
%End
    QgsModelComponentGraphicItem *componentItem();
%Docstring
Return the parent graphic item associated to the socket */
%End
  signals:


};


/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/gui/processing/models/qgsmodelgraphicitem.h                      *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.py again   *
 ************************************************************************/
