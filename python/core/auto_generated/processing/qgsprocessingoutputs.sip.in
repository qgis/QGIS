/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/processing/qgsprocessingoutputs.h                           *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.py again   *
 ************************************************************************/







class QgsProcessingOutputDefinition
{
%Docstring(signature="appended")

Base class for the definition of processing outputs.

Output definitions encapsulate the properties regarding the outputs from algorithms, such
as generated layers or calculated values.
%End

%TypeHeaderCode
#include "qgsprocessingoutputs.h"
%End
%ConvertToSubClassCode
    if ( sipCpp->type() == QgsProcessingOutputVectorLayer::typeName() )
      sipType = sipType_QgsProcessingOutputVectorLayer;
    else if ( sipCpp->type() == QgsProcessingOutputRasterLayer::typeName() )
      sipType = sipType_QgsProcessingOutputRasterLayer;
    else if ( sipCpp->type() == QgsProcessingOutputPointCloudLayer::typeName() )
      sipType = sipType_QgsProcessingOutputPointCloudLayer;
    else if ( sipCpp->type() == QgsProcessingOutputVectorTileLayer::typeName() )
      sipType = sipType_QgsProcessingOutputVectorTileLayer;
    else if ( sipCpp->type() == QgsProcessingOutputMapLayer::typeName() )
      sipType = sipType_QgsProcessingOutputMapLayer;
    else if ( sipCpp->type() == QgsProcessingOutputMultipleLayers::typeName() )
      sipType = sipType_QgsProcessingOutputMultipleLayers;
    else if ( sipCpp->type() == QgsProcessingOutputHtml::typeName() )
      sipType = sipType_QgsProcessingOutputHtml;
    else if ( sipCpp->type() == QgsProcessingOutputNumber::typeName() )
      sipType = sipType_QgsProcessingOutputNumber;
    else if ( sipCpp->type() == QgsProcessingOutputString::typeName() )
      sipType = sipType_QgsProcessingOutputString;
    else if ( sipCpp->type() == QgsProcessingOutputBoolean::typeName() )
      sipType = sipType_QgsProcessingOutputBoolean;
    else if ( sipCpp->type() == QgsProcessingOutputFolder::typeName() )
      sipType = sipType_QgsProcessingOutputFolder;
    else if ( sipCpp->type() == QgsProcessingOutputFile::typeName() )
      sipType = sipType_QgsProcessingOutputFile;
    else if ( sipCpp->type() == QgsProcessingOutputConditionalBranch::typeName() )
      sipType = sipType_QgsProcessingOutputConditionalBranch;
    else if ( sipCpp->type() == QgsProcessingOutputVariant::typeName() )
      sipType = sipType_QgsProcessingOutputVariant;
    else
      sipType = nullptr;
%End
  public:

    QgsProcessingOutputDefinition( const QString &name, const QString &description = QString() );
%Docstring
Constructor for QgsProcessingOutputDefinition.
%End

    virtual ~QgsProcessingOutputDefinition();

    virtual QString type() const = 0;
%Docstring
Unique output type name.
%End

    QString name() const;
%Docstring
Returns the name of the output. This is the internal identifier by which
algorithms access this output.

.. seealso:: :py:func:`setName`
%End

    void setName( const QString &name );
%Docstring
Sets the ``name`` of the output. This is the internal identifier by which
algorithms access this output.

.. seealso:: :py:func:`name`
%End

    QString description() const;
%Docstring
Returns the description for the output. This is the user-visible string
used to identify this output.

.. seealso:: :py:func:`setDescription`
%End

    void setDescription( const QString &description );
%Docstring
Sets the ``description`` for the output. This is the user-visible string
used to identify this output.

.. seealso:: :py:func:`description`
%End

    void setAutoCreated( bool autoCreated );
%Docstring
Sets whether an output was automatically created when adding a parameter.

:param autoCreated: set to ``True`` if the output is to be considered as automatically created.

.. seealso:: :py:func:`autoCreated`

.. versionadded:: 3.14
%End

    bool autoCreated() const;
%Docstring
Returns ``True`` if the output was automatically created when adding a parameter.

.. seealso:: :py:func:`setAutoCreated`

.. versionadded:: 3.14
%End

    virtual QString valueAsString( const QVariant &value, QgsProcessingContext &context, bool &ok /Out/ ) const;
%Docstring
Returns a string version of the parameter output ``value`` (if possible).

:param value: value to convert
:param context: processing context

:return: - value converted to string
         - ok: ``True`` if value could be represented as a string.

.. seealso:: :py:func:`valueAsFormattedString`

.. versionadded:: 3.36
%End

    virtual QString valueAsFormattedString( const QVariant &value, QgsProcessingContext &context, bool &ok /Out/ ) const;
%Docstring
Returns a HTML string version of the parameter output ``value`` (if possible).

By default this will return the same value as :py:func:`~QgsProcessingOutputDefinition.valueAsString`.

:param value: value to convert
:param context: processing context

:return: - value converted to string
         - ok: ``True`` if value could be represented as a string.

.. seealso:: :py:func:`valueAsString`

.. versionadded:: 3.36
%End

  protected:



};

typedef QList< const QgsProcessingOutputDefinition * > QgsProcessingOutputDefinitions;

class QgsProcessingOutputMapLayer : QgsProcessingOutputDefinition
{
%Docstring(signature="appended")
A map layer output for processing algorithms, where layers may be either vector or raster.

If the actual layer output type is known (e.g. always vector or always raster), use
:py:class:`QgsProcessingOutputVectorLayer` or :py:class:`QgsProcessingOutputRasterLayer` instead.
%End

%TypeHeaderCode
#include "qgsprocessingoutputs.h"
%End
  public:

    QgsProcessingOutputMapLayer( const QString &name, const QString &description = QString() );
%Docstring
Constructor for QgsProcessingOutputMapLayer.
%End

    static QString typeName();
%Docstring
Returns the type name for the output class.
%End

    virtual QString type() const;


};

class QgsProcessingOutputVectorLayer : QgsProcessingOutputDefinition
{
%Docstring(signature="appended")
A vector layer output for processing algorithms.
%End

%TypeHeaderCode
#include "qgsprocessingoutputs.h"
%End
  public:

    QgsProcessingOutputVectorLayer( const QString &name, const QString &description = QString(), Qgis::ProcessingSourceType type = Qgis::ProcessingSourceType::VectorAnyGeometry );
%Docstring
Constructor for QgsProcessingOutputVectorLayer.
%End

    static QString typeName();
%Docstring
Returns the type name for the output class.
%End
    virtual QString type() const;

    Qgis::ProcessingSourceType dataType() const;
%Docstring
Returns the layer type for the output layer.

.. seealso:: :py:func:`setDataType`
%End

    void setDataType( Qgis::ProcessingSourceType type );
%Docstring
Sets the layer ``type`` for the output layer.

.. seealso:: :py:func:`dataType`
%End

};

class QgsProcessingOutputRasterLayer : QgsProcessingOutputDefinition
{
%Docstring(signature="appended")
A raster layer output for processing algorithms.
%End

%TypeHeaderCode
#include "qgsprocessingoutputs.h"
%End
  public:

    QgsProcessingOutputRasterLayer( const QString &name, const QString &description = QString() );
%Docstring
Constructor for QgsProcessingOutputRasterLayer.
%End

    static QString typeName();
%Docstring
Returns the type name for the output class.
%End
    virtual QString type() const;
};

class QgsProcessingOutputPointCloudLayer : QgsProcessingOutputDefinition
{
%Docstring(signature="appended")
A pointcloud layer output for processing algorithms.

.. versionadded:: 3.24
%End

%TypeHeaderCode
#include "qgsprocessingoutputs.h"
%End
  public:

    QgsProcessingOutputPointCloudLayer( const QString &name, const QString &description = QString() );
%Docstring
Constructor for QgsProcessingOutputPointCloudLayer.
%End

    static QString typeName();
%Docstring
Returns the type name for the output class.
%End
    virtual QString type() const;
};

class QgsProcessingOutputMultipleLayers : QgsProcessingOutputDefinition
{
%Docstring(signature="appended")
A multi-layer output for processing algorithms which create map layers, when
the number and nature of the output layers is not predefined.

.. note::

   Always prefer to explicitly define :py:class:`QgsProcessingOutputVectorLayer`,
   :py:class:`QgsProcessingOutputRasterLayer` or :py:class:`QgsProcessingOutputMapLayer` where possible. :py:class:`QgsProcessingOutputMultipleLayers`
   should only ever be used when the number of output layers is not
   fixed - e.g. as a result of processing all layers in a specified
   folder.
%End

%TypeHeaderCode
#include "qgsprocessingoutputs.h"
%End
  public:

    QgsProcessingOutputMultipleLayers( const QString &name, const QString &description = QString() );
%Docstring
Constructor for QgsProcessingOutputMultipleLayers.
%End

    static QString typeName();
%Docstring
Returns the type name for the output class.
%End
    virtual QString type() const;

    virtual QString valueAsString( const QVariant &value, QgsProcessingContext &context, bool &ok /Out/ ) const;


};

class QgsProcessingOutputHtml : QgsProcessingOutputDefinition
{
%Docstring(signature="appended")
A HTML file output for processing algorithms.
%End

%TypeHeaderCode
#include "qgsprocessingoutputs.h"
%End
  public:

    QgsProcessingOutputHtml( const QString &name, const QString &description = QString() );
%Docstring
Constructor for QgsProcessingOutputHtml.
%End

    static QString typeName();
%Docstring
Returns the type name for the output class.
%End
    virtual QString type() const;
    virtual QString valueAsFormattedString( const QVariant &value, QgsProcessingContext &context, bool &ok /Out/ ) const;

};


class QgsProcessingOutputVariant : QgsProcessingOutputDefinition
{
%Docstring(signature="appended")
A variant output for processing algorithms, capable of storing any QVariant value.

.. versionadded:: 3.34
%End

%TypeHeaderCode
#include "qgsprocessingoutputs.h"
%End
  public:

    QgsProcessingOutputVariant( const QString &name, const QString &description = QString() );
%Docstring
Constructor for QgsProcessingOutputVariant.
%End

    static QString typeName();
%Docstring
Returns the type name for the output class.
%End
    virtual QString type() const;

    virtual QString valueAsString( const QVariant &value, QgsProcessingContext &context, bool &ok /Out/ ) const;


};

class QgsProcessingOutputNumber : QgsProcessingOutputDefinition
{
%Docstring(signature="appended")
A numeric output for processing algorithms.
%End

%TypeHeaderCode
#include "qgsprocessingoutputs.h"
%End
  public:

    QgsProcessingOutputNumber( const QString &name, const QString &description = QString() );
%Docstring
Constructor for QgsProcessingOutputNumber.
%End

    static QString typeName();
%Docstring
Returns the type name for the output class.
%End
    virtual QString type() const;
    virtual QString valueAsString( const QVariant &value, QgsProcessingContext &context, bool &ok /Out/ ) const;


};

class QgsProcessingOutputString : QgsProcessingOutputDefinition
{
%Docstring(signature="appended")
A string output for processing algorithms.
%End

%TypeHeaderCode
#include "qgsprocessingoutputs.h"
%End
  public:

    QgsProcessingOutputString( const QString &name, const QString &description = QString() );
%Docstring
Constructor for QgsProcessingOutputString.
%End

    static QString typeName();
%Docstring
Returns the type name for the output class.
%End
    virtual QString type() const;
};

class QgsProcessingOutputBoolean : QgsProcessingOutputDefinition
{
%Docstring(signature="appended")
A boolean output for processing algorithms.

.. versionadded:: 3.8
%End

%TypeHeaderCode
#include "qgsprocessingoutputs.h"
%End
  public:

    QgsProcessingOutputBoolean( const QString &name, const QString &description = QString() );
%Docstring
Constructor for :py:class:`QgsProcessingOutputNumber`.
%End

    static QString typeName();
%Docstring
Returns the type name for the output class.
%End
    virtual QString type() const;
    virtual QString valueAsString( const QVariant &value, QgsProcessingContext &context, bool &ok /Out/ ) const;

};

class QgsProcessingOutputFolder : QgsProcessingOutputDefinition
{
%Docstring(signature="appended")
A folder output for processing algorithms.
%End

%TypeHeaderCode
#include "qgsprocessingoutputs.h"
%End
  public:


    QgsProcessingOutputFolder( const QString &name, const QString &description = QString() );
%Docstring
Constructor for QgsProcessingOutputFolder.
%End

    static QString typeName();
%Docstring
Returns the type name for the output class.
%End
    virtual QString type() const;
    virtual QString valueAsFormattedString( const QVariant &value, QgsProcessingContext &context, bool &ok /Out/ ) const;


};

class QgsProcessingOutputFile : QgsProcessingOutputDefinition
{
%Docstring(signature="appended")
A file output for processing algorithms.
%End

%TypeHeaderCode
#include "qgsprocessingoutputs.h"
%End
  public:

    QgsProcessingOutputFile( const QString &name, const QString &description = QString() );
%Docstring
Constructor for QgsProcessingOutputFile.
%End

    static QString typeName();
%Docstring
Returns the type name for the output class.
%End
    virtual QString type() const;
    virtual QString valueAsFormattedString( const QVariant &value, QgsProcessingContext &context, bool &ok /Out/ ) const;


};

class QgsProcessingOutputConditionalBranch : QgsProcessingOutputDefinition
{
%Docstring(signature="appended")
A conditional branch output for processing algorithms, which represents a possible model logic
flow which branches out from this algorithm.

.. versionadded:: 3.14
%End

%TypeHeaderCode
#include "qgsprocessingoutputs.h"
%End
  public:

    QgsProcessingOutputConditionalBranch( const QString &name, const QString &description = QString() );
%Docstring
Constructor for QgsProcessingOutputConditionalBranch.
%End

    static QString typeName();
%Docstring
Returns the type name for the output class.
%End
    virtual QString type() const;
};

class QgsProcessingOutputVectorTileLayer : QgsProcessingOutputDefinition
{
%Docstring(signature="appended")
A vector tile layer output for processing algorithms.

.. versionadded:: 3.32
%End

%TypeHeaderCode
#include "qgsprocessingoutputs.h"
%End
  public:

    QgsProcessingOutputVectorTileLayer( const QString &name, const QString &description = QString() );
%Docstring
Constructor for QgsProcessingOutputVectorTileLayer.
%End

    static QString typeName();
%Docstring
Returns the type name for the output class.
%End
    virtual QString type() const;
};

/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/processing/qgsprocessingoutputs.h                           *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.py again   *
 ************************************************************************/
