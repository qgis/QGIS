/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/providers/sensorthings/qgssensorthingsutils.h               *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.pl again   *
 ************************************************************************/



class QgsSensorThingsUtils
{
%Docstring(signature="appended")
Utility functions for working with OGC SensorThings API services.

.. versionadded:: 3.36
%End

%TypeHeaderCode
#include "qgssensorthingsutils.h"
%End
  public:

    static Qgis::SensorThingsEntity stringToEntity( const QString &type );
%Docstring
Converts a string value to a :py:class:`Qgis`.SensorThingsEntity type.

Returns :py:class:`Qgis`.SensorThingsEntity.Invalid if the string could not be converted to a known entity type.
%End

    static QString displayString( Qgis::SensorThingsEntity type, bool plural = false );
%Docstring
Converts a :py:class:`Qgis`.SensorThingsEntity ``type`` to a user-friendly translated string.

If ``plural`` is ``True`` then a plural string is returned (ie "Things" instead of "Thing").
%End

    static Qgis::SensorThingsEntity entitySetStringToEntity( const QString &type );
%Docstring
Converts a string value corresponding to a SensorThings entity set to a :py:class:`Qgis`.SensorThingsEntity type.

Returns :py:class:`Qgis`.SensorThingsEntity.Invalid if the string could not be converted to a known entity set type.
%End

    static QString entityToSetString( Qgis::SensorThingsEntity type );
%Docstring
Converts a SensorThings entity set to a SensorThings entity set string.

.. versionadded:: 3.38
%End

    static QStringList propertiesForEntityType( Qgis::SensorThingsEntity type );
%Docstring
Returns the SensorThings properties which correspond to a specified entity ``type``.

.. versionadded:: 3.38
%End

    static QgsFields fieldsForEntityType( Qgis::SensorThingsEntity type );
%Docstring
Returns the fields which correspond to a specified entity ``type``.
%End

    static QgsFields fieldsForExpandedEntityType( Qgis::SensorThingsEntity baseType, const QList< Qgis::SensorThingsEntity > &expandedTypes );
%Docstring
Returns the fields which correspond to a specified entity ``baseType``, expanded
using the specified list of ``expandedTypes``.

.. versionadded:: 3.38
%End

    static QString geometryFieldForEntityType( Qgis::SensorThingsEntity type );
%Docstring
Returns the geometry field for a specified entity ``type``.
%End

    static bool entityTypeHasGeometry( Qgis::SensorThingsEntity type );
%Docstring
Returns ``True`` if the specified entity ``type`` can have geometry attached.
%End

    static Qgis::GeometryType geometryTypeForEntity( Qgis::SensorThingsEntity type );
%Docstring
Returns the geometry type for if the specified entity ``type``.

If there are no restrictions on the geometry type an ntity can have :py:class:`Qgis`.GeometryType.Unknown will be returned.

.. versionadded:: 3.38
%End

    static QString filterForWkbType( Qgis::SensorThingsEntity entityType, Qgis::WkbType wkbType );
%Docstring
Returns a filter string which restricts results to those matching the specified
``entityType`` and ``wkbType``.
%End

    static QString filterForExtent( const QString &geometryField, const QgsRectangle &extent );
%Docstring
Returns a filter string which restricts results to those within the specified
``extent``.

The ``extent`` should always be specified in EPSG:4326.

.. versionadded:: 3.38
%End

    static QString combineFilters( const QStringList &filters );
%Docstring
Combines a set of SensorThings API filter operators.

See https://docs.ogc.org/is/18-088/18-088.html#requirement-request-data-filter

.. versionadded:: 3.38
%End

    static QList< Qgis::GeometryType > availableGeometryTypes( const QString &uri, Qgis::SensorThingsEntity type, QgsFeedback *feedback = 0, const QString &authCfg = QString() );
%Docstring
Returns a list of available geometry types for the server at the specified ``uri``
and entity ``type``.

This method will block while network requests are made to the server.
%End

    static QList< Qgis::SensorThingsEntity > expandableTargets( Qgis::SensorThingsEntity type );
%Docstring
Returns a list of permissible expand targets for a given base entity ``type``.

.. versionadded:: 3.38
%End

    static Qgis::RelationshipCardinality relationshipCardinality( Qgis::SensorThingsEntity baseType, Qgis::SensorThingsEntity relatedType, bool &valid /Out/ );
%Docstring
Returns the cardinality of the relationship between a base entity type and a related entity type.

:param baseType: base entity type
:param relatedType: related entity type

:return: - relationship cardinality
         - valid: will be set to ``True`` if a relationship exists between the entity types, or ``False`` if no relationship exists


.. versionadded:: 3.38
%End

    static QString asQueryString( Qgis::SensorThingsEntity baseType, const QList< QgsSensorThingsExpansionDefinition > &expansions );
%Docstring
Returns a list of ``expansions`` as a valid SensorThings API query string, eg "$expand=Locations($orderby=id desc;$top=3;$expand=Datastreams($top=101))".

The base entity type for the query must be specified.

.. versionadded:: 3.38
%End

};


class QgsSensorThingsExpansionDefinition
{
%Docstring(signature="appended")
Encapsulates information about how relationships in a SensorThings API service should be expanded.

.. versionadded:: 3.38
%End

%TypeHeaderCode
#include "qgssensorthingsutils.h"
%End
  public:

    QgsSensorThingsExpansionDefinition( Qgis::SensorThingsEntity childEntity = Qgis::SensorThingsEntity::Invalid,
                                        const QString &orderBy = QString(),
                                        Qt::SortOrder sortOrder = Qt::SortOrder::AscendingOrder,
                                        int limit = QgsSensorThingsUtils::DEFAULT_EXPANSION_LIMIT );
%Docstring
Constructor for QgsSensorThingsExpansionDefinition, targeting the specified child entity type.
%End

    bool isValid() const;
%Docstring
Returns ``True`` if the definition is valid.
%End

    Qgis::SensorThingsEntity childEntity() const;
%Docstring
Returns the target child entity which should be expanded.

.. seealso:: :py:func:`setChildEntity`
%End

    void setChildEntity( Qgis::SensorThingsEntity entity );
%Docstring
Sets the target child ``entity`` which should be expanded.

.. seealso:: :py:func:`childEntity`
%End

    QString orderBy() const;
%Docstring
Returns the field name to order the expanded child entities by.

.. seealso:: :py:func:`sortOrder`

.. seealso:: :py:func:`setOrderBy`
%End

    void setOrderBy( const QString &field );
%Docstring
Sets the ``field`` name to order the expanded child entities by.

.. seealso:: :py:func:`orderBy`

.. seealso:: :py:func:`setSortOrder`
%End

    Qt::SortOrder sortOrder() const;
%Docstring
Returns the sort order for the expanded child entities.

.. seealso:: :py:func:`orderBy`

.. seealso:: :py:func:`setSortOrder`
%End

    void setSortOrder( Qt::SortOrder order );
%Docstring
Sets the sort order for the expanded child entities.

.. seealso:: :py:func:`setOrderBy`

.. seealso:: :py:func:`sortOrder`
%End

    int limit() const;
%Docstring
Returns the limit on the number of child features to fetch.

Returns -1 if no limit is defined.

.. seealso:: :py:func:`setLimit`
%End

    void setLimit( int limit );
%Docstring
Sets the ``limit`` on the number of child features to fetch.

Set to -1 if no limit is desired.

.. seealso:: :py:func:`limit`
%End

    QString toString() const;
%Docstring
Returns a string encapsulation of the expansion definition.

.. seealso:: :py:func:`fromString`
%End

    static QgsSensorThingsExpansionDefinition fromString( const QString &string );
%Docstring
Returns a QgsSensorThingsExpansionDefinition from a string representation.

.. seealso:: :py:func:`toString`
%End

    QString asQueryString( Qgis::SensorThingsEntity parentEntityType, const QStringList &additionalOptions = QStringList() ) const;
%Docstring
Returns the expansion as a valid SensorThings API query string, eg "$expand=Observations($orderby=phenomenonTime desc;$top=10)".

The parent entity type for the expansion must be specified.

Optionally a list of additional query options can be specified for the expansion.
%End

    bool operator==( const QgsSensorThingsExpansionDefinition &other ) const;
    bool operator!=( const QgsSensorThingsExpansionDefinition &other ) const;

    SIP_PYOBJECT __repr__();
%MethodCode
    if ( !sipCpp->isValid() )
    {
      sipRes = PyUnicode_FromString( "<QgsSensorThingsExpansionDefinition: invalid>" );
    }
    else
    {
      QString innerDefinition;
      if ( !sipCpp->orderBy().isEmpty() )
      {
        innerDefinition = QStringLiteral( "by %1 (%2)" ).arg( sipCpp->orderBy(), sipCpp->sortOrder() == Qt::SortOrder::AscendingOrder ? QStringLiteral( "asc" ) : QStringLiteral( "desc" ) );
      }
      if ( sipCpp->limit() >= 0 )
      {
        if ( !innerDefinition.isEmpty() )
          innerDefinition = QStringLiteral( "%1, limit %2" ).arg( innerDefinition ).arg( sipCpp->limit() );
        else
          innerDefinition = QStringLiteral( "limit %1" ).arg( sipCpp->limit() );
      }

      QString str = QStringLiteral( "<QgsSensorThingsExpansionDefinition: %1%2>" ).arg( qgsEnumValueToKey( sipCpp->childEntity() ), innerDefinition.isEmpty() ? QString() : ( QStringLiteral( " " ) + innerDefinition ) );
      sipRes = PyUnicode_FromString( str.toUtf8().constData() );
    }
%End

};

/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/providers/sensorthings/qgssensorthingsutils.h               *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.pl again   *
 ************************************************************************/
