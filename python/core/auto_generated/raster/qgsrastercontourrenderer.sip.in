/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/raster/qgsrastercontourrenderer.h                           *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.py again   *
 ************************************************************************/





class QgsRasterContourRenderer : QgsRasterRenderer
{
%Docstring(signature="appended")
Raster renderer that generates contours on the fly for a source raster band.

.. versionadded:: 3.14
%End

%TypeHeaderCode
#include "qgsrastercontourrenderer.h"
%End
  public:
    explicit QgsRasterContourRenderer( QgsRasterInterface *input );
%Docstring
Creates a contour renderer
%End
    ~QgsRasterContourRenderer();


    virtual QgsRasterContourRenderer *clone() const /Factory/;

%Docstring
QgsRasterContourRenderer cannot be copied. Use :py:func:`~QgsRasterContourRenderer.clone` instead.
%End
    virtual Qgis::RasterRendererFlags flags() const;


    static QgsRasterRenderer *create( const QDomElement &elem, QgsRasterInterface *input ) /Factory/;
%Docstring
Creates an instance of the renderer based on definition from XML (used by renderer registry)
%End

    virtual void writeXml( QDomDocument &doc, QDomElement &parentElem ) const;


    virtual QgsRasterBlock *block( int bandNo, const QgsRectangle &extent, int width, int height, QgsRasterBlockFeedback *feedback = 0 ) /Factory/;


    virtual QList<int> usesBands() const;

    virtual QList<QgsLayerTreeModelLegendNode *> createLegendNodes( QgsLayerTreeLayer *nodeLayer ) /Factory/;

    virtual int inputBand() const;

    virtual bool setInputBand( int band );


    double contourInterval() const;
%Docstring
Returns the interval of contour lines generation
%End
    void setContourInterval( double interval );
%Docstring
Sets the interval of contour lines generation
%End

    QgsLineSymbol *contourSymbol() const;
%Docstring
Returns the symbol used for contour lines
%End
    void setContourSymbol( QgsLineSymbol *symbol /Transfer/ );
%Docstring
Sets the symbol used for contour lines. Takes ownership of the passed symbol
%End

    double contourIndexInterval() const;
%Docstring
Returns the interval of index contour lines (index contour lines are typical further apart and with a wider line symbol)
%End
    void setContourIndexInterval( double interval );
%Docstring
Sets the interval of index contour lines (index contour lines are typical further apart and with a wider line symbol)
%End

    QgsLineSymbol *contourIndexSymbol() const;
%Docstring
Returns the symbol of index contour lines
%End
    void setContourIndexSymbol( QgsLineSymbol *symbol /Transfer/ );
%Docstring
Sets the symbol of index contour lines
%End

    double downscale() const;
%Docstring
Returns by how much the renderer will scale down the request to the data provider.
For example, for a raster block 1000x500 with downscale 10, the renderer will request raster 100x50 from provider.
Higher downscale makes contour lines more simplified (at the expense of losing some detail).
The value of one means there will be no downscaling.
%End

    void setDownscale( double scale );
%Docstring
Sets by how much the renderer will scale down the request to the data provider.

.. seealso:: :py:func:`downscale`
%End

  private:
    QgsRasterContourRenderer( const QgsRasterContourRenderer & );
    const QgsRasterContourRenderer &operator=( const QgsRasterContourRenderer & );
};


/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/raster/qgsrastercontourrenderer.h                           *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.py again   *
 ************************************************************************/
