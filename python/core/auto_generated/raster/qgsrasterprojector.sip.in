/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/raster/qgsrasterprojector.h                                 *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.py again   *
 ************************************************************************/








class QgsRasterProjector : QgsRasterInterface
{
%Docstring(signature="appended")
:py:class:`QgsRasterProjector` implements approximate projection support for
it calculates grid of points in source CRS for target CRS + extent
which are used to calculate affine transformation matrices.
%End

%TypeHeaderCode
#include "qgsrasterprojector.h"
%End
  public:
    static const QMetaObject staticMetaObject;

  public:

    enum Precision
    {
      Approximate,
      Exact,
    };

    QgsRasterProjector();

    virtual QgsRasterProjector *clone() const /Factory/;


    virtual int bandCount() const;


    virtual Qgis::DataType dataType( int bandNo ) const;


 void setCrs( const QgsCoordinateReferenceSystem &srcCRS, const QgsCoordinateReferenceSystem &destCRS,
                                   int srcDatumTransform = -1, int destDatumTransform = -1 ) /Deprecated/;
%Docstring
Sets the source and destination CRS

.. deprecated:: QGIS 3.8
  use transformContext version instead
%End

    void setCrs( const QgsCoordinateReferenceSystem &srcCRS, const QgsCoordinateReferenceSystem &destCRS,
                 QgsCoordinateTransformContext transformContext );
%Docstring
Sets source CRS to ``srcCRS`` and destination CRS to ``destCRS`` and the transformation context to ``transformContext``

.. versionadded:: 3.8
%End

    QgsCoordinateReferenceSystem sourceCrs() const;
%Docstring
Returns the source CRS
%End

    QgsCoordinateReferenceSystem destinationCrs() const;
%Docstring
Returns the destination CRS
%End

    Precision precision() const;
    void setPrecision( Precision precision );
    static QString precisionLabel( Precision precision );

    virtual QgsRasterBlock *block( int bandNo, const QgsRectangle &extent, int width, int height, QgsRasterBlockFeedback *feedback = 0 ) /Factory/;


    bool destExtentSize( const QgsRectangle &srcExtent, int srcXSize, int srcYSize,
                         QgsRectangle &destExtent /Out/, int &destXSize /Out/, int &destYSize /Out/ );
%Docstring
Calculate destination extent and size from source extent and size
%End

    static bool extentSize( const QgsCoordinateTransform &ct,
                            const QgsRectangle &srcExtent, int srcXSize, int srcYSize,
                            QgsRectangle &destExtent /Out/, int &destXSize /Out/, int &destYSize /Out/ );
%Docstring
Calculate destination extent and size from source extent and size
%End

};




/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/raster/qgsrasterprojector.h                                 *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.py again   *
 ************************************************************************/
