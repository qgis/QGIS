/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/raster/qgscolorrampshader.h                                 *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.pl again   *
 ************************************************************************/






class QgsColorRampShader : QgsRasterShaderFunction
{
%Docstring(signature="appended")
A ramp shader will color a raster pixel based on a list of values ranges in a ramp.
%End

%TypeHeaderCode
#include "qgscolorrampshader.h"
%End
  public:

    QgsColorRampShader( double minimumValue = 0.0, double maximumValue = 255.0, QgsColorRamp *colorRamp /Transfer/ = 0, Qgis::ShaderInterpolationMethod type = Qgis::ShaderInterpolationMethod::Linear, Qgis::ShaderClassificationMethod classificationMode = Qgis::ShaderClassificationMethod::Continuous );
%Docstring
Creates a new color ramp shader.

:param minimumValue: minimum value for the raster shader
:param maximumValue: maximum value for the raster shader
:param type: interpolation type used
:param classificationMode: method used to classify the color ramp shader
:param colorRamp: vector color ramp used to classify the color ramp shader. Ownership is transferred to the shader.
%End

    ~QgsColorRampShader();

    QgsColorRampShader( const QgsColorRampShader &other );
%Docstring
Copy constructor
%End


    bool operator==( const QgsColorRampShader &other ) const;

    struct ColorRampItem
    {
      ColorRampItem();
%Docstring
default constructor
%End
      ColorRampItem( double val, const QColor &col, const QString &lbl = QString() );
%Docstring
convenience constructor
%End

      QString label;
      double value;
      QColor color;

      bool operator<( const QgsColorRampShader::ColorRampItem &other ) const;

      bool operator!=( const QgsColorRampShader::ColorRampItem &other ) const;
    };

    QList<QgsColorRampShader::ColorRampItem> colorRampItemList() const;
%Docstring
Returns the custom color map.

.. seealso:: :py:func:`setColorRampItemList`
%End

    Qgis::ShaderInterpolationMethod colorRampType() const;
%Docstring
Returns the color ramp interpolation method.

.. seealso:: :py:func:`setColorRampType`
%End

    QString colorRampTypeAsQString() const;
%Docstring
Returns the color ramp type as a string.
%End

    void setColorRampItemList( const QList<QgsColorRampShader::ColorRampItem> &list ); //TODO: sort on set

    void setColorRampType( Qgis::ShaderInterpolationMethod colorRampType );
%Docstring
Sets the color ramp interpolation method.

.. seealso:: :py:func:`colorRampType`
%End

    bool isEmpty() const;
%Docstring
Whether the color ramp contains any items

.. versionadded:: 3.4
%End

    QgsColorRamp *sourceColorRamp() const;
%Docstring
Returns the source color ramp.

.. seealso:: :py:func:`setSourceColorRamp`
%End

    QgsColorRamp *createColorRamp() const /Factory/;
%Docstring
Creates a gradient color ramp from shader settings.

.. versionadded:: 3.18
%End

    void setSourceColorRamp( QgsColorRamp *colorramp /Transfer/ );
%Docstring
Set the source color ramp. Ownership is transferred to the shader.

.. seealso:: :py:func:`sourceColorRamp`
%End

    void setColorRampType( const QString &type );
%Docstring
Sets the color ramp type
%End

    void classifyColorRamp( int classes = 0, int band = -1, const QgsRectangle &extent = QgsRectangle(), QgsRasterInterface *input = 0 );
%Docstring
Classify color ramp shader

:param classes: number of classes
:param band: raster band used in classification (only used in quantile mode)
:param extent: extent used in classification (only used in quantile mode)
:param input: raster input used in classification (only used in quantile mode)
%End

    void classifyColorRamp( int band = -1, const QgsRectangle &extent = QgsRectangle(), QgsRasterInterface *input = 0 ) /PyName=classifyColorRampV2/;
%Docstring
Classify color ramp shader

:param band: raster band used in classification (quantile mode only)
:param extent: extent used in classification (quantile mode only)
:param input: raster input used in classification (quantile mode only)
%End

    virtual bool shade( double value, int *returnRedValue /Out/, int *returnGreenValue /Out/, int *returnBlueValue /Out/, int *returnAlphaValue /Out/ ) const;

     virtual bool shade( double redValue, double greenValue,
                double blueValue, double alphaValue,
                int *returnRedValue /Out/, int *returnGreenValue /Out/,
                int *returnBlueValue /Out/, int *returnAlphaValue /Out/ ) const;
    virtual void legendSymbologyItems( QList< QPair< QString, QColor > > &symbolItems /Out/ ) const;


    QDomElement writeXml( QDomDocument &doc, const QgsReadWriteContext &context = QgsReadWriteContext() ) const;
%Docstring
Writes configuration to a new DOM element

.. versionadded:: 3.4
%End

    void readXml( const QDomElement &elem, const QgsReadWriteContext &context = QgsReadWriteContext() );
%Docstring
Reads configuration from the given DOM element

.. versionadded:: 3.4
%End

    void setClassificationMode( Qgis::ShaderClassificationMethod classificationMode );
%Docstring
Sets the classification mode.

.. seealso:: :py:func:`classificationMode`
%End

    Qgis::ShaderClassificationMethod classificationMode() const;
%Docstring
Returns the classification mode.

.. seealso:: :py:func:`setClassificationMode`
%End

    void setClip( bool clip );
%Docstring
Sets whether the shader should not render values out of range.

:param clip: set to ``True`` to clip values which are out of range.

.. seealso:: :py:func:`clip`
%End

    bool clip() const;
%Docstring
Returns whether the shader will clip values which are out of range.

.. seealso:: :py:func:`setClip`
%End

    const QgsColorRampLegendNodeSettings *legendSettings() const;
%Docstring
Returns the color ramp shader legend settings.

.. seealso:: :py:func:`setLegendSettings`

.. versionadded:: 3.18
%End

    void setLegendSettings( QgsColorRampLegendNodeSettings *settings /Transfer/ );
%Docstring
Sets the color ramp shader legend ``settings``.

Ownership of ``settings`` is transferred.

.. seealso:: :py:func:`legendSettings`

.. versionadded:: 3.18
%End

  protected:


};

/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/raster/qgscolorrampshader.h                                 *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.pl again   *
 ************************************************************************/
