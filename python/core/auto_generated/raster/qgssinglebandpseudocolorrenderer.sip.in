/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/raster/qgssinglebandpseudocolorrenderer.h                   *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.pl again   *
 ************************************************************************/





class QgsSingleBandPseudoColorRenderer: QgsRasterRenderer
{
%Docstring(signature="appended")
Raster renderer pipe for single band pseudocolor.
%End

%TypeHeaderCode
#include "qgssinglebandpseudocolorrenderer.h"
%End
  public:

    QgsSingleBandPseudoColorRenderer( QgsRasterInterface *input, int band = -1, QgsRasterShader *shader /Transfer/ = 0 );
%Docstring
Note: takes ownership of :py:class:`QgsRasterShader`
%End


    virtual QgsSingleBandPseudoColorRenderer *clone() const /Factory/;

%Docstring
QgsSingleBandPseudoColorRenderer cannot be copied. Use :py:func:`~QgsSingleBandPseudoColorRenderer.clone` instead.
%End
    virtual Qgis::RasterRendererFlags flags() const;

    static QgsRasterRenderer *create( const QDomElement &elem, QgsRasterInterface *input ) /Factory/;

    virtual QgsRasterBlock *block( int bandNo, const QgsRectangle &extent, int width, int height, QgsRasterBlockFeedback *feedback = 0 ) /Factory/;


    void setShader( QgsRasterShader *shader /Transfer/ );
%Docstring
Takes ownership of the shader
%End

    QgsRasterShader *shader();
%Docstring
Returns the raster shader
%End

    const QgsRasterShader *shader() const /PyName=constShader/;
%Docstring

.. note::

   available in Python as constShader
%End

    virtual bool canCreateRasterAttributeTable( ) const;


    void createShader( QgsColorRamp *colorRamp /Transfer/ = 0,
                       Qgis::ShaderInterpolationMethod colorRampType = Qgis::ShaderInterpolationMethod::Linear,
                       Qgis::ShaderClassificationMethod classificationMode = Qgis::ShaderClassificationMethod::Continuous,
                       int classes = 0,
                       bool clip = false,
                       const QgsRectangle &extent = QgsRectangle() );
%Docstring
Creates a color ramp shader

:param colorRamp: vector color ramp. Ownership is transferred to the shader.
:param colorRampType: type of color ramp shader
:param classificationMode: classification mode
:param classes: number of classes
:param clip: clip out of range values
:param extent: extent used in classification (only used in quantile mode)
%End

    virtual void writeXml( QDomDocument &doc, QDomElement &parentElem ) const;

    virtual QList< QPair< QString, QColor > > legendSymbologyItems() const;

    virtual QList<QgsLayerTreeModelLegendNode *> createLegendNodes( QgsLayerTreeLayer *nodeLayer ) /Factory/;

    virtual QList<int> usesBands() const;

    virtual void toSld( QDomDocument &doc, QDomElement &element, const QVariantMap &props = QVariantMap() ) const;

    virtual bool accept( QgsStyleEntityVisitorInterface *visitor ) const;


 int band() const /Deprecated/;
%Docstring
Returns the band used by the renderer

.. deprecated:: QGIS 3.38
   use :py:func:`~QgsSingleBandPseudoColorRenderer.inputBand` instead
%End

 void setBand( int bandNo ) /Deprecated/;
%Docstring
Sets the band used by the renderer.

.. seealso:: :py:func:`band`

.. deprecated:: QGIS 3.38
   use :py:func:`~QgsSingleBandPseudoColorRenderer.setInputBand` instead
%End

    virtual int inputBand() const;

    virtual bool setInputBand( int band );


    double classificationMin() const;
    double classificationMax() const;
    void setClassificationMin( double min );
    void setClassificationMax( double max );

  private:
    QgsSingleBandPseudoColorRenderer( const QgsSingleBandPseudoColorRenderer & );
    const QgsSingleBandPseudoColorRenderer &operator=( const QgsSingleBandPseudoColorRenderer & );
};

/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/raster/qgssinglebandpseudocolorrenderer.h                   *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.pl again   *
 ************************************************************************/
