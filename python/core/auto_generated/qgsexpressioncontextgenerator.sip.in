/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/qgsexpressioncontextgenerator.h                             *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.py again   *
 ************************************************************************/



class QgsExpressionContextGenerator
{
%Docstring(signature="appended")
Abstract interface for generating an expression context.

You need to implement this interface in a class and register this class with
:py:func:`QgsFieldExpressionWidget.registerExpressionGenerator()`.

This is used for example in :py:class:`QgsPropertyOverrideButton` or :py:class:`QgsFieldExpressionWidget`
classes which will ask for a new :py:class:`QgsExpressionContext` every time the expression
editor is opened. This way they are able to provide an up-to-date expression
editor even when the environment changes.
%End

%TypeHeaderCode
#include "qgsexpressioncontextgenerator.h"
%End
  public:

    virtual QgsExpressionContext createExpressionContext() const = 0;
%Docstring
This method needs to be reimplemented in all classes which implement this interface
and return an expression context.
%End

    virtual ~QgsExpressionContextGenerator();
};

/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/qgsexpressioncontextgenerator.h                             *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.py again   *
 ************************************************************************/
