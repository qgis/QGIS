/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/qgsunittypes.h                                              *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.py again   *
 ************************************************************************/






class QgsUnitTypes
{
%Docstring(signature="appended")
Helper functions for various unit types.
%End

%TypeHeaderCode
#include "qgsunittypes.h"
%End
  public:
    static const QMetaObject staticMetaObject;

  public:

    struct DistanceValue
    {

      double value;

      Qgis::DistanceUnit unit;
    };

    struct AreaValue
    {

      double value;

      Qgis::AreaUnit unit;
    };

    typedef QList<Qgis::RenderUnit> RenderUnitList;

    static QString encodeUnitType( Qgis::UnitType type );
%Docstring
Encodes a unit ``type`` to a string.

:return: encoded string

.. seealso:: :py:func:`decodeUnitType`

.. versionadded:: 3.10
%End

    static Qgis::UnitType decodeUnitType( const QString &string, bool *ok /Out/ = 0 );
%Docstring
Decodes a unit type from a ``string``.

:param string: string to decode

:return: - decoded unit type
         - ok: boolean, ``True`` if string was converted successfully

.. seealso:: :py:func:`encodeUnitType`

.. versionadded:: 3.10
%End



    static Qgis::DistanceUnitType unitType( Qgis::DistanceUnit unit );
%Docstring
Returns the type for a distance unit.
%End

    static QString encodeUnit( Qgis::DistanceUnit unit );
%Docstring
Encodes a distance unit to a string.

:param unit: unit to encode

:return: encoded string

.. seealso:: :py:func:`decodeDistanceUnit`
%End

    static Qgis::DistanceUnit decodeDistanceUnit( const QString &string, bool *ok /Out/ = 0 );
%Docstring
Decodes a distance unit from a string.

:param string: string to decode

:return: - decoded units
         - ok: boolean, ``True`` if string was converted successfully

.. seealso:: :py:func:`encodeUnit`
%End

    static QString toString( Qgis::DistanceUnit unit );
%Docstring
Returns a translated string representing a distance unit.

:param unit: unit to convert to string

.. seealso:: :py:func:`stringToDistanceUnit`
%End

    static QString toAbbreviatedString( Qgis::DistanceUnit unit );
%Docstring
Returns a translated abbreviation representing a distance unit.

:param unit: unit to convert to string

.. seealso:: :py:func:`stringToDistanceUnit`
%End

    static Qgis::DistanceUnit stringToDistanceUnit( const QString &string, bool *ok /Out/ = 0 );
%Docstring
Converts a translated string to a distance unit.

:param string: string representing a distance unit

:return: - the distance unit
         - ok: boolean, ``True`` if string was converted successfully

.. seealso:: :py:func:`toString`
%End

    static double fromUnitToUnitFactor( Qgis::DistanceUnit fromUnit, Qgis::DistanceUnit toUnit );
%Docstring
Returns the conversion factor between the specified distance units.

:param fromUnit: distance unit to convert from
:param toUnit: distance unit to convert to

:return: multiplication factor to convert between units
%End


    static Qgis::DistanceUnitType unitType( Qgis::AreaUnit unit );
%Docstring
Returns the type for an areal unit.
%End

    static QString encodeUnit( Qgis::AreaUnit unit );
%Docstring
Encodes an areal unit to a string.

:param unit: unit to encode

:return: encoded string

.. seealso:: :py:func:`decodeAreaUnit`
%End

    static Qgis::AreaUnit decodeAreaUnit( const QString &string, bool *ok /Out/ = 0 );
%Docstring
Decodes an areal unit from a string.

:param string: string to decode

:return: - decoded units
         - ok: boolean, ``True`` if string was converted successfully

.. seealso:: :py:func:`encodeUnit`
%End

    static QString toString( Qgis::AreaUnit unit );
%Docstring
Returns a translated string representing an areal unit.

:param unit: unit to convert to string

.. seealso:: :py:func:`stringToAreaUnit`
%End

    static QString toAbbreviatedString( Qgis::AreaUnit unit );
%Docstring
Returns a translated abbreviation representing an areal unit.

:param unit: unit to convert to string

.. seealso:: :py:func:`stringToAreaUnit`
%End

    static Qgis::AreaUnit stringToAreaUnit( const QString &string, bool *ok /Out/ = 0 );
%Docstring
Converts a translated string to an areal unit.

:param string: string representing an areal unit

:return: - the area unit
         - ok: boolean, ``True`` if string was converted successfully

.. seealso:: :py:func:`toString`
%End

    static double fromUnitToUnitFactor( Qgis::AreaUnit fromUnit, Qgis::AreaUnit toUnit );
%Docstring
Returns the conversion factor between the specified areal units.

:param fromUnit: area unit to convert from
:param toUnit: area unit to convert to

:return: multiplication factor to convert between units
%End

    static Qgis::AreaUnit distanceToAreaUnit( Qgis::DistanceUnit distanceUnit );
%Docstring
Converts a distance unit to its corresponding area unit, e.g., meters to square meters

:param distanceUnit: distance unit to convert

:return: matching areal unit
%End

    static Qgis::DistanceUnit areaToDistanceUnit( Qgis::AreaUnit areaUnit );
%Docstring
Converts an area unit to its corresponding distance unit, e.g., square meters to meters

:param areaUnit: area unit to convert

:return: matching distance unit

.. versionadded:: 3.10
%End


    static QString encodeUnit( Qgis::TemporalUnit unit );
%Docstring
Encodes a temporal ``unit`` to a string.

:return: encoded string

.. seealso:: :py:func:`decodeTemporalUnit`

.. versionadded:: 3.14
%End

    static Qgis::TemporalUnit decodeTemporalUnit( const QString &string, bool *ok /Out/ = 0 );
%Docstring
Decodes a temporal unit from a ``string``.

:param string: string to decode

:return: - decoded units
         - ok: boolean, ``True`` if string was converted successfully

.. seealso:: :py:func:`encodeUnit`

.. versionadded:: 3.14
%End

    static QString toString( Qgis::TemporalUnit unit );
%Docstring
Returns a translated string representing a temporal ``unit``.

.. seealso:: :py:func:`stringToTemporalUnit`

.. versionadded:: 3.14
%End

    static QString toAbbreviatedString( Qgis::TemporalUnit unit );
%Docstring
Returns a translated abbreviation representing a temporal ``unit``.

.. seealso:: :py:func:`stringToTemporalUnit`

.. versionadded:: 3.14
%End

    static Qgis::TemporalUnit stringToTemporalUnit( const QString &string, bool *ok /Out/ = 0 );
%Docstring
Converts a translated ``string`` to a temporal unit.

:param string: string representing a volume unit

:return: - the temporal unit
         - ok: boolean, ``True`` if string was converted successfully

.. seealso:: :py:func:`toString`

.. versionadded:: 3.14
%End

    static double fromUnitToUnitFactor( Qgis::TemporalUnit fromUnit, Qgis::TemporalUnit toUnit );
%Docstring
Returns the conversion factor between the specified temporal units.

.. note::

   Conversion to or from month units assumes a 30 day month length.

.. note::

   Conversion to or from year based units assumes a 365.25 day year length.

:param fromUnit: temporal unit to convert from
:param toUnit: temporal unit to convert to

:return: multiplication factor to convert between units

.. versionadded:: 3.14
%End


    static Qgis::DistanceUnitType unitType( Qgis::VolumeUnit unit );
%Docstring
Returns the type for an volume unit.

.. versionadded:: 3.10
%End

    static QString encodeUnit( Qgis::VolumeUnit unit );
%Docstring
Encodes a volume ``unit`` to a string.

:return: encoded string

.. seealso:: :py:func:`decodeVolumeUnit`

.. versionadded:: 3.10
%End

    static Qgis::VolumeUnit decodeVolumeUnit( const QString &string, bool *ok /Out/ = 0 );
%Docstring
Decodes a volume unit from a ``string``.

:param string: string to decode

:return: - decoded units
         - ok: boolean, ``True`` if string was converted successfully

.. seealso:: :py:func:`encodeUnit`

.. versionadded:: 3.10
%End

    static QString toString( Qgis::VolumeUnit unit );
%Docstring
Returns a translated string representing a volume ``unit``.

.. seealso:: :py:func:`stringToVolumeUnit`

.. versionadded:: 3.10
%End

    static QString toAbbreviatedString( Qgis::VolumeUnit unit );
%Docstring
Returns a translated abbreviation representing a volume ``unit``.

.. seealso:: :py:func:`stringToVolumeUnit`

.. versionadded:: 3.10
%End

    static Qgis::VolumeUnit stringToVolumeUnit( const QString &string, bool *ok /Out/ = 0 );
%Docstring
Converts a translated ``string`` to a volume unit.

:param string: string representing a volume unit

:return: - the volume unit
         - ok: boolean, ``True`` if string was converted successfully

.. seealso:: :py:func:`toString`

.. versionadded:: 3.10
%End

    static double fromUnitToUnitFactor( Qgis::VolumeUnit fromUnit, Qgis::VolumeUnit toUnit );
%Docstring
Returns the conversion factor between the specified volume units.

:param fromUnit: volume unit to convert from
:param toUnit: volume unit to convert to

:return: multiplication factor to convert between units

.. versionadded:: 3.10
%End

    static Qgis::VolumeUnit distanceToVolumeUnit( Qgis::DistanceUnit distanceUnit );
%Docstring
Converts a distance unit to its corresponding volume unit, e.g., meters to cubic meters

:param distanceUnit: distance unit to convert

:return: matching volume unit

.. versionadded:: 3.10
%End

    static Qgis::DistanceUnit volumeToDistanceUnit( Qgis::VolumeUnit volumeUnit );
%Docstring
Converts a volume unit to its corresponding distance unit, e.g., cubic meters to meters

:param volumeUnit: volume unit to convert

:return: matching distance unit

.. versionadded:: 3.10
%End


    static QString encodeUnit( Qgis::AngleUnit unit );
%Docstring
Encodes an angular unit to a string.

:param unit: unit to encode

:return: encoded string

.. seealso:: :py:func:`decodeAngleUnit`
%End

    static Qgis::AngleUnit decodeAngleUnit( const QString &string, bool *ok /Out/ = 0 );
%Docstring
Decodes an angular unit from a string.

:param string: string to decode

:return: - decoded units
         - ok: boolean, ``True`` if string was converted successfully

.. seealso:: :py:func:`encodeUnit`
%End

    static QString toString( Qgis::AngleUnit unit );
%Docstring
Returns a translated string representing an angular unit.

:param unit: unit to convert to string
%End

    static double fromUnitToUnitFactor( Qgis::AngleUnit fromUnit, Qgis::AngleUnit toUnit );
%Docstring
Returns the conversion factor between the specified angular units.

:param fromUnit: angle unit to convert from
:param toUnit: angle unit to convert to

:return: multiplication factor to convert between units
%End

    static QString formatAngle( double angle, int decimals, Qgis::AngleUnit unit );
%Docstring
Returns an angle formatted as a friendly string.

:param angle: angle to format
:param decimals: number of decimal places to show. A value of -1 indicates that an appropriate number of decimal places should automatically be selected.
:param unit: unit of angle

:return: formatted angle string
%End

    static QgsUnitTypes::DistanceValue scaledDistance( double distance, Qgis::DistanceUnit unit, int decimals, bool keepBaseUnit = false );
%Docstring
Will convert a ``distance`` with a given ``unit`` to a distance value which is nice to display.
It will convert between different units (e.g. from meters to kilometers or millimeters)
if appropriate, unless forced otherwise with ``keepBaseUnit``.
The value will also be rounded to ``decimals`` (be prepared that the returned value is still a double so it will require
further formatting when converting to a string).
%End

    static QgsUnitTypes::AreaValue scaledArea( double area, Qgis::AreaUnit unit, int decimals, bool keepBaseUnit = false );
%Docstring
Will convert an ``area`` with a given ``unit`` to an area value which is nice to display.
It will convert between different units (e.g. from square meters to square kilometers)
if appropriate, unless forced otherwise with ``keepBaseUnit``.
The value will also be rounded to ``decimals`` (be prepared that the returned value is still a double so it will require
further formatting when converting to a string).
%End

    static QString formatDistance( double distance, int decimals, Qgis::DistanceUnit unit, bool keepBaseUnit = false );
%Docstring
Returns an distance formatted as a friendly string.

:param distance: distance to format
:param decimals: number of decimal places to show
:param unit: unit of distance
:param keepBaseUnit: set to ``False`` to allow conversion of large distances to more suitable units, e.g., meters to
                     kilometers

:return: formatted distance string

.. seealso:: :py:func:`formatArea`
%End

    static QString formatArea( double area, int decimals, Qgis::AreaUnit unit, bool keepBaseUnit = false );
%Docstring
Returns an area formatted as a friendly string.

:param area: area to format
:param decimals: number of decimal places to show
:param unit: unit of area
:param keepBaseUnit: set to ``False`` to allow conversion of large areas to more suitable units, e.g., square meters to
                     square kilometers

:return: formatted area string

.. seealso:: :py:func:`formatDistance`
%End


    static QString encodeUnit( Qgis::RenderUnit unit );
%Docstring
Encodes a render unit to a string.

:param unit: unit to encode

:return: encoded string

.. seealso:: :py:func:`decodeRenderUnit`
%End

    static Qgis::RenderUnit decodeRenderUnit( const QString &string, bool *ok /Out/ = 0 );
%Docstring
Decodes a render unit from a string.

:param string: string to decode

:return: - decoded units
         - ok: boolean, ``True`` if string was converted successfully

.. seealso:: :py:func:`encodeUnit`
%End


    static QString toString( Qgis::RenderUnit unit );
%Docstring
Returns a translated string representing a render ``unit``.
%End

    static QString toAbbreviatedString( Qgis::RenderUnit unit );
%Docstring
Returns a translated abbreviation representing a render unit.

:param unit: unit to convert to string

.. versionadded:: 3.8
%End



    static QString encodeUnit( Qgis::LayoutUnit unit );
%Docstring
Encodes a layout unit to a string.

:param unit: unit to encode

:return: encoded string

.. seealso:: :py:func:`decodeLayoutUnit`
%End

    static Qgis::LayoutUnit decodeLayoutUnit( const QString &string, bool *ok /Out/ = 0 );
%Docstring
Decodes a layout unit from a string.

:param string: string to decode

:return: - decoded units
         - ok: boolean, ``True`` if string was converted successfully

.. seealso:: :py:func:`encodeUnit`
%End

    static Qgis::LayoutUnitType unitType( Qgis::LayoutUnit units );
%Docstring
Returns the type for a unit of measurement.
%End

    static QString toAbbreviatedString( Qgis::LayoutUnit unit );
%Docstring
Returns a translated abbreviation representing a layout ``unit`` (e.g. "mm").
%End

    static QString toString( Qgis::LayoutUnit unit );
%Docstring
Returns a translated string representing a layout ``unit``.
%End

};

/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/qgsunittypes.h                                              *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.py again   *
 ************************************************************************/
