/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/geometry/qgsorientedbox3d.h                                 *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.py again   *
 ************************************************************************/






class QgsOrientedBox3D
{
%Docstring(signature="appended")
Represents a oriented (rotated) box in 3 dimensions.

.. warning::

   Non-stable API, exposed to Python for unit testing only.

.. versionadded:: 3.34
%End

%TypeHeaderCode
#include "qgsorientedbox3d.h"
%End
  public:

    QgsOrientedBox3D();
%Docstring
Constructor for a null oriented box.
%End

    QgsOrientedBox3D( const QList<double> &center, const QList< double > &halfAxes );
%Docstring
Constructor for a oriented box, with a specified center and half axes matrix.
%End

    QgsOrientedBox3D( const QgsVector3D &center, const QList< QgsVector3D > &halfAxes );
%Docstring
Constructor for a oriented box, with a specified center and half axes matrix.
%End

    static QgsOrientedBox3D fromBox3D( const QgsBox3D &box );
%Docstring
Constructs an oriented box from an axis-aligned bounding box.
%End

    bool operator==( const QgsOrientedBox3D &other ) const /HoldGIL/;

    bool operator!=( const QgsOrientedBox3D &other ) const /HoldGIL/;

    bool isNull() const /HoldGIL/;
%Docstring
Returns ``True`` if the box is a null box.
%End

    double centerX() const /HoldGIL/;
%Docstring
Returns the center x-coordinate.

.. seealso:: :py:func:`centerY`

.. seealso:: :py:func:`centerZ`
%End

    double centerY() const /HoldGIL/;
%Docstring
Returns the center y-coordinate.

.. seealso:: :py:func:`centerX`

.. seealso:: :py:func:`centerZ`
%End

    double centerZ() const /HoldGIL/;
%Docstring
Returns the center z-coordinate.

.. seealso:: :py:func:`centerX`

.. seealso:: :py:func:`centerY`
%End

    QgsVector3D center() const /HoldGIL/;
%Docstring
Returns the vector to the center of the box.
%End


    QList< double > halfAxesList() const /HoldGIL,PyName=halfAxes/;
%Docstring
Returns the half axes matrix;
%End

    QgsBox3D extent() const /HoldGIL/;
%Docstring
Returns the overall bounding box of the object.
%End

    QVector< QgsVector3D > corners() const /HoldGIL/;
%Docstring
Returns an array of all corners as 3D vectors.
%End

    QgsVector3D size() const /HoldGIL/;
%Docstring
Returns size of sides of the box.
%End

    QgsBox3D reprojectedExtent( const QgsCoordinateTransform &ct ) const throw( QgsCsException ) /HoldGIL/;
%Docstring
Reprojects corners of this box using the given coordinate ``transform``
and returns axis-aligned box containing reprojected corners.

:raises QgsCsException: 
%End

    QgsOrientedBox3D transformed( const QgsMatrix4x4 &transform ) const /HoldGIL/;
%Docstring
Returns box transformed by a 4x4 matrix.
%End

    bool intersects( const QgsOrientedBox3D &other ) const /HoldGIL/;
%Docstring
Returns ``True`` if the box intersects the ``other`` box.
%End

    SIP_PYOBJECT __repr__();
%MethodCode
    QString str = QStringLiteral( "<QgsOrientedBox3D([%1, %2, %3], [%4, %5, %6, %7, %8, %9, %10, %11, %12])>" )
                  .arg( sipCpp->centerX() )
                  .arg( sipCpp->centerY() )
                  .arg( sipCpp->centerZ() )
                  .arg( sipCpp->halfAxes()[0] )
                  .arg( sipCpp->halfAxes()[1] )
                  .arg( sipCpp->halfAxes()[2] )
                  .arg( sipCpp->halfAxes()[3] )
                  .arg( sipCpp->halfAxes()[4] )
                  .arg( sipCpp->halfAxes()[5] )
                  .arg( sipCpp->halfAxes()[6] )
                  .arg( sipCpp->halfAxes()[7] )
                  .arg( sipCpp->halfAxes()[8] );
    sipRes = PyUnicode_FromString( str.toUtf8().constData() );
%End

};


/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/geometry/qgsorientedbox3d.h                                 *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.py again   *
 ************************************************************************/
