/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/geometry/qgswkbtypes.h                                      *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.py again   *
 ************************************************************************/







class QgsWkbTypes
{
%Docstring(signature="appended")
Handles storage of information regarding WKB types and their properties.
%End

%TypeHeaderCode
#include "qgswkbtypes.h"
%End
  public:
    static const QMetaObject staticMetaObject;

  public:

    static Qgis::WkbType singleType( Qgis::WkbType type ) /HoldGIL/;
%Docstring
Returns the single type for a WKB type. For example, for MultiPolygon WKB types the single type would be Polygon.

.. seealso:: :py:func:`isSingleType`

.. seealso:: :py:func:`multiType`

.. seealso:: :py:func:`curveType`

.. seealso:: :py:func:`flatType`
%End

    static Qgis::WkbType multiType( Qgis::WkbType type ) /HoldGIL/;
%Docstring
Returns the multi type for a WKB type. For example, for Polygon WKB types the multi type would be MultiPolygon.

.. seealso:: :py:func:`promoteNonPointTypesToMulti`

.. seealso:: :py:func:`isMultiType`

.. seealso:: :py:func:`singleType`

.. seealso:: :py:func:`curveType`

.. seealso:: :py:func:`flatType`
%End


    static Qgis::WkbType promoteNonPointTypesToMulti( Qgis::WkbType type ) /HoldGIL/;
%Docstring
Promotes a WKB geometry type to its multi-type equivalent, with the exception of point geometry types.

Specifically, this method should be used to determine the most-permissive possible resultant WKB type which can result
from subtracting parts of a geometry. A single-point geometry type can never become a multi-point geometry type as
a result of a subtraction, but a single-line or single-polygon geometry CAN become a multipart geometry as a result of subtracting
portions of the geometry.

.. seealso:: :py:func:`multiType`

.. seealso:: :py:func:`singleType`

.. versionadded:: 3.24
%End

    static Qgis::WkbType curveType( Qgis::WkbType type ) /HoldGIL/;
%Docstring
Returns the curve type for a WKB type. For example, for Polygon WKB types the curve type would be CurvePolygon.

.. note::

   Returns `CompoundCurve` for `CircularString` (and its Z/M variants)

.. seealso:: :py:func:`linearType`

.. seealso:: :py:func:`isMultiType`

.. seealso:: :py:func:`isCurvedType`

.. seealso:: :py:func:`singleType`

.. seealso:: :py:func:`flatType`

.. seealso:: :py:func:`multiType`

.. versionadded:: 3.10
%End

    static Qgis::WkbType linearType( Qgis::WkbType type ) /HoldGIL/;
%Docstring
Returns the linear type for a WKB type. For example, for a CompoundCurve, the linear type would be LineString.

.. seealso:: :py:func:`curveType`

.. seealso:: :py:func:`isMultiType`

.. seealso:: :py:func:`isCurvedType`

.. seealso:: :py:func:`singleType`

.. seealso:: :py:func:`flatType`

.. seealso:: :py:func:`multiType`

.. versionadded:: 3.14
%End

    static Qgis::WkbType flatType( Qgis::WkbType type ) /HoldGIL/;
%Docstring
Returns the flat type for a WKB type. This is the WKB type minus any Z or M dimensions.
For example, for PolygonZM WKB types the single type would be Polygon.

.. seealso:: :py:func:`singleType`

.. seealso:: :py:func:`multiType`

.. seealso:: :py:func:`curveType`
%End

    static Qgis::WkbType zmType( Qgis::WkbType type, bool hasZ, bool hasM ) /HoldGIL/;
%Docstring
Returns the modified input geometry type according to hasZ / hasM
%End

    static Qgis::WkbType parseType( const QString &wktStr );
%Docstring
Attempts to extract the WKB type from a WKT string.

:param wktStr: a valid WKT string
%End

    static bool isSingleType( Qgis::WkbType type ) /HoldGIL/;
%Docstring
Returns ``True`` if the WKB type is a single type.

.. seealso:: :py:func:`isMultiType`

.. seealso:: :py:func:`singleType`
%End

    static bool isMultiType( Qgis::WkbType type ) /HoldGIL/;
%Docstring
Returns ``True`` if the WKB type is a multi type.

.. seealso:: :py:func:`isSingleType`

.. seealso:: :py:func:`multiType`
%End

    static bool isCurvedType( Qgis::WkbType type ) /HoldGIL/;
%Docstring
Returns ``True`` if the WKB type is a curved type or can contain curved geometries.
%End

    static int wkbDimensions( Qgis::WkbType type ) /HoldGIL/;
%Docstring
Returns the inherent dimension of the geometry type as an integer. Returned value will
always be less than or equal to the coordinate dimension.

:return: 0 for point geometries, 1 for line geometries, 2 for polygon geometries
         Invalid geometry types will return a dimension of 0.

.. seealso:: :py:func:`coordDimensions`
%End

    static int coordDimensions( Qgis::WkbType type ) /HoldGIL/;
%Docstring
Returns the coordinate dimension of the geometry type as an integer. Returned value will
be between 2-4, depending on whether the geometry type contains the Z or M dimensions.
Invalid geometry types will return a dimension of 0.

.. seealso:: :py:func:`wkbDimensions`
%End

    static Qgis::GeometryType geometryType( Qgis::WkbType type ) /HoldGIL/;
%Docstring
Returns the geometry type for a WKB type, e.g., both MultiPolygon and CurvePolygon would have a
PolygonGeometry geometry type.
GeometryCollections are reported as :py:class:`Qgis`.GeometryType.Unknown.
%End

    static QString displayString( Qgis::WkbType type ) /HoldGIL/;
%Docstring
Returns a non-translated display string type for a WKB type, e.g., the geometry name used in WKT geometry representations.
%End

    static QString translatedDisplayString( Qgis::WkbType type ) /HoldGIL/;
%Docstring
Returns a translated display string type for a WKB type, e.g., the geometry name used in WKT geometry representations.

.. versionadded:: 3.18
%End

    static QString geometryDisplayString( Qgis::GeometryType type ) /HoldGIL/;
%Docstring
Returns a display string for a geometry type.

This will return one of the following strings:

- Point
- Line
- Polygon
- Unknown Geometry
- No Geometry
- Invalid Geometry
%End

    static bool hasZ( Qgis::WkbType type ) /HoldGIL/;
%Docstring
Tests whether a WKB type contains the z-dimension.

:return: ``True`` if type has z values

.. seealso:: :py:func:`addZ`

.. seealso:: :py:func:`hasM`
%End

    static bool hasM( Qgis::WkbType type ) /HoldGIL/;
%Docstring
Tests whether a WKB type contains m values.

:return: ``True`` if type has m values

.. seealso:: :py:func:`addM`

.. seealso:: :py:func:`hasZ`
%End

    static Qgis::WkbType addZ( Qgis::WkbType type ) /HoldGIL/;
%Docstring
Adds the z dimension to a WKB type and returns the new type

:param type: original type

.. seealso:: :py:func:`addM`

.. seealso:: :py:func:`dropZ`

.. seealso:: :py:func:`hasZ`
%End

    static Qgis::WkbType addM( Qgis::WkbType type ) /HoldGIL/;
%Docstring
Adds the m dimension to a WKB type and returns the new type

:param type: original type

.. seealso:: :py:func:`addZ`

.. seealso:: :py:func:`dropM`

.. seealso:: :py:func:`hasM`
%End

    static Qgis::WkbType dropZ( Qgis::WkbType type ) /HoldGIL/;
%Docstring
Drops the z dimension (if present) for a WKB type and returns the new type.

:param type: original type

.. seealso:: :py:func:`dropM`

.. seealso:: :py:func:`addZ`
%End

    static Qgis::WkbType dropM( Qgis::WkbType type ) /HoldGIL/;
%Docstring
Drops the m dimension (if present) for a WKB type and returns the new type.

:param type: original type

.. seealso:: :py:func:`dropZ`

.. seealso:: :py:func:`addM`
%End

    static Qgis::WkbType to25D( Qgis::WkbType type ) /HoldGIL/;
%Docstring
Will convert the 25D version of the flat type if supported or Unknown if not supported.

:param type: The type to convert

:return: the 25D version of the type or Unknown
%End

};

/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/geometry/qgswkbtypes.h                                      *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.py again   *
 ************************************************************************/
