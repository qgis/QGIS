/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/geometry/qgsmultilinestring.h                               *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.pl again   *
 ************************************************************************/




class QgsMultiLineString: QgsMultiCurve
{
%Docstring(signature="appended")
Multi line string geometry collection.
%End

%TypeHeaderCode
#include "qgsmultilinestring.h"
%End
  public:

    QgsMultiLineString() /HoldGIL/;
%Docstring
Constructor for an empty multilinestring geometry.
%End

    QgsMultiLineString( const QList< QgsLineString > &linestrings ) /HoldGIL/;
%Docstring
Constructor for a multilinestring containing the specified ``linestrings``.

The ``linestrings`` will be internally cloned.

.. versionadded:: 3.38
%End

    QgsMultiLineString( const QList< QgsLineString * > &linestrings /Transfer/ ) /HoldGIL/;
%Docstring
Constructor for a multilinestring containing the specified ``linestrings``.

Ownership of the ``linestrings`` will be transferred to the multilinestring.

.. versionadded:: 3.38
%End


    SIP_PYOBJECT lineStringN( int index ) /TypeHint="QgsLineString"/;
%Docstring
Returns the line string with the specified ``index``.

:raises IndexError: if no line string with the specified index exists.

.. versionadded:: 3.16
%End
%MethodCode
    if ( a0 < 0 || a0 >= sipCpp->numGeometries() )
    {
      PyErr_SetString( PyExc_IndexError, QByteArray::number( a0 ) );
      sipIsErr = 1;
    }
    else
    {
      return sipConvertFromType( sipCpp->lineStringN( a0 ), sipType_QgsLineString, NULL );
    }
%End


    virtual QString geometryType() const /HoldGIL/;

    virtual QgsMultiLineString *clone() const /Factory/;

    virtual void clear();

    virtual bool fromWkt( const QString &wkt );

    virtual QDomElement asGml2( QDomDocument &doc, int precision = 17, const QString &ns = "gml", QgsAbstractGeometry::AxisOrder axisOrder = QgsAbstractGeometry::AxisOrder::XY ) const;

    virtual QDomElement asGml3( QDomDocument &doc, int precision = 17, const QString &ns = "gml", QgsAbstractGeometry::AxisOrder axisOrder = QgsAbstractGeometry::AxisOrder::XY ) const;

    virtual bool addGeometry( QgsAbstractGeometry *g /Transfer/ );

    bool addGeometries( const QVector< QgsAbstractGeometry * > &geometries /Transfer/ ) final;
    virtual bool insertGeometry( QgsAbstractGeometry *g /Transfer/, int index );

    virtual QgsMultiLineString *simplifyByDistance( double tolerance ) const /Factory/;


    virtual QgsMultiCurve *toCurveType() const /Factory/;

%Docstring
Returns the geometry converted to the more generic curve type :py:class:`QgsMultiCurve`

:return: the converted geometry. Caller takes ownership
%End


    virtual QgsMultiLineString *createEmptyWithSameType() const /Factory/;


    SIP_PYOBJECT __repr__();
%MethodCode
    QString wkt = sipCpp->asWkt();
    if ( wkt.length() > 1000 )
      wkt = wkt.left( 1000 ) + QStringLiteral( "..." );
    QString str = QStringLiteral( "<QgsMultiLineString: %1>" ).arg( wkt );
    sipRes = PyUnicode_FromString( str.toUtf8().constData() );
%End

    QgsMultiLineString *measuredLine( double start, double end ) const /Factory/;
%Docstring
Re-write the measure ordinate (or add one, if it isn't already there) interpolating
the measure between the supplied ``start`` and ``end`` values.

.. versionadded:: 3.36
%End

  protected:

    virtual bool wktOmitChildType() const;

};


/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/geometry/qgsmultilinestring.h                               *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.pl again   *
 ************************************************************************/
