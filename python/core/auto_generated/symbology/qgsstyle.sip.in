/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/symbology/qgsstyle.h                                        *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.py again   *
 ************************************************************************/






typedef QMap<QString, QgsColorRamp * > QgsVectorColorRampMap;
typedef QMap<int, QString> QgsSymbolGroupMap;

typedef QMap<QString, QgsTextFormat > QgsTextFormatMap;

typedef QMap<QString, QgsPalLayerSettings > QgsLabelSettingsMap;


typedef QMultiMap<QString, QString> QgsSmartConditionMap;


class QgsStyle : QObject
{

%TypeHeaderCode
#include "qgsstyle.h"
%End
  public:

    enum class SymbolTableColumn
    {
      Id,
      Name,
      XML,
      FavoriteId,
    };

    enum class TagTableColumn
    {
      Id,
      Name,
    };

    enum class TagmapTableColumn
    {
      TagId,
      SymbolId,
    };

    enum class ColorRampTableColumn
    {
      Id,
      Name,
      XML,
      FavoriteId,
    };

    enum class TextFormatTableColumn
    {
      Id,
      Name,
      XML,
      FavoriteId,
    };

    enum class LabelSettingsTableColumn
    {
      Id,
      Name,
      XML,
      FavoriteId,
    };

    enum class SmartGroupTableColumn
    {
      Id,
      Name,
      XML,
    };

    QgsStyle( QObject *parent /TransferThis/ = 0 );
%Docstring
Constructor for QgsStyle, with the specified ``parent`` object.
%End
    ~QgsStyle();

    enum StyleEntity
    {
      SymbolEntity,
      TagEntity,
      ColorrampEntity,
      SmartgroupEntity,
      TextFormatEntity,
      LabelSettingsEntity,
      LegendPatchShapeEntity,
      Symbol3DEntity,
    };

    QString name() const;
%Docstring
Returns the name of the style.

.. seealso:: :py:func:`setName`

.. versionadded:: 3.26
%End

    void setName( const QString &name );
%Docstring
Sets the ``name`` of the style.

.. seealso:: :py:func:`name`

.. versionadded:: 3.26
%End

    bool isInitialized() const;
%Docstring
Returns ``True`` if the style is initialized and ready for use.

Most instances of QgsStyle will already be initialized. However, if the
style is the :py:func:`QgsStyle.defaultStyle()` object it may have been created using
lazy initialization and will return ``False`` until it is :py:func:`~QgsStyle.initialized`.

.. versionadded:: 3.36
%End

    bool isReadOnly() const;
%Docstring
Returns ``True`` if the style is considered a read-only library.

.. note::

   This flag is used to control GUI operations, and does not prevent calling functions
   which mutate the style directly via the API.

.. seealso:: :py:func:`setReadOnly`

.. versionadded:: 3.26
%End

    void setReadOnly( bool readOnly );
%Docstring
Sets whether the style is considered a read-only library.

.. note::

   This flag is used to control GUI operations, and does not prevent calling functions
   which mutate the style directly via the API.

.. seealso:: :py:func:`isReadOnly`

.. versionadded:: 3.26
%End

    bool addEntity( const QString &name, const QgsStyleEntityInterface *entity, bool update = false );
%Docstring
Adds an ``entity`` to the style, with the specified ``name``. Ownership is not transferred.

If ``update`` is ``True`` then the style database is updated automatically as a result.

Returns ``True`` if the add operation was successful.

.. note::

   Adding an entity with the name of existing one replaces the existing one automatically.

.. versionadded:: 3.10
%End

    bool addSymbol( const QString &name, QgsSymbol *symbol /Transfer/, bool update = false );
%Docstring
Adds a symbol to style and takes symbol's ownership

.. note::

   Adding a symbol with the name of existing one replaces it.

:param name: is the name of the symbol being added or updated
:param symbol: is the Vector symbol
:param update: set to ``True`` when the style database has to be updated, by default it is ``False``

:return: success status of the operation
%End

    bool addColorRamp( const QString &name, QgsColorRamp *colorRamp /Transfer/, bool update = false );
%Docstring
Adds a color ramp to the style. Calling this method takes the ramp's ownership.

.. note::

   Adding a color ramp with the name of existing one replaces it.

:param name: is the name of the color ramp being added or updated
:param colorRamp: is the color ramp. Ownership is transferred.
:param update: set to ``True`` when the style database has to be updated, by default it is ``False``

:return: success status of the operation
%End

    bool addTextFormat( const QString &name, const QgsTextFormat &format, bool update = false );
%Docstring
Adds a text ``format`` with the specified ``name`` to the style.

If ``update`` is set to ``True``, the style database will be automatically updated with the new text format.

Returns ``True`` if the operation was successful.

.. note::

   Adding a text format with the name of existing one replaces it.

.. versionadded:: 3.10
%End

    bool addLabelSettings( const QString &name, const QgsPalLayerSettings &settings, bool update = false );
%Docstring
Adds label ``settings`` with the specified ``name`` to the style.

If ``update`` is set to ``True``, the style database will be automatically updated with the new text format.

Returns ``True`` if the operation was successful.

.. note::

   Adding label settings with the name of existing ones replaces them.

.. versionadded:: 3.10
%End

    bool addLegendPatchShape( const QString &name, const QgsLegendPatchShape &shape, bool update = false );
%Docstring
Adds a legend patch ``shape`` with the specified ``name`` to the style.

If ``update`` is set to ``True``, the style database will be automatically updated with the new legend patch shape.

Returns ``True`` if the operation was successful.

.. note::

   Adding legend patch shapes with the name of existing ones replaces them.

.. versionadded:: 3.14
%End

    bool addSymbol3D( const QString &name, QgsAbstract3DSymbol *symbol /Transfer/, bool update = false );
%Docstring
Adds a 3d ``symbol`` with the specified ``name`` to the style. Ownership of ``symbol`` is transferred.

If ``update`` is set to ``True``, the style database will be automatically updated with the new legend patch shape.

Returns ``True`` if the operation was successful.

.. note::

   Adding 3d symbols with the name of existing ones replaces them.

.. versionadded:: 3.16
%End

    int addTag( const QString &tagName );
%Docstring
Adds a new tag and returns the tag's id

:param tagName: the name of the new tag to be created

:return: returns an int, which is the database id of the new tag created, 0 if the tag couldn't be created
%End


    int addSmartgroup( const QString &name, const QString &op, const QStringList &matchTag, const QStringList &noMatchTag,
                       const QStringList &matchName, const QStringList &noMatchName );
%Docstring
Adds a new smartgroup to the database and returns the id.

:param name: is the name of the new Smart Group to be added
:param op: is the operator between the conditions; AND/OR as QString
:param matchTag: list of strings to match within tags
:param noMatchTag: list of strings to exclude matches from tags
:param matchName: list of string to match within names
:param noMatchName: list of strings to exclude matches from names

.. versionadded:: 3.4
%End

    QStringList tags() const;
%Docstring
Returns a list of all tags in the style database

.. seealso:: :py:func:`addTag`
%End

    void clear();
%Docstring
Removes all contents of the style
%End

    QgsColorRamp *colorRamp( const QString &name ) const /Factory/;
%Docstring
Returns a new copy of the specified color ramp. The caller
takes responsibility for deleting the returned object.
%End

    int colorRampCount();
%Docstring
Returns count of color ramps
%End

    QStringList colorRampNames() const;
%Docstring
Returns a list of names of color ramps
%End

    const QgsColorRamp *colorRampRef( const QString &name ) const;
%Docstring
Returns a const pointer to a symbol (doesn't create new instance)
%End

    int colorrampId( const QString &name );
%Docstring
Returns the id in the style database for the given colorramp name
returns 0 if not found
%End

    QgsTextFormat textFormat( const QString &name ) const;
%Docstring
Returns the text format with the specified ``name``.

.. versionadded:: 3.10
%End

    int textFormatCount() const;
%Docstring
Returns count of text formats in the style.

.. versionadded:: 3.10
%End

    QStringList textFormatNames() const;
%Docstring
Returns a list of names of text formats in the style.

.. versionadded:: 3.10
%End

    int textFormatId( const QString &name );
%Docstring
Returns the ID in the style database for the given text format by ``name``.
Returns 0 if the text format was not found.

.. versionadded:: 3.10
%End

    QgsPalLayerSettings labelSettings( const QString &name ) const;
%Docstring
Returns the label settings with the specified ``name``.

.. versionadded:: 3.10
%End

    QgsLegendPatchShape legendPatchShape( const QString &name ) const;
%Docstring
Returns the legend patch shape with the specified ``name``.

.. versionadded:: 3.14
%End

    int legendPatchShapesCount() const;
%Docstring
Returns count of legend patch shapes in the style.

.. versionadded:: 3.14
%End

    Qgis::SymbolType legendPatchShapeSymbolType( const QString &name ) const;
%Docstring
Returns the symbol type corresponding to the legend patch shape
with the specified ``name``, or :py:class:`QgsSymbol`.Hybrid
if a matching legend patch shape is not present.

.. versionadded:: 3.14
%End

    QgsAbstract3DSymbol *symbol3D( const QString &name ) const /Factory/;
%Docstring
Returns a new copy of the 3D symbol with the specified ``name``.

.. versionadded:: 3.16
%End

    int symbol3DCount() const;
%Docstring
Returns count of 3D symbols in the style.

.. versionadded:: 3.16
%End

    QList< Qgis::GeometryType > symbol3DCompatibleGeometryTypes( const QString &name ) const;
%Docstring
Returns the list of the vector layer geometry types which are compatible with the 3D symbol
with the specified ``name``, or an empty list if a matching 3d symbol is not present.

.. versionadded:: 3.16
%End

    Qgis::GeometryType labelSettingsLayerType( const QString &name ) const;
%Docstring
Returns the layer geometry type corresponding to the label settings
with the specified ``name``, or :py:class:`Qgis`.GeometryType.Unknown
if matching label settings are not present.

.. versionadded:: 3.10
%End

    int labelSettingsCount() const;
%Docstring
Returns count of label settings in the style.

.. versionadded:: 3.10
%End

    QStringList labelSettingsNames() const;
%Docstring
Returns a list of names of label settings in the style.

.. versionadded:: 3.10
%End

    int labelSettingsId( const QString &name );
%Docstring
Returns the ID in the style database for the given label settings by ``name``.
Returns 0 if the label settings were not found.

.. versionadded:: 3.10
%End

    static QgsStyle *defaultStyle( bool initialize = true );
%Docstring
Returns the default application-wide style.

Since QGIS 3.36, the ``initialize`` argument can be set to ``False`` to temporarily
defer the actual loading of the style's objects until they are first requested.
This lazy-initialization can substantially improve application startup times,
especially for standalone applications which do not utilize styles.
%End


    bool tagSymbol( StyleEntity type, const QString &symbol, const QStringList &tags );
%Docstring
Tags the symbol with the tags in the list

Applies the given tags to the given symbol or colorramp

:param type: is either SymbolEntity or ColorrampEntity
:param symbol: is the name of the symbol or colorramp as QString
:param tags: is the list of the tags that are to be applied as QStringList

:return: returns the success state of the operation
%End

    bool detagSymbol( StyleEntity type, const QString &symbol, const QStringList &tags );
%Docstring
Detags the symbol with the given list

Removes the given tags for the specified symbol or colorramp

:param type: is either SymbolEntity or ColorrampEntity
:param symbol: is the name of the symbol or colorramp
:param tags: is the list of tags that are to be removed as QStringList

:return: returns the success state of the operation
%End

    bool detagSymbol( StyleEntity type, const QString &symbol );
%Docstring
Clears the symbol from all attached tags

Removes all tags for the specified symbol or colorramp

:param type: is either SymbolEntity or ColorrampEntity
:param symbol: is the name of the symbol or colorramp

:return: returns the success state of the operation
%End

    bool removeSymbol( const QString &name );
%Docstring
Removes symbol from style (and delete it)
%End

    bool renameEntity( StyleEntity type, const QString &oldName, const QString &newName );
%Docstring
Renames an entity of the specified ``type`` from ``oldName`` to ``newName``.

Returns ``True`` if the entity was successfully renamed.

.. versionadded:: 3.14
%End

    bool renameSymbol( const QString &oldName, const QString &newName );
%Docstring
Renames a symbol from ``oldName`` to ``newName``.

Returns ``True`` if symbol was successfully renamed.
%End

    QgsSymbol *symbol( const QString &name ) /Factory/;
%Docstring
Returns a NEW copy of symbol
%End

    const QgsSymbol *symbolRef( const QString &name ) const;
%Docstring
Returns a const pointer to a symbol (doesn't create new instance)
%End

    int symbolCount();
%Docstring
Returns count of symbols in style
%End

    QStringList symbolNames() const;
%Docstring
Returns a list of names of symbols
%End

    int symbolId( const QString &name );
%Docstring
Returns the id in the style database for the given symbol name
returns 0 if not found
%End

    int entityId( StyleEntity type, const QString &name );
%Docstring
Returns the id in the style database for the given ``name`` of the specified entity ``type``.
Returns 0 if not found.
%End

    int tagId( const QString &tag );
%Docstring
Returns the database id for the given tag name
%End
    int smartgroupId( const QString &smartgroup );
%Docstring
Returns the database id for the given smartgroup name
%End

    QStringList allNames( StyleEntity type ) const;
%Docstring
Returns a list of the names of all existing entities of the specified ``type``.

.. versionadded:: 3.10
%End

    QStringList symbolsOfFavorite( StyleEntity type ) const;
%Docstring
Returns the symbol names which are flagged as favorite

:param type: is either SymbolEntity or ColorampEntity

:return: A QStringList of the symbol or colorramp names flagged as favorite
%End

    QStringList symbolsWithTag( StyleEntity type, int tagid ) const;
%Docstring
Returns the symbol names with which have the given tag

:param type: is either SymbolEntity or ColorampEntity
:param tagid: is id of the tag which has been applied over the symbol as int

:return: A QStringList of the symbol or colorramp names for the given tag id
%End

    bool addFavorite( StyleEntity type, const QString &name );
%Docstring
Adds the specified symbol to favorites

:param type: is either SymbolEntity of ColorrampEntity
:param name: is the name of the symbol or coloramp whose is to be added to favorites

:return: returns the success state as bool
%End

    bool removeFavorite( StyleEntity type, const QString &name );
%Docstring
Removes the specified symbol from favorites

:param type: is either SymbolEntity of ColorrampEntity
:param name: is the name of the symbol or coloramp whose is to be removed from favorites

:return: returns the success state as bool
%End

    bool rename( StyleEntity type, int id, const QString &newName );
%Docstring
Renames the given entity with the specified id

:param type: is any of the style entities. Refer enum StyleEntity.
:param id: is the database id of the entity which is to be renamed
:param newName: is the new name of the entity
%End

    bool remove( StyleEntity type, int id );
%Docstring
Removes the specified entity from the database.

:param type: is any of the style entities. Refer enum StyleEntity.
:param id: is the database id of the entity to be removed

.. seealso:: :py:func:`removeEntityByName`
%End

    bool removeEntityByName( StyleEntity type, const QString &name );
%Docstring
Removes the entry of the specified ``type`` with matching ``name`` from the database.

.. seealso:: :py:func:`remove`

.. versionadded:: 3.14
%End

    bool saveSymbol( const QString &name, QgsSymbol *symbol, bool favorite, const QStringList &tags );
%Docstring
Adds the symbol to the database with tags.

:param name: is the name of the symbol as QString
:param symbol: is the pointer to the new :py:class:`QgsSymbol` being saved
:param favorite: is a boolean value to specify whether the symbol should be added to favorites
:param tags: is a list of tags that are associated with the symbol as a QStringList.

:return: returns the success state of the save operation
%End

    bool saveColorRamp( const QString &name, QgsColorRamp *ramp, bool favorite, const QStringList &tags );
%Docstring
Adds the colorramp to the database.

:param name: is the name of the colorramp as QString
:param ramp: is the pointer to the new :py:class:`QgsColorRamp` being saved
:param favorite: is a boolean value to specify whether the colorramp should be added to favorites
:param tags: is a list of tags that are associated with the color ramp as a QStringList.

:return: returns the success state of the save operation
%End

    bool removeColorRamp( const QString &name );
%Docstring
Removes color ramp from style (and delete it)
%End

    bool renameColorRamp( const QString &oldName, const QString &newName );
%Docstring
Changes ramp's name
%End

    bool saveTextFormat( const QString &name, const QgsTextFormat &format, bool favorite, const QStringList &tags );
%Docstring
Adds a text ``format`` to the database.

:param name: is the name of the text format
:param format: text format to save
:param favorite: is a boolean value to specify whether the text format should be added to favorites
:param tags: is a list of tags that are associated with the text format

:return: returns the success state of the save operation
%End

    bool removeTextFormat( const QString &name );
%Docstring
Removes a text format from the style.

.. versionadded:: 3.10
%End

    bool renameTextFormat( const QString &oldName, const QString &newName );
%Docstring
Changes a text format's name.

.. versionadded:: 3.10
%End

    bool saveLabelSettings( const QString &name, const QgsPalLayerSettings &settings, bool favorite, const QStringList &tags );
%Docstring
Adds label ``settings`` to the database.

:param name: is the name of the label settings
:param settings: label settings to save
:param favorite: is a boolean value to specify whether the label settings should be added to favorites
:param tags: is a list of tags that are associated with the label settings

:return: returns the success state of the save operation
%End

    bool removeLabelSettings( const QString &name );
%Docstring
Removes label settings from the style.

.. versionadded:: 3.10
%End

    bool renameLabelSettings( const QString &oldName, const QString &newName );
%Docstring
Changes a label setting's name.

.. versionadded:: 3.10
%End

    bool saveLegendPatchShape( const QString &name, const QgsLegendPatchShape &shape, bool favorite, const QStringList &tags );
%Docstring
Adds a legend patch ``shape`` to the database.

:param name: is the name of the legend patch shape
:param shape: legend patch shape to save
:param favorite: is a boolean value to specify whether the legend patch shape should be added to favorites
:param tags: is a list of tags that are associated with the legend patch shape

:return: returns the success state of the save operation

.. versionadded:: 3.14
%End

    bool renameLegendPatchShape( const QString &oldName, const QString &newName );
%Docstring
Changes a legend patch shape's name.

.. versionadded:: 3.14
%End

    QStringList legendPatchShapeNames() const;
%Docstring
Returns a list of names of legend patch shapes in the style.

.. versionadded:: 3.14
%End

    const QgsSymbol *previewSymbolForPatchShape( const QgsLegendPatchShape &shape ) const;
%Docstring
Returns a symbol to use for rendering preview icons for a patch ``shape``.

Ownership of the symbol is not transferred.

.. versionadded:: 3.14
%End

    QgsLegendPatchShape defaultPatch( Qgis::SymbolType type, QSizeF size ) const;
%Docstring
Returns the default legend patch shape for the given symbol ``type``.

.. seealso:: :py:func:`defaultPatchAsQPolygonF`

.. versionadded:: 3.14
%End

    QList< QList< QPolygonF > > defaultPatchAsQPolygonF( Qgis::SymbolType type, QSizeF size ) const;
%Docstring
Returns the default patch geometry for the given symbol ``type`` and ``size`` as a set of QPolygonF objects (parts and rings).

.. seealso:: :py:func:`defaultPatch`

.. versionadded:: 3.14
%End

    enum class TextFormatContext
    {
      Labeling,
    };

    QgsTextFormat defaultTextFormat( QgsStyle::TextFormatContext context = QgsStyle::TextFormatContext::Labeling ) const;
%Docstring
Returns the default text format to use for new text based objects in the specified ``context``.

.. versionadded:: 3.20
%End

    static QgsTextFormat defaultTextFormatForProject( QgsProject *project,  QgsStyle::TextFormatContext context = QgsStyle::TextFormatContext::Labeling );
%Docstring
Returns the default text format to use for new text based objects for the specified ``project``, in the specified ``context``.

.. versionadded:: 3.26
%End

    bool saveSymbol3D( const QString &name, QgsAbstract3DSymbol *symbol /Transfer/, bool favorite, const QStringList &tags );
%Docstring
Adds a 3d ``symbol`` to the database.

:param name: is the name of the 3d symbol
:param symbol: 3d symbol to save. Ownership is transferred.
:param favorite: is a boolean value to specify whether the 3d symbol should be added to favorites
:param tags: is a list of tags that are associated with the 3d symbol

:return: returns the success state of the save operation

.. versionadded:: 3.16
%End

    bool renameSymbol3D( const QString &oldName, const QString &newName );
%Docstring
Changes a 3d symbol's name.

.. versionadded:: 3.16
%End

    QStringList symbol3DNames() const;
%Docstring
Returns a list of names of 3d symbols in the style.

.. versionadded:: 3.16
%End

    bool createDatabase( const QString &filename );
%Docstring
Creates an on-disk database

This function creates a new on-disk permanent style database.

:return: returns the success state of the database creation

.. seealso:: :py:func:`createMemoryDatabase`
%End

    bool createMemoryDatabase();
%Docstring
Creates a temporary memory database

This function is used to create a temporary style database in case a permanent on-disk database is not needed.

:return: returns the success state of the temporary memory database creation

.. seealso:: :py:func:`createDatabase`
%End

    void createTables();
%Docstring
Creates tables structure for new database

This function is used to create the tables structure in a newly-created database.

.. seealso:: :py:func:`createDatabase`

.. seealso:: :py:func:`createMemoryDatabase`
%End

    bool load( const QString &filename );
%Docstring
Loads a file into the style

This function will load an on-disk database and populate styles.

:param filename: location of the database to load styles from

:return: ``True`` if the database was successfully loaded. If ``False`` is
         returned then a detailed error message can be retrieved via :py:func:`~QgsStyle.errorString`.

.. seealso:: :py:func:`errorString`
%End

 bool save( const QString &filename = QString() ) /Deprecated/;
%Docstring
Saves style into a file.

The current :py:func:`~QgsStyle.fileName` will be used if no explicit ``filename`` is specified.

:return: ``True`` if the style was successfully saved. If ``False`` is
         returned then a detailed error message can be retrieved via :py:func:`~QgsStyle.errorString`.

.. seealso:: :py:func:`fileName`

.. seealso:: :py:func:`load`

.. seealso:: :py:func:`errorString`

.. deprecated:: 3.40

   This function has no effect.
%End

    QString errorString() const;
%Docstring
Returns the last error from a :py:func:`~QgsStyle.load` operation.

.. seealso:: :py:func:`load`
%End

    QString fileName() const;
%Docstring
Returns the current file name of the style database.

The filename will always represent the actual source of the style - e.g. the .db file
for styles associated with a database, or the original source .xml file for styles
directly loaded from a .xml export.

.. seealso:: :py:func:`setFileName`
%End

    void setFileName( const QString &filename );
%Docstring
Sets the current file name of the style database.

The filename should always represent the actual source of the style - e.g. the .db file
for styles associated with a database, or the original source .xml file for styles
directly loaded from a .xml export.

Calling :py:func:`~QgsStyle.load` automatically sets the filename to the .db file path.

.. versionadded:: 3.26
%End

    QStringList findSymbols( StyleEntity type, const QString &qword );
%Docstring
Returns the names of the symbols which have a matching 'substring' in its definition

:param type: is either SymbolEntity or ColorrampEntity
:param qword: is the query string to search the symbols or colorramps.

:return: A QStringList of the matched symbols or colorramps
%End

    QStringList tagsOfSymbol( StyleEntity type, const QString &symbol );
%Docstring
Returns the tags associated with the symbol

:param type: is either SymbolEntity or ColorrampEntity
:param symbol: is the name of the symbol or color ramp

:return: A QStringList of the tags that have been applied to that symbol/colorramp
%End

    bool isFavorite( StyleEntity type, const QString &name );
%Docstring
Returns ``True`` if the symbol with matching ``type`` and ``name`` is
marked as a favorite.

.. versionadded:: 3.10
%End

    bool symbolHasTag( StyleEntity type, const QString &symbol, const QString &tag );
%Docstring
Returns whether a given tag is associated with the symbol

:param type: is either SymbolEntity or ColorrampEntity
:param symbol: is the name of the symbol or color ramp
:param tag: the name of the tag to look for

:return: A boolean value identicating whether a tag was found attached to the symbol
%End

    QString tag( int id ) const;
%Docstring
Returns the tag name for the given id
%End

    QgsSymbolGroupMap smartgroupsListMap();
%Docstring
Returns the smart groups map with id as key and name as value
%End

    QStringList smartgroupNames() const;
%Docstring
Returns the smart groups list
%End

    QgsSmartConditionMap smartgroup( int id );
%Docstring
Returns the :py:class:`QgsSmartConditionMap` for the given id
%End

    QString smartgroupOperator( int id );
%Docstring
Returns the operator for the smartgroup.
%End

    QStringList symbolsOfSmartgroup( StyleEntity type, int id );
%Docstring
Returns the symbols for the smartgroup
%End

    bool exportXml( const QString &filename );
%Docstring
Exports the style as a XML file
%End

    bool importXml( const QString &filename );
%Docstring
Imports the symbols and colorramps into the default style database from the given XML file
%End

    static bool isXmlStyleFile( const QString &path );
%Docstring
Tests if the file at ``path`` is a QGIS style XML file.

This method samples only the first line in the file, so is safe to call on
large xml files.

.. versionadded:: 3.6
%End

  public slots:

  signals:

    void initialized();
%Docstring
Emitted when the style database has been fully initialized.

This signals is only emitted by the :py:func:`QgsStyle.defaultStyle()` instance,
and only when the :py:func:`~QgsStyle.defaultStyle` has been lazily initialized.

.. versionadded:: 3.36
%End

    void aboutToBeDestroyed();
%Docstring
Emitted just before the style object is destroyed.

Emitted in the destructor when the style is about to be deleted,
but it is still in a perfectly valid state: the last chance for
other pieces of code for some cleanup if they use the style.

.. versionadded:: 3.26
%End

    void symbolSaved( const QString &name, QgsSymbol *symbol );
%Docstring
Emitted every time a new symbol has been added to the database.
Emitted whenever a symbol has been added to the style and the database
has been updated as a result.

.. seealso:: :py:func:`symbolRemoved`

.. seealso:: :py:func:`rampAdded`

.. seealso:: :py:func:`symbolChanged`
%End

    void symbolChanged( const QString &name );
%Docstring
Emitted whenever a symbol's definition is changed. This does not include
name or tag changes.

.. seealso:: :py:func:`symbolSaved`

.. versionadded:: 3.4
%End

    void groupsModified();
%Docstring
Emitted every time a tag or smartgroup has been added, removed, or renamed
%End

    void entityTagsChanged( QgsStyle::StyleEntity entity, const QString &name, const QStringList &newTags );
%Docstring
Emitted whenever an ``entity``'s tags are changed.

.. versionadded:: 3.4
%End

    void favoritedChanged( QgsStyle::StyleEntity entity, const QString &name, bool isFavorite );
%Docstring
Emitted whenever an ``entity`` is either favorited or un-favorited.

.. versionadded:: 3.4
%End

    void entityAdded( QgsStyle::StyleEntity entity, const QString &name );
%Docstring
Emitted every time a new entity has been added to the database.

.. versionadded:: 3.14
%End

    void entityRemoved( QgsStyle::StyleEntity entity, const QString &name );
%Docstring
Emitted whenever an entity of the specified type is removed from the style and the database
has been updated as a result.

.. versionadded:: 3.14
%End

    void entityRenamed( QgsStyle::StyleEntity entity, const QString &oldName, const QString &newName );
%Docstring
Emitted whenever a entity of the specified type has been renamed from ``oldName`` to ``newName``

.. versionadded:: 3.14
%End

    void entityChanged( QgsStyle::StyleEntity entity, const QString &name );
%Docstring
Emitted whenever an entity's definition is changed. This does not include
name or tag changes.

.. versionadded:: 3.14
%End

    void symbolRemoved( const QString &name );
%Docstring
Emitted whenever a symbol has been removed from the style and the database
has been updated as a result.

.. seealso:: :py:func:`symbolSaved`

.. seealso:: :py:func:`rampRemoved`

.. versionadded:: 3.4
%End

    void symbolRenamed( const QString &oldName, const QString &newName );
%Docstring
Emitted whenever a symbol has been renamed from ``oldName`` to ``newName``

.. seealso:: :py:func:`rampRenamed`

.. versionadded:: 3.4
%End

    void rampRenamed( const QString &oldName, const QString &newName );
%Docstring
Emitted whenever a color ramp has been renamed from ``oldName`` to ``newName``

.. seealso:: :py:func:`symbolRenamed`

.. versionadded:: 3.4
%End

    void rampAdded( const QString &name );
%Docstring
Emitted whenever a color ramp has been added to the style and the database
has been updated as a result.

.. seealso:: :py:func:`rampRemoved`

.. seealso:: :py:func:`symbolSaved`

.. versionadded:: 3.4
%End

    void rampRemoved( const QString &name );
%Docstring
Emitted whenever a color ramp has been removed from the style and the database
has been updated as a result.

.. seealso:: :py:func:`rampAdded`

.. seealso:: :py:func:`symbolRemoved`

.. versionadded:: 3.4
%End

    void rampChanged( const QString &name );
%Docstring
Emitted whenever a color ramp's definition is changed. This does not include
name or tag changes.

.. seealso:: :py:func:`rampAdded`

.. versionadded:: 3.4
%End

    void textFormatRenamed( const QString &oldName, const QString &newName );
%Docstring
Emitted whenever a text format has been renamed from ``oldName`` to ``newName``

.. seealso:: :py:func:`symbolRenamed`

.. versionadded:: 3.10
%End

    void textFormatAdded( const QString &name );
%Docstring
Emitted whenever a text format has been added to the style and the database
has been updated as a result.

.. seealso:: :py:func:`textFormatRemoved`

.. seealso:: :py:func:`symbolSaved`

.. versionadded:: 3.10
%End

    void textFormatRemoved( const QString &name );
%Docstring
Emitted whenever a text format has been removed from the style and the database
has been updated as a result.

.. seealso:: :py:func:`textFormatAdded`

.. seealso:: :py:func:`symbolRemoved`

.. versionadded:: 3.10
%End

    void textFormatChanged( const QString &name );
%Docstring
Emitted whenever a text format's definition is changed. This does not include
name or tag changes.

.. seealso:: :py:func:`textFormatAdded`

.. versionadded:: 3.10
%End

    void labelSettingsRenamed( const QString &oldName, const QString &newName );
%Docstring
Emitted whenever label settings have been renamed from ``oldName`` to ``newName``

.. seealso:: :py:func:`symbolRenamed`

.. versionadded:: 3.10
%End

    void labelSettingsAdded( const QString &name );
%Docstring
Emitted whenever label settings have been added to the style and the database
has been updated as a result.

.. seealso:: :py:func:`labelSettingsRemoved`

.. seealso:: :py:func:`symbolSaved`

.. versionadded:: 3.10
%End

    void labelSettingsRemoved( const QString &name );
%Docstring
Emitted whenever label settings have been removed from the style and the database
has been updated as a result.

.. seealso:: :py:func:`labelSettingsAdded`

.. seealso:: :py:func:`symbolRemoved`

.. versionadded:: 3.10
%End

    void labelSettingsChanged( const QString &name );
%Docstring
Emitted whenever a label setting's definition is changed. This does not include
name or tag changes.

.. seealso:: :py:func:`labelSettingsAdded`

.. versionadded:: 3.10
%End

    void rebuildIconPreviews();
%Docstring
Emitted whenever icon previews for entities in the style must be rebuilt.

.. versionadded:: 3.26
%End

};

class QgsStyleEntityInterface
{
%Docstring(signature="appended")
An interface for entities which can be placed in a :py:class:`QgsStyle` database.

.. versionadded:: 3.10
%End

%TypeHeaderCode
#include "qgsstyle.h"
%End
%ConvertToSubClassCode
    switch ( sipCpp->type() )
    {
      case QgsStyle::SymbolEntity:
        sipType = sipType_QgsStyleSymbolEntity;
        break;

      case QgsStyle::ColorrampEntity:
        sipType = sipType_QgsStyleColorRampEntity;
        break;

      case QgsStyle::TextFormatEntity:
        sipType = sipType_QgsStyleTextFormatEntity;
        break;

      case QgsStyle::LabelSettingsEntity:
        sipType = sipType_QgsStyleLabelSettingsEntity;
        break;

      case QgsStyle::SmartgroupEntity:
      case QgsStyle::TagEntity:
        sipType = 0;
        break;
    }
%End
  public:

    virtual ~QgsStyleEntityInterface();

    virtual QgsStyle::StyleEntity type() const = 0;
%Docstring
Returns the type of style entity.
%End

};

class QgsStyleSymbolEntity : QgsStyleEntityInterface
{
%Docstring(signature="appended")
A symbol entity for :py:class:`QgsStyle` databases.

.. versionadded:: 3.10
%End

%TypeHeaderCode
#include "qgsstyle.h"
%End
  public:

    QgsStyleSymbolEntity( QgsSymbol *symbol );
%Docstring
Constructor for QgsStyleSymbolEntity, with the specified ``symbol``.

Ownership of ``symbol`` is NOT transferred.
%End

    virtual QgsStyle::StyleEntity type() const;


    QgsSymbol *symbol() const;
%Docstring
Returns the entity's symbol.
%End

};

class QgsStyleColorRampEntity : QgsStyleEntityInterface
{
%Docstring(signature="appended")
A color ramp entity for :py:class:`QgsStyle` databases.

.. versionadded:: 3.10
%End

%TypeHeaderCode
#include "qgsstyle.h"
%End
  public:

    QgsStyleColorRampEntity( QgsColorRamp *ramp );
%Docstring
Constructor for QgsStyleColorRampEntity, with the specified color ``ramp``.

Ownership of ``ramp`` is NOT transferred.
%End

    virtual QgsStyle::StyleEntity type() const;


    QgsColorRamp *ramp() const;
%Docstring
Returns the entity's color ramp.
%End

};

class QgsStyleTextFormatEntity : QgsStyleEntityInterface
{
%Docstring(signature="appended")
A text format entity for :py:class:`QgsStyle` databases.

.. versionadded:: 3.10
%End

%TypeHeaderCode
#include "qgsstyle.h"
%End
  public:

    QgsStyleTextFormatEntity( const QgsTextFormat &format );
%Docstring
Constructor for QgsStyleTextFormatEntity, with the specified text ``format``.
%End

    virtual QgsStyle::StyleEntity type() const;


    QgsTextFormat format() const;
%Docstring
Returns the entity's text format.
%End

};

class QgsStyleLabelSettingsEntity : QgsStyleEntityInterface
{
%Docstring(signature="appended")
A label settings entity for :py:class:`QgsStyle` databases.

.. versionadded:: 3.10
%End

%TypeHeaderCode
#include "qgsstyle.h"
%End
  public:

    QgsStyleLabelSettingsEntity( const QgsPalLayerSettings &settings );
%Docstring
Constructor for QgsStyleLabelSettingsEntity, with the specified label ``settings``.
%End

    virtual QgsStyle::StyleEntity type() const;



    const QgsPalLayerSettings &settings() const;
%Docstring
Returns the entity's label settings.
%End

};

class QgsStyleLegendPatchShapeEntity : QgsStyleEntityInterface
{
%Docstring(signature="appended")
A legend patch shape entity for :py:class:`QgsStyle` databases.

.. versionadded:: 3.14
%End

%TypeHeaderCode
#include "qgsstyle.h"
%End
  public:

    QgsStyleLegendPatchShapeEntity( const QgsLegendPatchShape &shape );
%Docstring
Constructor for QgsStyleLegendPatchShapeEntity, with the specified legend patch ``shape``.
%End

    virtual QgsStyle::StyleEntity type() const;



    const QgsLegendPatchShape &shape() const;
%Docstring
Returns the entity's legend patch shape.
%End

};

class QgsStyleSymbol3DEntity : QgsStyleEntityInterface
{
%Docstring(signature="appended")
A 3d symbol entity for :py:class:`QgsStyle` databases.

.. versionadded:: 3.16
%End

%TypeHeaderCode
#include "qgsstyle.h"
%End
  public:

    QgsStyleSymbol3DEntity( const QgsAbstract3DSymbol *symbol );
%Docstring
Constructor for QgsStyleSymbol3DEntity, with the specified ``symbol``.

Ownership of ``symbol`` is NOT transferred.
%End

    virtual QgsStyle::StyleEntity type() const;


    const QgsAbstract3DSymbol *symbol() const;
%Docstring
Returns the entity's symbol.
%End

};

/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/symbology/qgsstyle.h                                        *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.py again   *
 ************************************************************************/
