/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/symbology/qgsrendererrange.h                                *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.pl again   *
 ************************************************************************/







class QgsRendererRange
{

%TypeHeaderCode
#include "qgsrendererrange.h"
%End
  public:

    QgsRendererRange();
%Docstring
Constructor for QgsRendererRange.
%End
    ~QgsRendererRange();

    QgsRendererRange( const QgsClassificationRange &range, QgsSymbol *symbol /Transfer/, bool render = true, const QString &uuid = QString() );
%Docstring
Creates a renderer symbol range

:param range: The classification range
:param symbol: The symbol for this renderer range
:param render: If ``True``, it will be renderered
:param uuid: Optional parameter to manually set the UUID key identifier for the this range (since QGIS 3.34).
%End

    QgsRendererRange( double lowerValue, double upperValue, QgsSymbol *symbol /Transfer/, const QString &label, bool render = true, const QString &uuid = QString() );
%Docstring
Creates a renderer symbol range

:param lowerValue: The lower bound of the range
:param upperValue: The upper bound of the range
:param symbol: The symbol for this renderer range
:param label: The label used for the range
:param render: If ``True``, it will be renderered
:param uuid: Optional parameter to manually set the UUID key identifier for the this range (since QGIS 3.34).
%End
    QgsRendererRange( const QgsRendererRange &range );


    bool operator<( const QgsRendererRange &other ) const;

    QString uuid() const;
%Docstring
Returns the unique identifier for this range.

.. versionadded:: 3.34
%End

    double lowerValue() const;
%Docstring
Returns the lower bound of the range.

.. seealso:: :py:func:`setLowerValue`

.. seealso:: :py:func:`upperValue`
%End

    double upperValue() const;
%Docstring
Returns the upper bound of the range.

.. seealso:: :py:func:`setUpperValue`

.. seealso:: :py:func:`lowerValue`
%End

    QgsSymbol *symbol() const;
%Docstring
Returns the symbol used for the range.

.. seealso:: :py:func:`setSymbol`
%End

    QString label() const;
%Docstring
Returns the label used for the range.

.. seealso:: :py:func:`setLabel`
%End

    void setSymbol( QgsSymbol *s /Transfer/ );
%Docstring
Sets the symbol used for the range.

Ownership of the symbol is transferred.

.. seealso:: :py:func:`symbol`
%End

    void setLabel( const QString &label );
%Docstring
Sets the label used for the range.

.. seealso:: :py:func:`label`
%End

    void setLowerValue( double lowerValue );
%Docstring
Sets the lower bound of the range.

.. seealso:: :py:func:`lowerValue`

.. seealso:: :py:func:`setUpperValue`
%End

    void setUpperValue( double upperValue );
%Docstring
Sets the upper bound of the range.

.. seealso:: :py:func:`upperValue`

.. seealso:: :py:func:`setLowerValue`
%End

    bool renderState() const;
%Docstring
Returns ``True`` if the range should be rendered.

.. seealso:: :py:func:`setRenderState`

.. versionadded:: 2.6
%End

    void setRenderState( bool render );
%Docstring
Sets whether the range should be rendered.

.. seealso:: :py:func:`renderState`

.. versionadded:: 2.6
%End

    QString dump() const;
%Docstring
Dumps a string representation of the range.
%End

    void toSld( QDomDocument &doc, QDomElement &element, QVariantMap props, bool firstRange = false ) const;
%Docstring
Creates a DOM element representing the range in SLD format.

:param doc: DOM document
:param element: destination DOM element
:param props: graduated renderer properties
:param firstRange: set to ``True`` if the range is the first range, where the lower value uses a <= test
                   rather than a < test.
%End

    SIP_PYOBJECT __repr__();
%MethodCode
    const QString str = sipCpp->label().isEmpty()
                        ? QStringLiteral( "<QgsRendererRange: %1 - %2>" ).arg( sipCpp->lowerValue() ).arg( sipCpp->upperValue() )
                        : QStringLiteral( "<QgsRendererRange: %1 - %2 (%3)>" ).arg( sipCpp->lowerValue() ).arg( sipCpp->upperValue() ).arg( sipCpp->label() );
    sipRes = PyUnicode_FromString( str.toUtf8().constData() );
%End

    SIP_PYOBJECT __getitem__( int );
%MethodCode
    if ( a0 == 0 )
    {
      sipRes = Py_BuildValue( "d", sipCpp->lowerValue() );
    }
    else if ( a0 == 1 )
    {
      sipRes = Py_BuildValue( "d", sipCpp->upperValue() );
    }
    else
    {
      QString msg = QString( "Bad index: %1" ).arg( a0 );
      PyErr_SetString( PyExc_IndexError, msg.toLatin1().constData() );
    }
%End

  protected:
};

typedef QList<QgsRendererRange> QgsRangeList;


class QgsRendererRangeLabelFormat /Deprecated/
{
%Docstring(signature="appended")

.. versionadded:: 2.6

.. deprecated:: QGIS 3.10
  use :py:class:`QgsClassificationMethod` instead
%End

%TypeHeaderCode
#include "qgsrendererrange.h"
%End
  public:
    QgsRendererRangeLabelFormat();
    QgsRendererRangeLabelFormat( const QString &format, int precision = 4, bool trimTrailingZeroes = false );

    bool operator==( const QgsRendererRangeLabelFormat &other ) const;
    bool operator!=( const QgsRendererRangeLabelFormat &other ) const;

    QString format() const;
    void setFormat( const QString &format );

    int precision() const;
    void setPrecision( int precision );

    bool trimTrailingZeroes() const;
    void setTrimTrailingZeroes( bool trimTrailingZeroes );

    QString labelForRange( double lower, double upper ) const /PyName=labelForLowerUpper/;
%Docstring

.. note::

   labelForLowerUpper in Python bindings
%End
    QString labelForRange( const QgsRendererRange &range ) const;
    QString formatNumber( double value ) const;

    void setFromDomElement( QDomElement &element );
    void saveToDomElement( QDomElement &element );

    static const int MAX_PRECISION;
    static const int MIN_PRECISION;

  protected:
};


/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/symbology/qgsrendererrange.h                                *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.pl again   *
 ************************************************************************/
