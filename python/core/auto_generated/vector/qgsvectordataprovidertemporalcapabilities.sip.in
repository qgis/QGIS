/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/vector/qgsvectordataprovidertemporalcapabilities.h          *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.py again   *
 ************************************************************************/




class QgsVectorDataProviderTemporalCapabilities : QgsDataProviderTemporalCapabilities
{
%Docstring(signature="appended")
Implementation of data provider temporal properties for :py:class:`QgsVectorDataProviders`.

Data provider temporal capabilities reflect the temporal capabilities of a :py:class:`QgsDataProvider`.
Unlike :py:class:`QgsMapLayerTemporalProperties`, these settings are not user-configurable,
and should only be set by the :py:class:`QgsDataProvider` itself.

.. versionadded:: 3.14
%End

%TypeHeaderCode
#include "qgsvectordataprovidertemporalcapabilities.h"
%End
  public:

    QgsVectorDataProviderTemporalCapabilities( bool enabled = false );
%Docstring
Constructor for QgsVectorDataProviderTemporalCapabilities.

The ``enabled`` argument specifies whether the data provider has temporal capabilities.
%End

    Qgis::VectorDataProviderTemporalMode mode() const;
%Docstring
Returns the temporal properties mode.

.. seealso:: :py:func:`setMode`
%End

    void setMode( Qgis::VectorDataProviderTemporalMode mode );
%Docstring
Sets the temporal properties ``mode``.

.. seealso:: :py:func:`mode`
%End

    void setAvailableTemporalRange( const QgsDateTimeRange &range );
%Docstring
Sets the datetime ``range`` extent from which temporal data is available from the provider.

.. seealso:: :py:func:`availableTemporalRange`
%End

    const QgsDateTimeRange &availableTemporalRange() const;
%Docstring
Returns the datetime range extent from which temporal data is available from the provider.

.. seealso:: :py:func:`setAvailableTemporalRange`
%End

    QString startField() const;
%Docstring
Returns the name of the start datetime field, which contains the start time for the feature's time spans.

If :py:func:`~QgsVectorDataProviderTemporalCapabilities.mode` is ProviderStoresFeatureDateTimeInstantInField, then this field stores both the start AND end times.

.. seealso:: :py:func:`setStartField`

.. seealso:: :py:func:`endField`
%End

    void setStartField( const QString &field );
%Docstring
Sets the name of the start datetime ``field``, which stores the start time for the feature's time spans.

If :py:func:`~QgsVectorDataProviderTemporalCapabilities.mode` is ModeFeatureDateTimeInstantFromField, then this field stores both the start AND end times.

.. seealso:: :py:func:`startField`

.. seealso:: :py:func:`setEndField`
%End

    QString endField() const;
%Docstring
Returns the name of the end datetime field, which stores the end time for the feature's time spans.

.. seealso:: :py:func:`setEndField`

.. seealso:: :py:func:`startField`
%End

    void setEndField( const QString &field );
%Docstring
Sets the name of the end datetime ``field``, which stores the end time for the feature's time spans.

.. seealso:: :py:func:`endField`

.. seealso:: :py:func:`setStartField`
%End

};

/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/vector/qgsvectordataprovidertemporalcapabilities.h          *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.py again   *
 ************************************************************************/
