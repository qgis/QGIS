/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/browser/qgsdirectoryitem.h                                  *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.py again   *
 ************************************************************************/




class QgsDirectoryItem : QgsDataCollectionItem
{
%Docstring(signature="appended")
A directory: contains subdirectories and layers
%End

%TypeHeaderCode
#include "qgsdirectoryitem.h"
%End
  public:

    QgsDirectoryItem( QgsDataItem *parent /TransferThis/, const QString &name, const QString &path );
%Docstring
Constructor for QgsDirectoryItem, with the specified ``parent`` item.

The ``name`` argument specifies the text to show in the model for the item. This is usually
the directory name, but in certain cases may differ for special directories (e.g. "Home").
If a non-directory-name text is used, it should be a translated string when appropriate.

The ``path`` argument specifies the directory path in the file system (e.g. "/home/gsherman/stuff"). A valid
directory path must be specified.
%End



    QgsDirectoryItem( QgsDataItem *parent /TransferThis/, const QString &name, const QString &dirPath, const QString &path, const QString &providerKey = QString() );
%Docstring
Constructor for QgsDirectoryItem, with the specified ``parent`` item.

The ``name`` argument specifies the text to show in the model for the item. This is usually
the directory name, but in certain cases may differ for special directories (e.g. "Home").
If a non-directory-name text is used, it should be a translated string when appropriate.

The ``dirPath`` argument specifies the directory path in the file system (e.g. "/home/gsherman/stuff"). A valid
directory path must be specified.

The ``path`` argument gives the item path in the browser tree. The ``path`` string can take any form, but is usually
the same as ``dirPath`` or ``dirPath`` with a prefix, e.g. "favorites:/home/gsherman/Downloads"). QgsDirectoryItem
items pointing to different ``dirPaths`` should always use a different item ``path``.

The optional ``providerKey`` string can be used to specify the key for the :py:class:`QgsDataItemProvider` that created this item.
%End

    SIP_PYOBJECT __repr__();
%MethodCode
    QString str = QStringLiteral( "<QgsDirectoryItem: %1 - %2>" ).arg( sipCpp->dirPath(), sipCpp->path() );
    sipRes = PyUnicode_FromString( str.toUtf8().constData() );
%End
    virtual void setState( Qgis::BrowserItemState state );


    virtual QVector<QgsDataItem *> createChildren();


    QString dirPath() const;
%Docstring
Returns the full path to the directory the item represents.
%End

    virtual bool equal( const QgsDataItem *other );

    virtual QIcon icon();


    QColor iconColor() const;
%Docstring
Returns the directory's icon color.

An invalid color will be returned if the default icon color is used.

.. seealso:: :py:func:`setIconColor`

.. versionadded:: 3.20
%End

    void setIconColor( const QColor &color );
%Docstring
Sets the directory's icon ``color``.

Setting an invalid color will cause the default icon color to be used.

This is a transient property, and will not permanently alter the directory's colors
in future QGIS sessions. Use :py:func:`~QgsDirectoryItem.setCustomColor` to permanently set the directory's color.

.. seealso:: :py:func:`iconColor`

.. versionadded:: 3.20
%End

    static void setCustomColor( const QString &directory, const QColor &color );
%Docstring
Sets a custom icon ``color`` to use for the items for the corresponding ``directory`` path.

If ``color`` is an invalid color then the default icon color will be used.

.. versionadded:: 3.20
%End

 virtual QWidget *paramWidget() /Factory,Deprecated/;

    virtual bool hasDragEnabled() const;
    virtual QgsMimeDataUtils::UriList mimeUris() const;


    static bool hiddenPath( const QString &path );
%Docstring
Check if the given path is hidden from the browser model
%End

    static Qgis::BrowserDirectoryMonitoring monitoringForPath( const QString &path );
%Docstring
Returns the monitoring setting for a directory ``path``.

This method returns the monitoring setting for ``path`` only. If no explicit monitoring setting
is in place for the path then :py:class:`Qgis`.BrowserDirectoryMonitoring.Default is returned.

This method does not consider the monitoring setting of parent directories.

.. versionadded:: 3.20
%End

    static bool pathShouldByMonitoredByDefault( const QString &path );
%Docstring
Returns ``True`` if a directory ``path`` should be monitored by default.

In the absence of any other settings this will dictate whether the directory is monitored. This method
does not consider an explicit monitoring setting set for the path, which can be determined by
calling :py:func:`~QgsDirectoryItem.monitoringForPath`.

All parent directories will be checked to determine whether they have monitoring
manually enabled or disabled. As soon as a parent directory is found which has monitoring
manually enabled or disabled then the corresponding value will be returned.

If no explicit setting is in place for a parent directory, then a check will be made to determine
whether the path resides on a known slow drive. If so, monitoring is disabled by default and
``False`` will be returned. Otherwise paths are monitored by default and the function will return ``True``.

.. seealso:: :py:func:`isMonitored`

.. seealso:: :py:func:`setMonitoring`

.. versionadded:: 3.20
%End

    bool isMonitored() const;
%Docstring
Returns ``True`` if the directory is currently being monitored for changes and the item auto-refreshed
when these occur.

.. versionadded:: 3.20
%End

    Qgis::BrowserDirectoryMonitoring monitoring() const;
%Docstring
Returns the monitoring setting for this directory item.

.. seealso:: :py:func:`setMonitoring`

.. versionadded:: 3.20
%End

    void setMonitoring( Qgis::BrowserDirectoryMonitoring monitoring );
%Docstring
Sets the ``monitoring`` setting for this directory.

This is a persistent setting, which is saved in QSettings.

.. seealso:: :py:func:`monitoring`

.. versionadded:: 3.20
%End


  public slots:
    virtual void childrenCreated();

    void directoryChanged();

  protected:


};



class QgsDirectoryParamWidget : QTreeWidget
{
%Docstring(signature="appended")

Browser parameter widget implementation for directory items.
%End

%TypeHeaderCode
#include "qgsdirectoryitem.h"
%End
  public:
    QgsDirectoryParamWidget( const QString &path, QWidget *parent /TransferThis/ = 0 );

  protected:
    virtual void mousePressEvent( QMouseEvent *event );


  public slots:
    void showHideColumn();
};





/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/browser/qgsdirectoryitem.h                                  *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.py again   *
 ************************************************************************/
