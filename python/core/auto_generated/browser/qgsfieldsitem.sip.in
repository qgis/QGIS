/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/browser/qgsfieldsitem.h                                     *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.py again   *
 ************************************************************************/



class QgsFieldsItem : QgsDataItem
{
%Docstring(signature="appended")
A collection of field items with some internal logic to retrieve
the fields and a the vector layer instance from a connection URI,
the schema and the table name.

.. versionadded:: 3.16
%End

%TypeHeaderCode
#include "qgsfieldsitem.h"
%End
  public:

    QgsFieldsItem( QgsDataItem *parent /TransferThis/,
                   const QString &path,
                   const QString &connectionUri,
                   const QString &providerKey,
                   const QString &schema,
                   const QString &tableName );
%Docstring
Constructor for QgsFieldsItem, with the specified ``parent`` item.

The ``path`` argument gives the item path in the browser tree. The ``path`` string can take any form,
but :py:class:`QgsDataItem` items pointing to different logical locations should always use a different item ``path``.
The ``connectionUri`` argument is the connection part of the layer URI that it is used internally to create
a connection and retrieve fields information.
The ``providerKey`` string can be used to specify the key for the :py:class:`QgsDataItemProvider` that created this item.
The ``schema`` and ``tableName`` are used to retrieve the layer and field information from the ``connectionUri``.
%End

    ~QgsFieldsItem();

    SIP_PYOBJECT __repr__();
%MethodCode
    QString str = QStringLiteral( "<QgsFieldsItem: %1>" ).arg( sipCpp->path() );
    sipRes = PyUnicode_FromString( str.toUtf8().constData() );
%End

    virtual QVector<QgsDataItem *> createChildren();


    virtual QIcon icon();


    QString schema() const;
%Docstring
Returns the schema name
%End

    QString tableName() const;
%Docstring
Returns the table name
%End

    QString connectionUri() const;
%Docstring
Returns the connection URI
%End

    QgsVectorLayer *layer() /Factory/;
%Docstring
Creates and returns a (possibly NULL) layer from the connection URI and schema/table information
%End

    QgsAbstractDatabaseProviderConnection::TableProperty *tableProperty() const;
%Docstring
Returns the (possibly NULL) properties of the table this fields belong to.

.. versionadded:: 3.16
%End

    bool canRenameFields() const;
%Docstring
Returns ``True`` if the connection supports renaming fields.

.. versionadded:: 3.28
%End

};


class QgsFieldItem : QgsDataItem
{
%Docstring(signature="appended")
A data item representing a single field from a layer.

Information about the connection URI, the schema and the table as well as the layer
instance the field belongs to can be retrieved from the parent :py:class:`QgsFieldsItem` object.

.. versionadded:: 3.16
%End

%TypeHeaderCode
#include "qgsfieldsitem.h"
%End
  public:

    QgsFieldItem( QgsDataItem *parent /TransferThis/,
                  const QgsField &field );
%Docstring
Constructor for QgsFieldItem, with the specified ``parent`` item and ``field``.

.. note::

   parent item must be a :py:class:`QgsFieldsItem`
%End

    ~QgsFieldItem();

    SIP_PYOBJECT __repr__();
%MethodCode
    QString str = QStringLiteral( "<QgsFieldItem: %1>" ).arg( sipCpp->name() );
    sipRes = PyUnicode_FromString( str.toUtf8().constData() );
%End

    virtual QIcon icon();


    QgsField field() const;
%Docstring
Returns the field definition.

.. versionadded:: 3.26
%End

    virtual bool equal( const QgsDataItem *other );


};



/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/browser/qgsfieldsitem.h                                     *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.py again   *
 ************************************************************************/
