/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/numericformats/qgsbasicnumericformat.h                      *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.py again   *
 ************************************************************************/


class QgsBasicNumericFormat : QgsNumericFormat
{
%Docstring(signature="appended")
A numeric formatter which returns a simple text representation of a value.

.. versionadded:: 3.12
%End

%TypeHeaderCode
#include "qgsbasicnumericformat.h"
%End
  public:

    enum RoundingType
    {
      DecimalPlaces,
      SignificantFigures,
    };

    QgsBasicNumericFormat();
%Docstring
Default constructor
%End

    virtual QString id() const;

    virtual QString visibleName() const;

    virtual int sortKey();

    virtual QString formatDouble( double value, const QgsNumericFormatContext &context ) const;

    virtual QgsNumericFormat *clone() const /Factory/;

    virtual QgsNumericFormat *create( const QVariantMap &configuration, const QgsReadWriteContext &context ) const /Factory/;

    virtual QVariantMap configuration( const QgsReadWriteContext &context ) const;


    int numberDecimalPlaces() const;
%Docstring
Returns the maximum number of decimal places to show.

.. seealso:: :py:func:`setNumberDecimalPlaces`

.. seealso:: :py:func:`showTrailingZeros`
%End

    virtual void setNumberDecimalPlaces( int places );
%Docstring
Sets the maximum number of decimal ``places`` to show.

.. seealso:: :py:func:`numberDecimalPlaces`

.. seealso:: :py:func:`setShowTrailingZeros`
%End

    bool showThousandsSeparator() const;
%Docstring
Returns ``True`` if the thousands grouping separator will be shown.

.. seealso:: :py:func:`setShowThousandsSeparator`
%End

    void setShowThousandsSeparator( bool show );
%Docstring
Sets whether the thousands grouping separator will be shown.

.. seealso:: :py:func:`showThousandsSeparator`
%End

    bool showPlusSign() const;
%Docstring
Returns ``True`` if a leading plus sign will be shown for positive values.

.. seealso:: :py:func:`setShowPlusSign`
%End

    void setShowPlusSign( bool show );
%Docstring
Sets whether a leading plus sign will be shown for positive values.

.. seealso:: :py:func:`showPlusSign`
%End

    bool showTrailingZeros() const;
%Docstring
Returns ``True`` if trailing zeros will be shown (up to the specified
:py:func:`~QgsBasicNumericFormat.numberDecimalPlaces`).

.. seealso:: :py:func:`setShowTrailingZeros`

.. seealso:: :py:func:`numberDecimalPlaces`
%End

    void setShowTrailingZeros( bool show );
%Docstring
Sets whether trailing zeros will be shown (up to the specified
:py:func:`~QgsBasicNumericFormat.numberDecimalPlaces`).

.. seealso:: :py:func:`showTrailingZeros`

.. seealso:: :py:func:`setNumberDecimalPlaces`
%End

    RoundingType roundingType() const;
%Docstring
Returns the rounding type, which controls the behavior of the :py:func:`~QgsBasicNumericFormat.numberDecimalPlaces` setting.

.. seealso:: :py:func:`setRoundingType`
%End

    void setRoundingType( RoundingType type );
%Docstring
Sets the rounding ``type``, which controls the behavior of the :py:func:`~QgsBasicNumericFormat.numberDecimalPlaces` setting.

.. seealso:: :py:func:`roundingType`
%End

    QChar thousandsSeparator() const;
%Docstring
Returns any override for the thousands separator character. If an invalid QChar is returned,
then the QGIS locale separator is used instead.

.. seealso:: :py:func:`setThousandsSeparator`
%End

    void setThousandsSeparator( QChar character );
%Docstring
Sets an override ``character`` for the thousands separator character. If an invalid QChar is set,
then the QGIS locale separator is used instead.

.. seealso:: :py:func:`thousandsSeparator`
%End

    QChar decimalSeparator() const;
%Docstring
Returns any override for the decimal separator character. If an invalid QChar is returned,
then the QGIS locale separator is used instead.

.. seealso:: :py:func:`setDecimalSeparator`
%End

    void setDecimalSeparator( QChar character );
%Docstring
Sets an override ``character`` for the decimal separator character. If an invalid QChar is set,
then the QGIS locale separator is used instead.

.. seealso:: :py:func:`decimalSeparator`
%End

  protected:

    virtual void setConfiguration( const QVariantMap &configuration, const QgsReadWriteContext &context );
%Docstring
Sets the format's ``configuration``.
%End


};

/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/numericformats/qgsbasicnumericformat.h                      *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.py again   *
 ************************************************************************/
