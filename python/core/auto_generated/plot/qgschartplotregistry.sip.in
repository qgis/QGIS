/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/plot/qgschartplotregistry.h                                 *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.py again   *
 ************************************************************************/


class QgsChartPlotAbstractMetadata
{
%Docstring(signature="appended")
Stores metadata about a chart class.

.. note::

   In C++ you can use :py:class:`QgsChartPlotAbstractMetadata` convenience class.

.. versionadded:: 4.0
%End

%TypeHeaderCode
#include "qgschartplotregistry.h"
%End
  public:

    QgsChartPlotAbstractMetadata( const QString &type, const QString &visibleName );
%Docstring
Constructor for QgsChartPlotAbstractMetadata with the specified class
``type``.
%End

    virtual ~QgsChartPlotAbstractMetadata();

    QString type() const;
%Docstring
Returns the unique type code for the chart class.
%End

    QString visibleName() const;
%Docstring
Returns a translated, user visible name for the chart class.
%End


    virtual QgsPlot *createChart() = 0 /TransferBack/;
%Docstring
Creates a chart of this class.
%End

};



class QgsChartPlotRegistry : QObject
{
%Docstring(signature="appended")
Registry of available chart types.

:py:class:`QgsChartPlotRegistry` is not usually directly created, but
rather accessed through :py:func:`QgsApplication.chartRegistry()`.

.. versionadded:: 4.0
%End

%TypeHeaderCode
#include "qgschartplotregistry.h"
%End
  public:

    QgsChartPlotRegistry( QObject *parent = 0 );
%Docstring
Creates a new empty item registry.

QgsChartPlotRegistry is not usually directly created, but rather
accessed through :py:func:`QgsApplication.chartRegistry()`.

.. seealso:: :py:func:`populate`
%End
    ~QgsChartPlotRegistry();

    bool populate();
%Docstring
Populates the registry with standard chart types. If called on a
non-empty registry then this will have no effect and will return
``False``.
%End


    QgsChartPlotAbstractMetadata *chartMetadata( const QString &type ) const;
%Docstring
Returns the metadata for the specified chart ``type``. Returns ``None``
if a corresponding type was not found in the registry.
%End


    bool addChartType( QgsChartPlotAbstractMetadata *metadata /Transfer/ );
%Docstring
Registers a new chart type.

.. note::

   Takes ownership of the metadata instance.
%End

    bool removeChartType( const QString &type );
%Docstring
Removes a new a chart type from the registry.
%End

    QgsPlot *createChart( const QString &type ) const /TransferBack/;
%Docstring
Creates a new instance of a chart given the ``type``.
%End

    QMap<QString, QString> chartTypes() const;
%Docstring
Returns a map of available charts types to translated name.
%End

  signals:

    void chartAdded( const QString &type, const QString &name );
%Docstring
Emitted whenever a new chart type is added to the registry, with the
specified ``type`` and visible ``name``.
%End

    void chartAboutToBeRemoved( const QString &type );
%Docstring
Emitted whenever a new chart type is added to the registry, with the
specified ``type`` and visible ``name``.
%End

  private:
    QgsChartPlotRegistry( const QgsChartPlotRegistry &rh );
};




/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/plot/qgschartplotregistry.h                                 *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.py again   *
 ************************************************************************/
