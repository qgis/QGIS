/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/sensor/qgssensormanager.h                                   *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.py again   *
 ************************************************************************/





class QgsSensorManager : QObject
{
%Docstring(signature="appended")

Manages sensors.

:py:class:`QgsSensorManager` handles the storage, serializing and deserializing
of sensors. Usually this class is not constructed directly, but
rather accessed through a :py:class:`QgsProject` via :py:func:`QgsProject.sensorManager()`.

.. versionadded:: 3.32
%End

%TypeHeaderCode
#include "qgssensormanager.h"
%End
  public:

    explicit QgsSensorManager( QObject *parent /TransferThis/ = 0 );
%Docstring
Constructor for QgsSensorManager, with the specified ``parent`` object.
%End

    ~QgsSensorManager();

    void clear();
%Docstring
Deregisters and removes all sensors from the manager.
%End

    QList<QgsAbstractSensor *> sensors() const;
%Docstring
Returns a list of pointers to all registered sensors.
%End

    QgsAbstractSensor *sensor( const QString &id ) const;
%Docstring
Returns a registered sensor pointer matching a given ``id``. If not
matching sensor is found, a ``None`` will be returned.
%End

    void addSensor( QgsAbstractSensor *sensor /Transfer/ );
%Docstring
Registers a new ``sensor``.
The sensor name does not require uniqueness; sensors will the same
name will store their data in the same sensor name key, allowing for
registration of sensors to cover multiple devices (e.g. two serial port
sensors with alternative port name to cover two machines).

.. note::

   Takes ownership of the sensor.
%End

    bool removeSensor( const QString &id );
%Docstring
Removes a registered sensor matching a given ``id``.

:return: ``True`` if a sensor was removed.
%End

    QStringList sensorNames() const;
%Docstring
Returns a list of registered sensor names.
%End

    QgsAbstractSensor::SensorData sensorData( const QString &name ) const;
%Docstring
Returns the last captured data from a registered sensor matching a given ``name``.
%End

    QMap<QString, QgsAbstractSensor::SensorData> sensorsData() const;
%Docstring
Returns the last captured data of all registered sensors.
%End

    bool readXml( const QDomElement &element, const QDomDocument &document );
%Docstring
Reads the manager's state from a DOM element, restoring all sensors
present in the XML document.

.. seealso:: :py:func:`writeXml`
%End

    QDomElement writeXml( QDomDocument &document ) const;
%Docstring
Returns a DOM element representing the state of the manager.

.. seealso:: :py:func:`readXml`
%End

  signals:

    void sensorAdded( const QString &id );
%Docstring
Emitted when a sensor has been registered.
%End

    void sensorAboutToBeRemoved( const QString &id );
%Docstring
Emitted when a sensor is about to be removed.
%End

    void sensorRemoved( const QString &id );
%Docstring
Emitted when a sensor has been removed.
%End

    void sensorNameChanged( const QString &id );
%Docstring
Emitted when a sensor name has changed.
%End

    void sensorStatusChanged( const QString &id );
%Docstring
Emitted when a sensor status has changed.
%End

    void sensorDataCaptured( const QString &id );
%Docstring
Emitted when newly captured data from a sensor has occurred.
%End

    void sensorErrorOccurred( const QString &id );
%Docstring
Emitted when a sensor error has occurred.
%End

};

/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/sensor/qgssensormanager.h                                   *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.py again   *
 ************************************************************************/
