/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/sensor/qgssensorregistry.h                                  *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.py again   *
 ************************************************************************/


class QgsSensorAbstractMetadata
{
%Docstring(signature="appended")
Stores metadata about a sensor class.

.. note::

   In C++ you can use :py:class:`QgsSensorAbstractMetadata` convenience class.

.. versionadded:: 3.32
%End

%TypeHeaderCode
#include "qgssensorregistry.h"
%End
  public:

    QgsSensorAbstractMetadata( const QString &type, const QString &visibleName );
%Docstring
Constructor for QgsSensorAbstractMetadata with the specified class ``type``.
%End

    virtual ~QgsSensorAbstractMetadata();

    QString type() const;
%Docstring
Returns the unique type code for the sensor class.
%End

    QString visibleName() const;
%Docstring
Returns a translated, user visible name for the sensor class.
%End


    virtual QgsAbstractSensor *createSensor( QObject *parent ) = 0 /TransferBack/;
%Docstring
Creates a sensor of this class.
%End

};



class QgsSensorRegistry : QObject
{
%Docstring(signature="appended")
Registry of available sensor types.

:py:class:`QgsSensorRegistry` is not usually directly created, but rather accessed through
:py:func:`QgsApplication.sensorRegistry()`.

A companion class, :py:class:`QgsSensorGuiRegistry`, handles the GUI behavior
of sensors.

.. versionadded:: 3.32
%End

%TypeHeaderCode
#include "qgssensorregistry.h"
%End
  public:

    QgsSensorRegistry( QObject *parent = 0 );
%Docstring
Creates a new empty item registry.

QgsSensorRegistry is not usually directly created, but rather accessed through
:py:func:`QgsApplication.sensorRegistry()`.

.. seealso:: :py:func:`populate`
%End
    ~QgsSensorRegistry();

    bool populate();
%Docstring
Populates the registry with standard sensor types. If called on a non-empty registry
then this will have no effect and will return ``False``.
%End


    QgsSensorAbstractMetadata *sensorMetadata( const QString &type ) const;
%Docstring
Returns the metadata for the specified sensor ``type``. Returns ``None`` if
a corresponding type was not found in the registry.
%End


    bool addSensorType( QgsSensorAbstractMetadata *metadata /Transfer/ );
%Docstring
Registers a new sensor type.

.. note::

   Takes ownership of the metadata instance.
%End

    bool removeSensorType( const QString &type );
%Docstring
Removes a new a sensor type from the registry.
%End

    QgsAbstractSensor *createSensor( const QString &type, QObject *parent = 0 ) const /TransferBack/;
%Docstring
Creates a new instance of a sensor given the ``type``.
%End

    QMap<QString, QString> sensorTypes() const;
%Docstring
Returns a map of available sensor types to translated name.
%End

  signals:

    void sensorAdded( const QString &type, const QString &name );
%Docstring
Emitted whenever a new sensor type is added to the registry, with the specified
``type`` and visible ``name``.
%End

  private:
    QgsSensorRegistry( const QgsSensorRegistry &rh );
};




/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/sensor/qgssensorregistry.h                                  *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.py again   *
 ************************************************************************/
