# The following has been generated automatically from src/core/vector/qgsvectorlayer.h
try:
    QgsVectorLayer.LayerOptions.__attribute_docs__ = {'loadDefaultStyle': 'Set to ``True`` if the default layer style should be loaded', 'readExtentFromXml': 'If ``True``, the layer extent will be read from XML (i.e. stored in the\nproject file). If ``False``, the extent will be determined by the provider on layer load.', 'transformContext': 'Coordinate transform context\n\n.. versionadded:: 3.8', 'fallbackWkbType': 'Fallback geometry type.\n\nThis may be set for layers where the geometry type is known in advance, and where\nthe layer path may not be initially resolvable. (E.g. layers with a URI pointing\nto a non-existent file). It is only ever used if the layer cannot be resolved,\notherwise the actual layer geometry type will be detected and used for the layer.\n\n.. seealso:: :py:func:`fallbackCrs`\n\n.. versionadded:: 3.8', 'fallbackCrs': 'Fallback layer coordinate reference system.\n\nThis may be set for layers where the coordinate reference system is known in advance, and where\nthe layer path may not be initially resolvable. (E.g. layers with a URI pointing\nto a non-existent file). It is only ever used if the layer cannot be resolved,\notherwise the actual layer CRS will be detected and used for the layer.\n\n.. seealso:: :py:func:`fallbackWkbType`\n\n.. versionadded:: 3.8', 'skipCrsValidation': "Controls whether the layer is allowed to have an invalid/unknown CRS.\n\nIf ``True``, then no validation will be performed on the layer's CRS and the layer\nlayer's :py:func:`~QgsVectorLayer.crs` may be :py:func:`~QgsVectorLayer.invalid` (i.e. the layer will have no georeferencing available\nand will be treated as having purely numerical coordinates).\n\nIf ``False`` (the default), the layer's CRS will be validated using :py:func:`QgsCoordinateReferenceSystem.validate()`,\nwhich may cause a blocking, user-facing dialog asking users to manually select the correct CRS for the\nlayer.\n\n.. versionadded:: 3.10", 'forceReadOnly': "Controls whether the layer is forced to be load as Read Only\n\nIf ``True``, then the layer's provider will only check read capabilities.\nWrite capabilities will be skipped.\n\nIf ``False`` (the default), the layer's provider will check the\nedition capabilities based on user rights or file rights or\nothers.\n\n.. versionadded:: 3.28", 'loadAllStoredStyles': "Controls whether the stored styles will be all loaded.\n\nIf ``True`` and the layer's provider supports style stored in the\ndata source all the available styles will be loaded in addition\nto the default one.\n\nIf ``False`` (the default), the layer's provider will only load\nthe default style.\n\n.. versionadded:: 3.30"}
    QgsVectorLayer.LayerOptions.__doc__ = """Setting options for loading vector layers."""
    QgsVectorLayer.LayerOptions.__group__ = ['vector']
except NameError:
    pass
try:
    QgsVectorLayer.__attribute_docs__ = {'selectionChanged': 'Emitted when selection was changed\n\n:param selected: Newly selected feature ids\n:param deselected: Ids of all features which have previously been selected but are not any more\n:param clearAndSelect: In case this is set to ``True``, the old selection was dismissed and the new selection corresponds to selected\n', 'allowCommitChanged': 'Emitted whenever the :py:func:`~QgsVectorLayer.allowCommit` property of this layer changes.\n\n.. versionadded:: 3.4\n', 'beforeModifiedCheck': 'Emitted when the layer is checked for modifications. Use for last-minute additions.\n', 'beforeEditingStarted': 'Emitted before editing on this layer is started.\n', 'beforeCommitChanges': 'Emitted before changes are committed to the data provider.\n\nThe ``stopEditing`` flag specifies if the editing mode shall be left after this commit.\n', 'beforeRollBack': 'Emitted before changes are rolled back.\n', 'afterCommitChanges': 'Emitted after changes are committed to the data provider.\n\n.. versionadded:: 3.16\n', 'afterRollBack': 'Emitted after changes are rolled back.\n\n.. versionadded:: 3.4\n', 'attributeAdded': 'Will be emitted, when a new attribute has been added to this vector layer.\nApplies only to types :py:class:`QgsFields`.OriginEdit, :py:class:`QgsFields`.OriginProvider and :py:class:`QgsFields`.OriginExpression\n\n:param idx: The index of the new attribute\n\n.. seealso:: :py:func:`updatedFields`\n', 'beforeAddingExpressionField': 'Will be emitted, when an expression field is going to be added to this vector layer.\nApplies only to types :py:class:`QgsFields`.OriginExpression\n\n:param fieldName: The name of the attribute to be added\n', 'attributeDeleted': 'Will be emitted, when an attribute has been deleted from this vector layer.\nApplies only to types :py:class:`QgsFields`.OriginEdit, :py:class:`QgsFields`.OriginProvider and :py:class:`QgsFields`.OriginExpression\n\n:param idx: The index of the deleted attribute\n\n.. seealso:: :py:func:`updatedFields`\n', 'beforeRemovingExpressionField': 'Will be emitted, when an expression field is going to be deleted from this vector layer.\nApplies only to types :py:class:`QgsFields`.OriginExpression\n\n:param idx: The index of the attribute to be deleted\n', 'featureAdded': 'Emitted when a new feature has been added to the layer\n\n:param fid: The id of the new feature\n', 'featureDeleted': 'Emitted when a feature has been deleted.\n\nIf you do expensive operations in a slot connected to this, you should prefer to use\n:py:func:`~QgsVectorLayer.featuresDeleted`.\n\n:param fid: The id of the feature which has been deleted\n', 'featuresDeleted': 'Emitted when features have been deleted.\n\nIf features are deleted within an edit command, this will only be emitted once at the end\nto allow connected slots to minimize the overhead.\nIf features are deleted outside of an edit command, this signal will be emitted once per feature.\n\n:param fids: The feature ids that have been deleted.\n', 'updatedFields': 'Emitted whenever the fields available from this layer have been changed.\nThis can be due to manually adding attributes or due to a join.\n', 'subsetStringChanged': "Emitted when the layer's subset string has changed.\n\n.. versionadded:: 3.2\n", 'attributeValueChanged': 'Emitted whenever an attribute value change is done in the edit buffer.\nNote that at this point the attribute change is not yet saved to the provider.\n\n:param fid: The id of the changed feature\n:param idx: The attribute index of the changed attribute\n:param value: The new value of the attribute\n', 'geometryChanged': 'Emitted whenever a geometry change is done in the edit buffer.\nNote that at this point the geometry change is not yet saved to the provider.\n\n:param fid: The id of the changed feature\n:param geometry: The new geometry\n', 'committedAttributesDeleted': 'Emitted when attributes are deleted from the provider if not in transaction mode.\n', 'committedAttributesAdded': 'Emitted when attributes are added to the provider if not in transaction mode.\n', 'committedFeaturesAdded': 'Emitted when features are added to the provider if not in transaction mode.\n', 'committedFeaturesRemoved': 'Emitted when features are deleted from the provider if not in transaction mode.\n', 'committedAttributeValuesChanges': 'Emitted when attribute value changes are saved to the provider if not in transaction mode.\n', 'committedGeometriesChanges': 'Emitted when geometry changes are saved to the provider if not in transaction mode.\n', 'labelingFontNotFound': 'Emitted when the font family defined for labeling layer is not found on system\n', 'featureBlendModeChanged': 'Signal emitted when :py:func:`~QgsVectorLayer.setFeatureBlendMode` is called\n', 'editCommandStarted': 'Signal emitted when a new edit command has been started\n\n:param text: Description for this edit command\n', 'editCommandEnded': 'Signal emitted, when an edit command successfully ended\n\n.. note::\n\n   This does not mean it is also committed, only that it is written\n   to the edit buffer. See :py:func:`~QgsVectorLayer.beforeCommitChanges`\n', 'editCommandDestroyed': 'Signal emitted, when an edit command is destroyed\n\n.. note::\n\n   This is not a rollback, it is only related to the current edit command.\n   See :py:func:`~QgsVectorLayer.beforeRollBack`\n', 'readCustomSymbology': 'Signal emitted whenever the symbology (QML-file) for this layer is being read.\nIf there is custom style information saved in the file, you can connect to this signal\nand update the layer style accordingly.\n\n:param element: The XML layer style element.\n\n:param errorMessage: Write error messages into this string.\n', 'writeCustomSymbology': 'Signal emitted whenever the symbology (QML-file) for this layer is being written.\nIf there is custom style information you want to save to the file, you can connect\nto this signal and update the element accordingly.\n\n:param element: The XML element where you can add additional style information to.\n:param doc: The XML document that you can use to create new XML nodes.\n:param errorMessage: Write error messages into this string.\n', 'displayExpressionChanged': 'Emitted when the display expression changes\n', 'raiseError': 'Signals an error related to this vector layer.\n', 'editFormConfigChanged': 'Will be emitted whenever the edit form configuration of this layer changes.\n', 'readOnlyChanged': 'Emitted when the read only state of this layer is changed.\nOnly applies to manually set readonly state, not to the edit mode.\n\n.. seealso:: :py:func:`setReadOnly`\n', 'supportsEditingChanged': 'Emitted when the read only state or the data provider of this layer is changed.\n\n.. versionadded:: 3.18\n', 'symbolFeatureCountMapChanged': 'Emitted when the feature count for symbols on this layer has been recalculated.\n'}
    QgsVectorLayer.drawVertexMarker = staticmethod(QgsVectorLayer.drawVertexMarker)
    QgsVectorLayer.__signal_arguments__ = {'selectionChanged': ['selected: QgsFeatureIds', 'deselected: QgsFeatureIds', 'clearAndSelect: bool'], 'beforeCommitChanges': ['stopEditing: bool'], 'attributeAdded': ['idx: int'], 'beforeAddingExpressionField': ['fieldName: str'], 'attributeDeleted': ['idx: int'], 'beforeRemovingExpressionField': ['idx: int'], 'featureAdded': ['fid: QgsFeatureId'], 'featureDeleted': ['fid: QgsFeatureId'], 'featuresDeleted': ['fids: QgsFeatureIds'], 'attributeValueChanged': ['fid: QgsFeatureId', 'idx: int', 'value: object'], 'geometryChanged': ['fid: QgsFeatureId', 'geometry: QgsGeometry'], 'committedAttributesDeleted': ['layerId: str', 'deletedAttributes: QgsAttributeList'], 'committedAttributesAdded': ['layerId: str', 'addedAttributes: List[QgsField]'], 'committedFeaturesAdded': ['layerId: str', 'addedFeatures: QgsFeatureList'], 'committedFeaturesRemoved': ['layerId: str', 'deletedFeatureIds: QgsFeatureIds'], 'committedAttributeValuesChanges': ['layerId: str', 'changedAttributesValues: QgsChangedAttributesMap'], 'committedGeometriesChanges': ['layerId: str', 'changedGeometries: QgsGeometryMap'], 'labelingFontNotFound': ['layer: QgsVectorLayer', 'fontfamily: str'], 'featureBlendModeChanged': ['blendMode: QPainter.CompositionMode'], 'editCommandStarted': ['text: str'], 'readCustomSymbology': ['element: QDomElement', 'errorMessage: str'], 'raiseError': ['msg: str']}
    QgsVectorLayer.__group__ = ['vector']
except NameError:
    pass
try:
    QgsVectorLayer.DeleteContext.__doc__ = """Context for cascade delete features

.. versionadded:: 3.14"""
    QgsVectorLayer.DeleteContext.__group__ = ['vector']
except NameError:
    pass
