# The following has been generated automatically from src/core/network/qgsnetworkaccessmanager.h
try:
    QgsNetworkAccessManager.__attribute_docs__ = {'requestAboutToBeCreated': "Emitted when a network request is about to be created.\n\nThis signal is propagated to the main thread QgsNetworkAccessManager instance, so it is necessary\nonly to connect to the main thread's signal in order to receive notifications about requests\ncreated in any thread.\n\n.. seealso:: :py:func:`requestCreated`\n\n.. seealso:: :py:func:`finished`\n\n.. seealso:: :py:func:`requestTimedOut`\n\n.. versionadded:: 3.6\n", 'requestCreated': '\n.. deprecated:: 3.40\n\n   Use the thread-safe requestAboutToBeCreated( :py:class:`QgsNetworkRequestParameters` ) signal instead.\n', 'finished': "Emitted whenever a pending network reply is finished.\n\nThe ``reply`` parameter will contain a :py:class:`QgsNetworkReplyContent` object, containing all the useful\ninformation relating to the reply, including headers and reply content.\n\nThis signal is propagated to the main thread QgsNetworkAccessManager instance, so it is necessary\nonly to connect to the main thread's signal in order to receive notifications about requests\ncreated in any thread.\n\n.. seealso:: :py:func:`requestAboutToBeCreated`\n\n.. seealso:: :py:func:`requestTimedOut`\n\n.. versionadded:: 3.6\n", 'requestTimedOut': 'Emitted when a request times out.\n', 'downloadProgress': "Emitted when a network reply receives a progress report.\n\nThe ``requestId`` argument reflects the unique ID identifying the original request which the progress report relates to.\n\nThe ``bytesReceived`` parameter indicates the number of bytes received, while ``bytesTotal`` indicates the total number\nof bytes expected to be downloaded. If the number of bytes to be downloaded is not known, ``bytesTotal`` will be -1.\n\nThis signal is propagated to the main thread QgsNetworkAccessManager instance, so it is necessary\nonly to connect to the main thread's signal in order to receive notifications about requests\ncreated in any thread.\n\n.. versionadded:: 3.6\n", 'requestRequiresAuth': "Emitted when a network request prompts an authentication request.\n\nThe ``requestId`` argument reflects the unique ID identifying the original request which the authentication relates to.\n\nThis signal is propagated to the main thread QgsNetworkAccessManager instance, so it is necessary\nonly to connect to the main thread's signal in order to receive notifications about authentication requests\nfrom any thread.\n\nThis signal is for debugging and logging purposes only, and cannot be used to respond to the\nrequests. See :py:class:`QgsNetworkAuthenticationHandler` for details on how to handle authentication requests.\n\n.. seealso:: :py:func:`requestAuthDetailsAdded`\n\n.. versionadded:: 3.6\n", 'requestAuthDetailsAdded': "Emitted when network authentication details have been added to a request.\n\nThe ``requestId`` argument reflects the unique ID identifying the original request which the authentication relates to.\n\nThis signal is always sent from the main thread QgsNetworkAccessManager instance, so it is necessary\nonly to connect to the main thread's signal in order to receive notifications about authentication requests\nfrom any thread.\n\nThis signal is for debugging and logging purposes only, and should not be used to respond to the\nrequests. See :py:class:`QgsNetworkAuthenticationHandler` for details on how to handle authentication requests.\n\n.. seealso:: :py:func:`requestRequiresAuth`\n\n.. versionadded:: 3.6\n", 'requestEncounteredSslErrors': "Emitted when a network request encounters SSL ``errors``.\n\nThe ``requestId`` argument reflects the unique ID identifying the original request which the SSL error relates to.\n\nThis signal is propagated to the main thread QgsNetworkAccessManager instance, so it is necessary\nonly to connect to the main thread's signal in order to receive notifications about SSL errors\nfrom any thread.\n\nThis signal is for debugging and logging purposes only, and cannot be used to respond to the errors.\nSee :py:class:`QgsSslErrorHandler` for details on how to handle SSL errors and potentially ignore them.\n\n.. versionadded:: 3.6\n", 'authBrowserAborted': 'Emitted when external browser logins are to be aborted.\n\n.. versionadded:: 3.20\n', 'cookiesChanged': 'Emitted when the cookies changed.\n\n.. versionadded:: 3.22\n'}
    QgsNetworkAccessManager.instance = staticmethod(QgsNetworkAccessManager.instance)
    QgsNetworkAccessManager.cacheLoadControlName = staticmethod(QgsNetworkAccessManager.cacheLoadControlName)
    QgsNetworkAccessManager.cacheLoadControlFromName = staticmethod(QgsNetworkAccessManager.cacheLoadControlFromName)
    QgsNetworkAccessManager.timeout = staticmethod(QgsNetworkAccessManager.timeout)
    QgsNetworkAccessManager.setTimeout = staticmethod(QgsNetworkAccessManager.setTimeout)
    QgsNetworkAccessManager.blockingGet = staticmethod(QgsNetworkAccessManager.blockingGet)
    QgsNetworkAccessManager.blockingPost = staticmethod(QgsNetworkAccessManager.blockingPost)
    QgsNetworkAccessManager.setRequestPreprocessor = staticmethod(QgsNetworkAccessManager.setRequestPreprocessor)
    QgsNetworkAccessManager.removeRequestPreprocessor = staticmethod(QgsNetworkAccessManager.removeRequestPreprocessor)
    QgsNetworkAccessManager.setReplyPreprocessor = staticmethod(QgsNetworkAccessManager.setReplyPreprocessor)
    QgsNetworkAccessManager.removeReplyPreprocessor = staticmethod(QgsNetworkAccessManager.removeReplyPreprocessor)
    QgsNetworkAccessManager.__signal_arguments__ = {'requestAboutToBeCreated': ['request: QgsNetworkRequestParameters'], 'requestCreated': ['request: QgsNetworkRequestParameters'], 'finished': ['reply: QgsNetworkReplyContent'], 'requestTimedOut': ['reply: QNetworkReply'], 'downloadProgress': ['requestId: int', 'bytesReceived: int', 'bytesTotal: int'], 'requestRequiresAuth': ['requestId: int', 'realm: str'], 'requestAuthDetailsAdded': ['requestId: int', 'realm: str', 'user: str', 'password: str'], 'requestEncounteredSslErrors': ['requestId: int', 'errors: List[QSslError]'], 'cookiesChanged': ['cookies: List[QNetworkCookie]']}
    QgsNetworkAccessManager.__group__ = ['network']
except NameError:
    pass
try:
    QgsNetworkRequestParameters.__group__ = ['network']
except NameError:
    pass
